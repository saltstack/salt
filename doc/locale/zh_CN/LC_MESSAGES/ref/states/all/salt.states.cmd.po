# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/states/all/salt.states.cmd.rst:6
msgid "salt.states.cmd"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:2
msgid "Execution of arbitrary commands"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:4
msgid ""
"The cmd state module manages the enforcement of executed commands, this "
"state can tell a command to run under certain circumstances."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:8
msgid "A simple example to execute a command:"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:15
msgid ""
"Only run if another execution failed, in this case truncate syslog if there "
"is no disk space:"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:24
msgid ""
"Note that when executing a command or script, the state (i.e., changed or "
"not) of the command is unknown to Salt's state system. Therefore, by "
"default, the ``cmd`` state assumes that any command execution results in a "
"changed state."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:28
msgid ""
"This means that if a ``cmd`` state is watched by another state then the "
"state that's watching will always be executed due to the `changed` state in "
"the ``cmd`` state."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:32
msgid ""
"Many state functions in this module now also accept a ``stateful`` argument."
" If ``stateful`` is specified to be true then it is assumed that the command"
" or script will determine its own state and communicate it back by following"
" a simple protocol described below:"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:37
msgid ""
":strong:`If there's nothing in the stdout of the command, then assume no "
"changes.` Otherwise, the stdout must be either in JSON or its `last` non-"
"empty line must be a string of key=value pairs delimited by spaces (no "
"spaces on either side of ``=``)."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:42
msgid ""
":strong:`If it's JSON then it must be a JSON object (e.g., {}).` If it's "
"key=value pairs then quoting may be used to include spaces.  (Python's shlex"
" module is used to parse the key=value string)"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:46
msgid "Two special keys or attributes are recognized in the output::"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:51
msgid ""
"So, only if ``changed`` is ``True`` then assume the command execution has "
"changed the state, and any other key values or attributes in the output will"
" be set as part of the changes."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:55
msgid ""
":strong:`If there's a comment then it will be used as the comment of the "
"state.`"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:58
msgid ""
"Here's an example of how one might write a shell script for use with a "
"stateful command::"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:69
msgid "And an example SLS file using this module::"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:84
msgid ""
"Note that if the ``cmd.wait`` state also specifies ``stateful: True`` it can"
" then be watched by some other states as well."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:87
msgid ""
"``cmd.wait`` is not restricted to watching only cmd states. For example it "
"can also watch a git state for changes"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:106
msgid ""
"Should I use :mod:`cmd.run <salt.states.cmd.run>` or :mod:`cmd.wait "
"<salt.states.cmd.wait>`?"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd:108
msgid ""
"These two states are often confused. The important thing to remember about "
"them is that :mod:`cmd.run <salt.states.cmd.run>` states are run each time "
"the SLS file that contains them is applied. If it is more desirable to have "
"a command that only runs after some other state changes, then :mod:`cmd.wait"
" <salt.states.cmd.wait>` does just that. :mod:`cmd.wait "
"<salt.states.cmd.wait>` is designed to :doc:`watch </ref/states/requisites>`"
" other states, and is executed when the state it is watching changes. "
"Example:"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.call:1
msgid ""
"Invoke a pre-defined Python function with arguments specified in the state "
"declaration. This function is mainly used by the :mod:`salt.renderers.pydsl`"
" renderer."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.call:5
msgid ""
"The interpretation of `onlyif` and `unless` arguments are identical to those"
" of :func:`salt.states.cmd.run`, and all other arguments(`cwd`, `runas`, "
"...) allowed by `cmd.run` are allowed here, except that their effects apply "
"only to the commands specified in `onlyif` and `unless` rather than to the "
"function to be invoked."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.call:11
msgid "In addition the `stateful` argument has no effects here."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.call:13
msgid ""
"The return value of the invoked function will be interpreted as follows."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.call:15
msgid ""
"If it's a dictionary then it will be passed through to the state system, "
"which expects it to have the usual structure returned by any salt state "
"function."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.call:19
msgid ""
"Otherwise, the return value(denoted as ``result`` in the code below) is "
"expected to be a JSON serializable object, and this dictionary is returned:"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.mod_watch:1
msgid "Execute a cmd function based on a watch call"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:1
msgid "Run a command if certain circumstances are met"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:5
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:17
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:5
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:17
msgid "name"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:4
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:16
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:4
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:16
msgid ""
"The command to execute, remember that the command will execute with the path"
" and permissions of the salt-minion."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:9
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:21
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:9
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:21
msgid "onlyif"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:8
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:20
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:8
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:20
msgid ""
"A command to run as a check, run the named command only if the command "
"passed to the ``onlyif`` option returns true"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:13
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:25
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:13
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:25
msgid "unless"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:12
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:24
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:12
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:24
msgid ""
"A command to run as a check, only run the named command if the command "
"passed to the ``unless`` option returns false"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:17
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:29
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:17
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:29
msgid "cwd"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:16
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:28
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:16
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:28
msgid ""
"The current working directory to execute the command in, defaults to /root"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:20
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:32
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:20
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:32
msgid "user"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:20
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:32
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:20
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:32
msgid "The user name to run the command as"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:23
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:35
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:23
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:35
msgid "group"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:23
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:35
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:23
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:35
msgid "The group context to run the command as"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:26
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:38
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:26
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:38
msgid "shell"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:26
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:38
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:38
msgid "The shell to use for execution, defaults to the shell grain"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:30
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:42
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:42
msgid "env"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:29
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:41
msgid ""
"Pass in a list or dict of environment variables to be applied to the command"
" upon execution"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:34
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:49
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:32
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:48
msgid "stateful"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:33
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:48
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:32
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:48
msgid ""
"The command being executed is expected to return data about executing a "
"state"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:37
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:45
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:29
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:45
msgid "umask"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:37
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:45
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:29
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:45
msgid "The umask (in octal) to use when running the command."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:41
msgid "quiet"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:40
msgid ""
"The command will be executed quietly, meaning no log entries of the actual "
"command or its return data"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:44
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:53
msgid "timeout"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.run:44
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:52
msgid ""
"If the command has not terminated after timeout seconds, send the subprocess"
" sigterm, and if sigterm is ignored, follow up with sigkill"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:1
msgid ""
"Download a script from a remote source and execute it. The name can be the "
"source or the source value can be defined."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:8
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:8
msgid "source"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:5
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:5
msgid ""
"The source script being downloaded to the minion, this source script is "
"hosted on the salt master server.  If the file is located on the master in "
"the directory named spam, and is called eggs, the source string is "
"salt://spam/eggs"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:13
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:13
msgid "template"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:11
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:11
msgid ""
"If this setting is applied then the named templating engine will be used to "
"render the downloaded file, currently jinja, mako, and wempy are supported"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:57
msgid "args"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:56
msgid ""
"String of command line args to pass to the script.  Only used if no args are"
" specified as part of the `name` argument."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:60
msgid "__env__"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.script:60
#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:41
msgid ""
"The root directory of the environment for the referencing script. The "
"environments are defined in the master config file."
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:1
msgid "Run the given command only if the watch statement calls it"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait:26
msgid "The shell to use for execution, defaults to /bin/sh"
msgstr ""

#: ../../../salt/states/cmd.pydocstring of salt.states.cmd.wait_script:1
msgid ""
"Download a script from a remote source and execute it only if a watch "
"statement calls it."
msgstr ""
