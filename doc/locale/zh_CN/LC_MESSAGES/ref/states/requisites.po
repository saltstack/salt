# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/states/requisites.rst:6
msgid "Requisites"
msgstr ""

#: ../../ref/states/requisites.rst:8
msgid ""
"The Salt requisite system is used to create relationships between states. "
"The core idea being that, when one state is dependent somehow on another, "
"that inter-dependency can be easily defined."
msgstr ""

#: ../../ref/states/requisites.rst:12
msgid ""
"Requisites come in two types. Direct requisites, and requisite_ins. The "
"relationships are directional, so a requisite statement makes the requiring "
"state declaration depend on the required state declaration:"
msgstr ""

#: ../../ref/states/requisites.rst:27
msgid ""
"So in this example, the file ``/etc/vimrc`` depends on the vim package."
msgstr ""

#: ../../ref/states/requisites.rst:29
msgid ""
"Requisite_in statements are the opposite, instead of saying \"I depend on "
"something\", requisite_ins say \"Someone depends on me\":"
msgstr ""

#: ../../ref/states/requisites.rst:43
msgid ""
"So here, with a requisite_in, the same thing is accomplished, but just from "
"the other way around. The vim package is saying \"/etc/vimrc depends on "
"me\"."
msgstr ""

#: ../../ref/states/requisites.rst:46
msgid ""
"In the end, a single dependency map is created and everything is executed in"
" a finite and predictable order."
msgstr ""

#: ../../ref/states/requisites.rst:49
msgid "Requisite matching"
msgstr ""

#: ../../ref/states/requisites.rst:51
msgid ""
"Requisites match on both the ID Declaration and the ``name`` parameter. This"
" means that, in the example above, the ``require_in`` requisite would also "
"have been matched if the ``/etc/vimrc`` state was written as follows:"
msgstr ""

#: ../../ref/states/requisites.rst:64
msgid "Requisite and Requisite in types"
msgstr ""

#: ../../ref/states/requisites.rst:66
msgid ""
"There are three requisite statements that can be used in Salt. the "
"``require``, ``watch`` and ``use`` requisites. Each requisite also has a "
"corresponding requisite_in: ``require_in``, ``watch_in`` and ``use_in``. All"
" of the requisites define specific relationships and always work with the "
"dependency logic defined above."
msgstr ""

#: ../../ref/states/requisites.rst:73
msgid "Require"
msgstr ""

#: ../../ref/states/requisites.rst:75
msgid ""
"The most basic requisite statement is ``require``. The behavior of require "
"is simple. Make sure that the dependent state is executed before the "
"depending state, and if the dependent state fails, don't run the depending "
"state. So in the above examples the file ``/etc/vimrc`` will only be applied"
" after the vim package is installed and only if the vim package is installed"
" successfully."
msgstr ""

#: ../../ref/states/requisites.rst:82
msgid "Require an entire sls file"
msgstr ""

#: ../../ref/states/requisites.rst:84
msgid ""
"As of Salt 0.16.0, it is possible to require an entire sls file. Do this by "
"first including the sls file and then setting a state to ``require`` the "
"included sls file."
msgstr ""

#: ../../ref/states/requisites.rst:98
msgid "Watch"
msgstr ""

#: ../../ref/states/requisites.rst:100
msgid ""
"The watch statement does everything the require statement does, but with a "
"little more. The watch statement looks into the state modules for a function"
" called ``mod_watch``. If this function is not available in the "
"corresponding state module, then watch does the same thing as require. If "
"the ``mod_watch`` function is in the state module, then the watched state is"
" checked to see if it made any changes to the system, if it has, then "
"``mod_watch`` is called."
msgstr ""

#: ../../ref/states/requisites.rst:107
msgid ""
"Perhaps the best example of using watch is with a :mod:`service.running "
"<salt.states.service.running>` state. When a service watches a state, then "
"the service is reloaded/restarted when the watched state changes::"
msgstr ""

#: ../../ref/states/requisites.rst:120
msgid "Prereq"
msgstr ""

#: ../../ref/states/requisites.rst:122
msgid ""
"The ``prereq`` requisite is a powerful requisite added in 0.16.0. This "
"requisite allows for actions to be taken based on the expected results of a "
"state that has not yet been executed. In more practical terms, a service can"
" be shut down because the ``prereq`` knows that underlying code is going to "
"be updated and the service should be off-line while the update occurs."
msgstr ""

#: ../../ref/states/requisites.rst:128
msgid ""
"The motivation to add this requisite was to allow for routines to remove a "
"system from a load balancer while code is being updated."
msgstr ""

#: ../../ref/states/requisites.rst:131
msgid ""
"The ``prereq`` checks if the required state expects to have any changes by "
"running the single state with ``test=True``. If the pre-required state "
"returns changes, then the state requiring it will execute."
msgstr ""

#: ../../ref/states/requisites.rst:148
msgid ""
"In this case the apache server will only be shutdown if the site-code state "
"expects to deploy fresh code via the file.recurse call, and the site-code "
"deployment will only be executed if the graceful-down run completes "
"successfully."
msgstr ""

#: ../../ref/states/requisites.rst:154
msgid "Use"
msgstr ""

#: ../../ref/states/requisites.rst:156
msgid ""
"The ``use`` requisite is used to inherit the arguments passed in another id "
"declaration. This is useful when many files need to have the same defaults."
msgstr ""

#: ../../ref/states/requisites.rst:159
msgid ""
"The ``use`` statement was developed primarily for the networking states but "
"can be used on any states in Salt. This made sense for the networking state "
"because it can define a long list of options that need to be applied to "
"multiple network interfaces."
msgstr ""

#: ../../ref/states/requisites.rst:167
msgid "Require In"
msgstr ""

#: ../../ref/states/requisites.rst:169
msgid ""
"The ``require_in`` requisite is the literal reverse of ``require``. If a "
"state declaration needs to be required by another state declaration then "
"require_in can accommodate it, so these two sls files would be the same in "
"the end:"
msgstr ""

#: ../../ref/states/requisites.rst:174
msgid "Using ``require``"
msgstr ""

#: ../../ref/states/requisites.rst:186
msgid "Using ``require_in``"
msgstr ""

#: ../../ref/states/requisites.rst:198
msgid ""
"The ``require_in`` statement is particularly useful when assigning a require"
" in a separate sls file. For instance it may be common for httpd to require "
"components used to set up PHP or mod_python, but the HTTP state does not "
"need to be aware of the additional components that require it when it is set"
" up:"
msgstr ""

#: ../../ref/states/requisites.rst:203
msgid "http.sls"
msgstr ""

#: ../../ref/states/requisites.rst:215
msgid "php.sls"
msgstr ""

#: ../../ref/states/requisites.rst:228
msgid "mod_python.sls"
msgstr ""

#: ../../ref/states/requisites.rst:241
msgid ""
"Now the httpd server will only start if php or mod_python are first verified"
" to be installed. Thus allowing for a requisite to be defined \"after the "
"fact\"."
msgstr ""

#: ../../ref/states/requisites.rst:247
msgid "Watch In"
msgstr ""

#: ../../ref/states/requisites.rst:249
msgid ""
"Watch in functions the same as require in, but applies a watch statement "
"rather than a require statement to the external state declaration."
msgstr ""

#: ../../ref/states/requisites.rst:253
msgid "Prereq In"
msgstr ""

#: ../../ref/states/requisites.rst:255
msgid ""
"The ``prereq_in`` requisite in follows the same assignment logic as the "
"``require_in`` requisite in. The ``prereq_in`` call simply assigns "
"``prereq`` to the state referenced. The above example for ``prereq`` can be "
"modified to function in the same way using ``prereq_in``:"
msgstr ""
