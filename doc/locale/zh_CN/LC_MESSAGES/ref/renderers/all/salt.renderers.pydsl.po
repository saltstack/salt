# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/renderers/all/salt.renderers.pydsl.rst:6
msgid "salt.renderers.pydsl"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:1
msgid "A Python-based DSL"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:3
msgid "Jack Kuan <kjkuan@gmail.com>"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:4
msgid "new"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:5
msgid "all"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:7
msgid ""
"The `pydsl` renderer allows one to author salt formulas(.sls files) in pure "
"Python using a DSL that's easy to write and easy to read. Here's an example:"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:23
msgid ""
"Notice that any Python code is allow in the file as it's really a Python "
"module, so you have the full power of Python at your disposal. In this "
"module, a few objects are defined for you, including the usual(with ``__`` "
"added) ``__salt__`` dictionary, ``__grains__``, ``__pillar__``, "
"``__opts__``, ``__env__``, and ``__sls__``, plus a few more:"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:29
msgid "``__file__``"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:31
msgid "local file system path to the sls module."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:33
msgid "``__pydsl__``"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:35
msgid ""
"Salt PyDSL object, useful for configuring DSL behavior per sls rendering."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:37
msgid "``include``"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:39
msgid "Salt PyDSL function for creating :term:`include declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:41
msgid "``extend``"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:43
msgid "Salt PyDSL function for creating :term:`extend declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:45
msgid "``state``"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:47
msgid "Salt PyDSL function for creating :term:`ID declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:50
msgid ""
"A state :term:`ID declaration` is created with a ``state(id)`` function "
"call. Subsequent ``state(id)`` call with the same id returns the same "
"object. This singleton access pattern applies to all declaration objects "
"created with the DSL."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:61
msgid ""
"The `id` argument is optional. If omitted, an UUID will be generated and "
"used as the `id`."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:64
msgid ""
"``state(id)`` returns an object under which you can create a :term:`state "
"declaration` object by accessing an attribute named after *any* state module"
" available in Salt."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:74
msgid ""
"Then, a :term:`function declaration` object can be created from a "
":term:`state declaration` object by one of the following two ways:"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:77
msgid ""
"by directly calling the attribute named for the :term:`state declaration`, "
"and supplying the state function name as the first argument."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:84
msgid ""
"by calling a method named after the state function on the :term:`state "
"declaration` object."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:91
msgid ""
"With either way of creating a :term:`function declaration` object, any "
":term:`function arg declaration`'s can be passed as keyword arguments to the"
" call. Subsequent calls of a :term:`function declaration` will update the "
"arg declarations."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:100
msgid ""
"As a shortcut, the special `name` argument can also be passed as the "
"first(second if calling using the first way) positional argument."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:108
msgid ""
"Finally, a :term:`requisite declaration` object with its :term:`requisite "
"reference`'s can be created by invoking one of the requisite "
"methods(``require``, ``watch``, ``use``, ``require_in``, ``watch_in``, and "
"``use_in``) on either a :term:`function declaration` object or a "
":term:`state declaration` object. The return value of a requisite call is "
"also a :term:`function declaration` object, so you can chain several "
"requisite calls together."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:115
msgid ""
"Arguments to a requisite call can be a list of :term:`state declaration` "
"objects and/or a set of keyword arguments whose names are state modules and "
"values are IDs of :term:`ID declaration`'s or names of :term:`name "
"declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:141
msgid ""
":term:`include declaration` objects can be created with the ``include`` "
"function, while :term:`extend declaration` objects can be created with the "
"``extend`` function, whose arguments are just :term:`function declaration` "
"objects."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:150
msgid ""
"The ``include`` function, by default, causes the included sls file to be "
"rendered as soon as the ``include`` function is called. It returns a list of"
" rendered module objects; sls files not rendered with the pydsl renderer "
"return ``None``'s. This behavior creates no :term:`include declaration`'s in"
" the resulting high state data structure."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:172
msgid ""
"Notice how you can define a reusable function in your pydsl sls module and "
"then call it via the module returned by ``include``."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:175
msgid ""
"It's still possible to do late includes by passing the ``delayed=True`` "
"keyword argument to ``include``."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:182
msgid ""
"Above will just create a :term:`include declaration` in the rendered result,"
" and such call always returns ``None``."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:187
msgid "Special integration with the `cmd` state"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:188
msgid ""
"Taking advantage of rendering a Python module, PyDSL allows you to declare a"
" state that calls a pre-defined Python function when the state is executed."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:200
msgid ""
"The `cmd.call` state function takes care of calling our ``helper`` function "
"with the arguments we specified in the states, and translates the return "
"value of our function into a structure expected by the state system. See "
":func:`salt.states.cmd.call` for more information."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:207
msgid "Implicit ordering of states"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:208
msgid ""
"Salt states are explicitly ordered via :term:`requisite declaration`'s. "
"However, with `pydsl` it's possible to let the renderer track the order of "
"creation for :term:`function declaration` objects, and implicitly add "
"``require`` requisites for your states to enforce the ordering. This feature"
" is enabled by setting the ``ordered`` option on ``__pydsl__``."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:215
msgid ""
"this feature is only available if your minions are using Python >= 2.7."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:233
msgid ""
"Notice that the ``ordered`` option needs to be set after any ``extend`` "
"calls. This is to prevent `pydsl` from tracking the creation of a state "
"function that's passed to an ``extend`` call."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:237
msgid ""
"Above example should create states from ``0`` to ``9`` that will output "
"``0``, ``one``, ``two``, ``3``, ... ``9``, in that order."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:240
msgid ""
"It's important to know that `pydsl` tracks the *creations* of "
":term:`function declaration` objects, and automatically adds a ``require`` "
"requisite to a :term:`function declaration` object that requires the last "
":term:`function declaration` object created before it in the sls file."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:245
msgid ""
"This means later calls(perhaps to update the function's :term:`function arg "
"declaration`) to a previously created function declaration will not change "
"the order."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:249
msgid "Render time state execution"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:250
msgid ""
"When Salt processes a salt formula file(`.sls`), the file is rendered to "
"salt's high state data representation by a renderer before the states can be"
" executed. In the case of the `pydsl` renderer, the .sls file is executed as"
" a python module as it is being rendered which makes it easy to execute a "
"state at render time. In `pydsl`, executing one or more states at render "
"time can be done by calling a configured :term:`ID declaration` object."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:269
msgid ""
"Once an :term:`ID declaration` is called at render time it is detached from "
"the sls module as if it was never defined."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:273
msgid ""
"If `implicit ordering` is enabled(ie, via ``__pydsl__.set(ordered=True)``) "
"then the *first* invocation of a :term:`ID declaration` object must be done "
"before a new :term:`function declaration` is created."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:279
msgid "Integration with the stateconf renderer"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:280
msgid ""
"The :doc:`salt.renderers.stateconf` renderer offers a few interesting "
"features that can be leveraged by the `pydsl` renderer. In particular, when "
"using with the `pydsl` renderer, we are interested in `stateconf`'s sls "
"namespacing feature(via dot-prefixed id declarations), as well as, the "
"automatic `start` and `goal` states generation."
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:285
msgid "Now you can use `pydsl` with `stateconf` like this:"
msgstr ""

#: ../../../salt/renderers/pydsl.pydocstring of salt.renderers.pydsl:303
msgid ""
"``-s`` enables the generation of a stateconf `start` state, and ``-p`` lets "
"us pipe high state data rendered by `pydsl` to `stateconf`. This example "
"shows that by ``require``-ing or ``require_in``-ing the included sls' "
"`start` or `goal` states, it's possible to ensure that the included sls "
"files can be made to execute before or after a state in the including sls "
"file."
msgstr ""
