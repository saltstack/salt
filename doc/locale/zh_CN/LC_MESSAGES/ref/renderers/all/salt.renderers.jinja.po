# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/renderers/all/salt.renderers.jinja.rst:6
msgid "salt.renderers.jinja"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:9
msgid "Jinja in States"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:13
msgid ""
"The most basic usage of Jinja in state files is using control structures to "
"wrap conditional or redundant state elements:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:33
msgid ""
"In this example, the first if block will only be evaluated on minions that "
"aren't running FreeBSD, and the second block changes the file name based on "
"the *os* grain."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:37
msgid ""
"Writing **if-else** blocks can lead to very redundant state files however. "
"In this case, using :doc:`pillars</topics/pillar/index>`, or using a "
"previously defined variable might be easier:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:54
msgid ""
"Using a variable set by the template, the `for loop`_ will iterate over the "
"list of MOTD files to update, adding a state block for each file."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:60
msgid "Passing Variables"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:62
msgid ""
"It is also possible to pass additional variable context directly into a "
"template, using the ``defaults`` and ``context`` mappings of the "
":doc:`file.managed</ref/states/all/salt.states.file>` state:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:79
msgid ""
"The template will receive a variable ``message``, which would be accessed in"
" the template using ``{{ message }}``. If the operating system is FreeBSD, "
"the value of the variable ``message`` would be *Bar*, otherwise it is the "
"default *Foo*"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:85
msgid "Include and Import"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:87
msgid ""
"Includes and imports_ can be used to share common, reusable state "
"configuration between state files and between files."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:94
msgid ""
"This would import the ``test`` template variable or macro, not the ``test`` "
"state element, from the file ``lib.sls``. In the case that the included file"
" performs checks again grains, or something else that requires context, "
"passing the context into the included file is required:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:106
msgid "Variable and block Serializers"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:108
msgid ""
"Salt allows one to serialize any variable into **json** or **yaml**. For "
"example this variable::"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:120
msgid "with this template::"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:126
#: ../../ref/renderers/all/salt.renderers.jinja.rst:158
#: ../../ref/renderers/all/salt.renderers.jinja.rst:197
msgid "will be rendered has::"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:133
msgid ""
"Strings and variables can be deserialized with **load_yaml** and "
"**load_json** tags and filters. It allows one to manipulate data directly in"
" templates, easily:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:169
msgid "Template Serializers"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:171
msgid ""
"Salt implements **import_yaml** and **import_json** tags. They work like the"
" `import tag`_, except that the document is also deserialized."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:174
msgid ""
"Imagine you have a generic state file in which you have the complete data of"
" your infrastucture:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:188
msgid "But you don't want to expose everything to a minion. This state file:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:205
msgid "Macros"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:207
msgid ""
"Macros_ are helpful for eliminating redundant code, however stripping "
"whitespace from the template block, as well as contained blocks, may be "
"necessary to emulate a variable return from the macro."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:235
msgid ""
"This would define a macro_ that would return a string of the full package "
"name, depending on the packaging system's naming convention. The whitespace "
"of the macro was eliminated, so that the macro would return a string without"
" line breaks, using `whitespace control`_."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:241
msgid "Template Inheritance"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:243
msgid ""
"`Template inheritance`_ works fine from state files and files. The search "
"path starts at the root of the state tree or pillar."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:252
msgid "Filters"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:254
msgid "Saltstack extends `builtin filters`_ with his custom filters:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:268
msgid "strftime"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:257
msgid ""
"Converts any time related object into a time based string. It requires a "
"valid :ref:`strftime directives <python2:strftime-strptime-behavior>`. An "
":ref:`exhaustive list <python2:strftime-strptime-behavior>` can be found in "
"the official Python documentation. Fuzzy dates are parsed by `timelib`_ "
"python module. Some exemples are available on this pages."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:274
msgid "Jinja in Files"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:276
msgid "Jinja_ can be used in the same way in managed files:"
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:300
msgid ""
"As an example, configuration was pulled from the file context and from an "
"external template file."
msgstr ""

#: ../../ref/renderers/all/salt.renderers.jinja.rst:305
msgid ""
"Macros and variables can be shared across templates. They should not be "
"starting with one or more underscores, and should be managed by one of the "
"following tags: `macro`, `set`, `load_yaml`, `load_json`, `import_yaml` and "
"`import_json`."
msgstr ""

#: ../../../salt/renderers/jinja.pydocstring of salt.renderers.jinja.render:1
msgid ""
"Render the template_file, passing the functions and grains into the Jinja "
"rendering system."
msgstr ""

#: ../../../salt/renderers/jinja.pydocstring of salt.renderers.jinja.render:4
msgid "string"
msgstr ""
