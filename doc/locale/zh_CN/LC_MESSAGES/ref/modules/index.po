# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/modules/index.rst:6
msgid "Modules"
msgstr ""

#: ../../ref/modules/index.rst:8
msgid "Salt modules are the functions called by the :command:`salt` command."
msgstr ""

#: ../../ref/modules/index.rst:10
msgid ":ref:`Full list of builtin modules <all-salt.modules>`"
msgstr ""

#: ../../ref/modules/index.rst:12
msgid "Salt ships with many modules that cover a wide variety of tasks."
msgstr ""

#: ../../ref/modules/index.rst:15
msgid "Modules Are Easy to Write!"
msgstr ""

#: ../../ref/modules/index.rst:17
msgid ""
"Salt modules are amazingly simple to write. Just write a regular Python "
"module or a regular `Cython`_ module and place it a directory called "
"``_modules/`` within the :conf_master:`file_roots` specified by the master "
"config file, and they will be synced to the minions when "
":mod:`state.highstate <salt.modules.state.highstate>` is run, or by "
"executing the :mod:`saltutil.sync_modules "
"<salt.modules.saltutil.sync_modules>` or :mod:`saltutil.sync_all "
"<salt.modules.saltutil.sync_all>` functions."
msgstr ""

#: ../../ref/modules/index.rst:25
msgid ""
"Any custom modules which have been synced to a minion, that are named the "
"same as one of Salt's default set of modules, will take the place of the "
"default module with the same name. Note that a module's default name is its "
"filename (i.e. ``foo.py`` becomes module ``foo``), but that its name can be "
"overridden by using a :ref:`__virtual__ function <virtual-modules>`."
msgstr ""

#: ../../ref/modules/index.rst:31
msgid ""
"Since Salt modules are just Python/Cython modules, there are no restraints "
"on what you can put inside of a Salt module. If a Salt module has errors and"
" cannot be imported, the Salt minion will continue to load without issue and"
" the module with errors will simply be omitted."
msgstr ""

#: ../../ref/modules/index.rst:36
msgid ""
"If adding a Cython module the file must be named ``<modulename>.pyx`` so "
"that the loader knows that the module needs to be imported as a Cython "
"module. The compilation of the Cython module is automatic and happens when "
"the minion starts, so only the ``*.pyx`` file is required."
msgstr ""

#: ../../ref/modules/index.rst:44
msgid "Cross Calling Modules"
msgstr ""

#: ../../ref/modules/index.rst:46
msgid ""
"All of the Salt modules are available to each other, and can be \"cross "
"called\". This means that, when creating a module, functions in modules that"
" already exist can be called."
msgstr ""

#: ../../ref/modules/index.rst:50
msgid ""
"The variable ``__salt__`` is packed into the modules after they are loaded "
"into the Salt minion. This variable is a :ref:`Python dictionary "
"<python2:typesmapping>` of all of the Salt functions, laid out in the same "
"way that they are made available to the Salt command."
msgstr ""

#: ../../ref/modules/index.rst:55
msgid ""
"Salt modules can be cross called by accessing the value in the ``__salt__`` "
"dict:"
msgstr ""

#: ../../ref/modules/index.rst:62
msgid ""
"This code will call the Salt cmd module's ``run`` function and pass the "
"argument ``bar``."
msgstr ""

#: ../../ref/modules/index.rst:67
msgid "Preloaded Modules Data"
msgstr ""

#: ../../ref/modules/index.rst:69
msgid ""
"When interacting with modules often it is nice to be able to read "
"information dynamically about the minion, or load in configuration "
"parameters for a module. Salt allows for different types of data to be "
"loaded into the modules by the minion, as of this writing Salt loads "
"information gathered from the Salt Grains system and from the minion "
"configuration file."
msgstr ""

#: ../../ref/modules/index.rst:76
msgid "Grains Data"
msgstr ""

#: ../../ref/modules/index.rst:78
msgid ""
"The Salt minion detects information about the system when started. This "
"allows for modules to be written dynamically with respect to the underlying "
"hardware and operating system. This information is referred to as Salt "
"Grains, or \"grains of salt\". The Grains system was introduced to replace "
"Facter, since relying on a Ruby application from a Python application was "
"both slow and inefficient. Grains support replaces Facter in all Salt "
"releases after 0.8"
msgstr ""

#: ../../ref/modules/index.rst:85
msgid ""
"The values detected by the Salt Grains on the minion are available in a "
":ref:`dict <python2:typesmapping>` named ``__grains__`` and can be accessed "
"from within callable objects in the Python modules."
msgstr ""

#: ../../ref/modules/index.rst:89
msgid ""
"To see the contents of the grains dict for a given system in your deployment"
" run the :func:`grains.items` function:"
msgstr ""

#: ../../ref/modules/index.rst:96
msgid ""
"To use the ``__grains__`` dict simply call it as a Python dict from within "
"your code, an excellent example is available in the Grains module: "
":mod:`salt.modules.grains`."
msgstr ""

#: ../../ref/modules/index.rst:102
msgid "Module Configuration"
msgstr ""

#: ../../ref/modules/index.rst:104
msgid ""
"Since parameters for configuring a module may be desired, Salt allows for "
"configuration information stored in the main minion config file to be passed"
" to the modules."
msgstr ""

#: ../../ref/modules/index.rst:108
msgid ""
"Since the minion configuration file is a YAML document, arbitrary "
"configuration data can be passed in the minion config that is read by the "
"modules. It is **strongly** recommended that the values passed in the "
"configuration file match the module. This means that a value intended for "
"the ``test`` module should be named ``test.<value>``."
msgstr ""

#: ../../ref/modules/index.rst:114
msgid ""
"Configuration also requires that default configuration parameters need to be"
" loaded as well. This can be done simply by adding the ``__opts__`` dict to "
"the top level of the module."
msgstr ""

#: ../../ref/modules/index.rst:118
msgid ""
"The test module contains usage of the module configuration, and the default "
"configuration file for the minion contains the information and format used "
"to pass data to the modules. :mod:`salt.modules.test`, :file:`conf/minion`."
msgstr ""

#: ../../ref/modules/index.rst:123
msgid "Printout Configuration"
msgstr ""

#: ../../ref/modules/index.rst:125
msgid ""
"Since module functions can return different data, and the way the data is "
"printed can greatly change the presentation, Salt has a printout "
"configuration."
msgstr ""

#: ../../ref/modules/index.rst:129
msgid ""
"When writing a module the ``__outputter__`` dict can be declared in the "
"module. The ``__outputter__`` dict contains a mapping of function name to "
"Salt Outputter."
msgstr ""

#: ../../ref/modules/index.rst:139
msgid "This will ensure that the text outputter is used."
msgstr ""

#: ../../ref/modules/index.rst:145
msgid "Virtual Modules"
msgstr ""

#: ../../ref/modules/index.rst:147
msgid ""
"Sometimes a module should be presented in a generic way. A good example of "
"this can be found in the package manager modules. The package manager "
"changes from one operating system to another, but the Salt module that "
"interfaces with the package manager can be presented in a generic way."
msgstr ""

#: ../../ref/modules/index.rst:152
msgid ""
"The Salt modules for package managers all contain a ``__virtual__`` function"
" which is called to define what systems the module should be loaded on."
msgstr ""

#: ../../ref/modules/index.rst:155
msgid ""
"The ``__virtual__`` function is used to return either a :ref:`string "
"<python2:typesseq>` or :py:data:`False`. If False is returned then the "
"module is not loaded, if a string is returned then the module is loaded with"
" the name of the string."
msgstr ""

#: ../../ref/modules/index.rst:160
msgid ""
"This means that the package manager modules can be presented as the ``pkg`` "
"module regardless of what the actual module is named."
msgstr ""

#: ../../ref/modules/index.rst:163
msgid ""
"The package manager modules are the best example of using the "
"``__virtual__`` function: :blob:`salt/modules/pacman.py` "
":blob:`salt/modules/yumpkg.py` :blob:`salt/modules/apt.py`"
msgstr ""

#: ../../ref/modules/index.rst:171
msgid "Documentation"
msgstr ""

#: ../../ref/modules/index.rst:173
msgid ""
"Salt modules are self documenting, the :func:`sys.doc` function will return "
"the documentation for all available modules:"
msgstr ""

#: ../../ref/modules/index.rst:180
msgid ""
"This function simply prints out the docstrings found in the modules; when "
"writing Salt modules, please follow the formatting conventions for "
"docstrings as they appear in the other modules."
msgstr ""

#: ../../ref/modules/index.rst:185
msgid "Adding Documentation to Salt Modules"
msgstr ""

#: ../../ref/modules/index.rst:187
msgid ""
"Since life is much better with documentation, it is strongly suggested that "
"all Salt modules have documentation added. Any Salt modules submitted for "
"inclusion in the main distribution of Salt will be required to have "
"documentation."
msgstr ""

#: ../../ref/modules/index.rst:192
msgid ""
"Documenting Salt modules is easy! Just add a `Python docstring`_ to the "
"function."
msgstr ""

#: ../../ref/modules/index.rst:206
msgid ""
"Now when the sys.doc call is executed the docstring will be cleanly returned"
" to the calling terminal."
msgstr ""

#: ../../ref/modules/index.rst:213
msgid "Add Module metadata"
msgstr ""

#: ../../ref/modules/index.rst:215
msgid "Add information about the module using the following field lists:"
msgstr ""

#: ../../ref/modules/index.rst:224
msgid ""
"The maintainer field is a comma-delimited list of developers who help "
"maintain this module."
msgstr ""

#: ../../ref/modules/index.rst:227
msgid ""
"The maturity field indicates the level of quality and testing for this "
"module. Standard labels will be determined."
msgstr ""

#: ../../ref/modules/index.rst:230
msgid ""
"The depends field is a comma-delimited list of modules that this module "
"depends on."
msgstr ""

#: ../../ref/modules/index.rst:233
msgid ""
"The platform field is a comma-delimited list of platforms that this module "
"is known to run on."
msgstr ""

#: ../../ref/modules/index.rst:237
msgid "How Functions are Read"
msgstr ""

#: ../../ref/modules/index.rst:239
msgid ""
"In Salt, Python callable objects contained within a module are made "
"available to the Salt minion for use. The only exception to this rule is a "
"callable object with a name starting with an underscore ``_``."
msgstr ""

#: ../../ref/modules/index.rst:244
msgid "Objects Loaded Into the Salt Minion"
msgstr ""

#: ../../ref/modules/index.rst:256
msgid "Objects NOT Loaded into the Salt Minion"
msgstr ""

#: ../../ref/modules/index.rst:266
msgid "Useful Decorators for Modules"
msgstr ""

#: ../../ref/modules/index.rst:267
msgid ""
"Sometimes when writing modules for large scale deployments you run into some"
" small things that end up severely complicating the code. To alleviate some "
"of this pain Salt has some useful decorators for use within modules!"
msgstr ""

#: ../../ref/modules/index.rst:272
msgid "Depends Decorator"
msgstr ""

#: ../../ref/modules/index.rst:273
msgid ""
"When writing custom modules there are many times where some of the module "
"will work on all hosts, but some functions require (for example) a service "
"to be installed. Instead of trying to wrap much of the code in large "
"try/except blocks you can use a simple decorator to do this. If the "
"dependencies passed to the decorator don't exist, then the salt minion will "
"remove those functions from the module on that host. If a "
"\"fallback_funcion\" is defined, it will replace the function instead of "
"removing it"
msgstr ""

#: ../../ref/modules/index.rst:313
msgid "Examples of Salt Modules"
msgstr ""

#: ../../ref/modules/index.rst:315
msgid ""
"The existing Salt modules should be fairly easy to read and understand, the "
"goal of the main distribution's Salt modules is not only to build a set of "
"functions for Salt, but to stand as examples for building out more Salt "
"modules."
msgstr ""

#: ../../ref/modules/index.rst:320
msgid "The existing modules can be found here: :blob:`salt/modules`"
msgstr ""

#: ../../ref/modules/index.rst:323
msgid ""
"The most simple module is the test module, it contains the simplest Salt "
"function, ``test.ping``:"
msgstr ""
