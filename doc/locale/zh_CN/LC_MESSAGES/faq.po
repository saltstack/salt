# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../faq.rst:5
msgid "Frequently Asked Questions"
msgstr ""

#: ../../faq.rst:10
msgid "Is Salt open-core?"
msgstr ""

#: ../../faq.rst:12
msgid ""
"No. Salt is 100% committed to being open-source, including all of our APIs "
"and the new `'Halite' web interface`_ which will be included in version "
"0.17.0. It is developed under the `Apache 2.0 license`_, allowing it to be "
"used in both open and proprietary projects."
msgstr ""

#: ../../faq.rst:21
msgid "What ports should I open on my firewall?"
msgstr ""

#: ../../faq.rst:23
msgid ""
"Minions need to be able to connect to the Master on TCP ports 4505 and 4506."
" Minions do not need any inbound ports open. More detailed information on "
"firewall settings can be found :doc:`here </topics/tutorials/firewall>`."
msgstr ""

#: ../../faq.rst:28
msgid "My script runs every time I run a *state.highstate*. Why?"
msgstr ""

#: ../../faq.rst:30
msgid ""
"You are probably using :mod:`cmd.run <salt.states.cmd.run>` rather than "
":mod:`cmd.wait <salt.states.cmd.wait>`. A :mod:`cmd.wait "
"<salt.states.cmd.wait>` state will only run when there has been a change in "
"a state that it is watching."
msgstr ""

#: ../../faq.rst:35
msgid ""
"A :mod:`cmd.run <salt.states.cmd.run>` state will run the corresponding "
"command *every time* (unless it is prevented from running by the ``unless`` "
"or ``onlyif`` arguments)."
msgstr ""

#: ../../faq.rst:39
msgid ""
"More details can be found in the docmentation for the :mod:`cmd "
"<salt.states.cmd>` states."
msgstr ""

#: ../../faq.rst:43
msgid ""
"When I run *test.ping*, why don't the Minions that aren't responding return "
"anything? Returning ``False`` would be helpful."
msgstr ""

#: ../../faq.rst:45
msgid ""
"When you run *test.ping* the Master tells Minions to run commands/functions,"
" and listens for the return data, printing it to the screen when it is "
"received. If it doesn't receive anything back, it doesn't have anything to "
"display for that Minion."
msgstr ""

#: ../../faq.rst:50
msgid ""
"There are a couple options for getting information on Minions that are not "
"responding. One is to use the verbose (``-v``) option when you run salt "
"commands, as it will display \"Minion did not return\" for any Minions which"
" time out."
msgstr ""

#: ../../faq.rst:59
msgid ""
"Another option is to use the :mod:`manage.down <salt.runners.manage.down>` "
"runner:"
msgstr ""

#: ../../faq.rst:67
msgid "How does Salt determine the Minion's id?"
msgstr ""

#: ../../faq.rst:69
msgid ""
"If the Minion id is not configured explicitly (using the :conf_minion:`id` "
"parameter), Salt will determine the id based on the hostname. Exactly how "
"this is determined varies a little between operating systems and is "
"described in detail :ref:`here <minion-id-generation>`."
msgstr ""

#: ../../faq.rst:75
msgid ""
"I'm trying to manage packages/services but I get an error saying that the "
"state is not available. Why?"
msgstr ""

#: ../../faq.rst:77
msgid ""
"Salt detects the Minion's operating system and assigns the correct package "
"or service management module based on what is detected. However, for certain"
" custom spins and OS derivatives this detection fails. In cases like this, "
"an issue should be opened on our tracker_, with the following information:"
msgstr ""

#: ../../faq.rst:82
msgid "The output of the following command:"
msgstr ""

#: ../../faq.rst:88
msgid "The contents of ``/etc/lsb-release``, if present on the Minion."
msgstr ""

#: ../../faq.rst:93
msgid "I'm using gitfs and my custom modules/states/etc are not syncing. Why?"
msgstr ""

#: ../../faq.rst:95
msgid ""
"In versions of Salt 0.16.3 or older, there is a bug in :doc:`gitfs "
"</topics/tutorials/gitfs>` which can affect the syncing of custom types. "
"Upgrading to 0.16.4 or newer will fix this."
msgstr ""

#: ../../faq.rst:100
msgid "Why aren't my custom modules/states/etc. available on my Minions?"
msgstr ""

#: ../../faq.rst:102
msgid ""
"Custom modules are only synced to Minions when :mod:`state.highstate "
"<salt.modules.state.highstate>`, :mod:`saltutil.sync_modules "
"<salt.modules.saltutil.sync_modules>`, or :mod:`saltutil.sync_all "
"<salt.modules.saltutil.sync_all>` is run. Similarly, custom states are only "
"synced to Minions when :mod:`state.highstate "
"<salt.modules.state.highstate>`, :mod:`saltutil.sync_states "
"<salt.modules.saltutil.sync_states>`, or :mod:`saltutil.sync_all "
"<salt.modules.saltutil.sync_all>` is run."
msgstr ""

#: ../../faq.rst:110
msgid ""
"Other custom types (renderers, outputters, etc.) have similar behavior, see "
"the documentation for the :mod:`saltutil <salt.modules.saltutil>` module for"
" more information."
msgstr ""

#: ../../faq.rst:115
msgid ""
"Module ``X`` isn't available, even though the shell command it uses is "
"installed. Why?"
msgstr ""

#: ../../faq.rst:116
msgid ""
"This is most likely a PATH issue. Did you custom-compile the software which "
"the module requires? RHEL/CentOS/etc. in particular override the root user's"
" path in ``/etc/init.d/functions``, setting it to "
"``/sbin:/usr/sbin:/bin:/usr/bin``, making software installed into "
"``/usr/local/bin`` unavailable to Salt when the Minion is started using the "
"initscript. In version 0.18.0, Salt will have a better solution for these "
"sort of PATH-related issues, but recompiling the software to install it into"
" a location within the PATH should resolve the issue in the meantime. "
"Alternatively, you can create a symbolic link within the PATH using a "
":mod:`file.symlink <salt.states.file.symlink>` state."
msgstr ""
