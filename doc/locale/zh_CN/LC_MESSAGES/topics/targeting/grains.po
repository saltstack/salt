# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/targeting/grains.rst:6 ../../topics/targeting/grains.rst:13
msgid "Grains"
msgstr ""

#: ../../topics/targeting/grains.rst:8
msgid ""
"Salt comes with an interface to derive information about the underlying "
"system. This is called the grains interface, because it presents salt with "
"grains of information."
msgstr ""

#: ../../topics/targeting/grains.rst:15
msgid ""
"Static bits of information that a minion collects about the system when the "
"minion first starts."
msgstr ""

#: ../../topics/targeting/grains.rst:18
msgid ""
"The grains interface is made available to Salt modules and components so "
"that the right salt minion commands are automatically available on the right"
" systems."
msgstr ""

#: ../../topics/targeting/grains.rst:22
msgid ""
"It is important to remember that grains are bits of information loaded when "
"the salt minion starts, so this information is static. This means that the "
"information in grains is unchanging, therefore the nature of the data is "
"static. So grains information are things like the running kernel, or the "
"operating system."
msgstr ""

#: ../../topics/targeting/grains.rst:28
msgid "Match all CentOS minions:"
msgstr ""

#: ../../topics/targeting/grains.rst:34
msgid ""
"Match all minions with 64-bit CPUs, and return number of CPU cores for each "
"matching minion:"
msgstr ""

#: ../../topics/targeting/grains.rst:41
msgid ""
"Additionally, globs can be used in grain matches, and grains that are nested"
" in a :ref:`dictionary <python2:typesmapping>` can be matched by adding a "
"colon for each level that is traversed. For example, the following will "
"match hosts that have a grain called ``ec2_tags``, which itself is a "
":ref:`dict <python2:typesmapping>` with a key named ``environment``, which "
"has a value that contains the word ``production``:"
msgstr ""

#: ../../topics/targeting/grains.rst:54
msgid "Listing Grains"
msgstr ""

#: ../../topics/targeting/grains.rst:56
msgid "Available grains can be listed by using the 'grains.ls' module:"
msgstr ""

#: ../../topics/targeting/grains.rst:62
msgid "Grains data can be listed by using the 'grains.items' module:"
msgstr ""

#: ../../topics/targeting/grains.rst:72
msgid "Grains in the Minion Config"
msgstr ""

#: ../../topics/targeting/grains.rst:74
msgid ""
"Grains can also be statically assigned within the minion configuration file."
" Just add the option ``grains`` and pass options to it:"
msgstr ""

#: ../../topics/targeting/grains.rst:87
msgid ""
"Then status data specific to your servers can be retrieved via Salt, or used"
" inside of the State system for matching. It also makes targeting, in the "
"case of the example above, simply based on specific data about your "
"deployment."
msgstr ""

#: ../../topics/targeting/grains.rst:93
msgid "Grains in /etc/salt/grains"
msgstr ""

#: ../../topics/targeting/grains.rst:95
msgid ""
"If you do not want to place your custom static grains in the minion config "
"file, you can also put them in ``/etc/salt/grains``. They are configured in "
"the same way as in the above example, only without a top-level ``grains:`` "
"key:"
msgstr ""

#: ../../topics/targeting/grains.rst:108
msgid "Precedece of Custom Static Grains"
msgstr ""

#: ../../topics/targeting/grains.rst:110
msgid ""
"Be careful when defining grains both in ``/etc/salt/grains`` and within the "
"minion config file. If a grain is defined in both places, the value in the "
"minion config file takes precedence, and will always be used over its "
"counterpart in ``/etc/salt/grains``."
msgstr ""

#: ../../topics/targeting/grains.rst:116
msgid "Grains in Top file"
msgstr ""

#: ../../topics/targeting/grains.rst:118
msgid ""
"With correctly setup grains on the Minion, the Top file used in Pillar or "
"during Highstate can be made really efficient.  Like for example, you could "
"do:"
msgstr ""

#: ../../topics/targeting/grains.rst:138
msgid ""
"For this example to work, you would need the grain ``node_type`` and the "
"correct value to match on.  This simple example is nice, but too much of the"
" code is similar.  To go one step further, we can place some Jinja template "
"code into the Top file."
msgstr ""

#: ../../topics/targeting/grains.rst:148
msgid ""
"The Jinja code simplified the Top file, and allowed SaltStack to work its "
"magic."
msgstr ""

#: ../../topics/targeting/grains.rst:153
msgid "Writing Grains"
msgstr ""

#: ../../topics/targeting/grains.rst:155
msgid ""
"Grains are easy to write. The grains interface is derived by executing all "
"of the \"public\" functions found in the modules located in the grains "
"package or the custom grains directory. The functions in the modules of the "
"grains must return a Python :ref:`dict <python2:typesmapping>`, where the "
"keys in the :ref:`dict <python2:typesmapping>` are the names of the grains "
"and the values are the values."
msgstr ""

#: ../../topics/targeting/grains.rst:162
msgid ""
"Custom grains should be placed in a ``_grains`` directory located under the "
":conf_master:`file_roots` specified by the master config file. They will be "
"distributed to the minions when :mod:`state.highstate "
"<salt.modules.state.highstate>` is run, or by executing the "
":mod:`saltutil.sync_grains <salt.modules.saltutil.sync_grains>` or "
":mod:`saltutil.sync_all <salt.modules.saltutil.sync_all>` functions."
msgstr ""

#: ../../topics/targeting/grains.rst:169
msgid ""
"Before adding a grain to Salt, consider what the grain is and remember that "
"grains need to be static data. If the data is something that is likely to "
"change, consider using :doc:`Pillar <../pillar/index>` instead."
msgstr ""

#: ../../topics/targeting/grains.rst:175
msgid "Examples of Grains"
msgstr ""

#: ../../topics/targeting/grains.rst:177
msgid ""
"The core module in the grains package is where the main grains are loaded by"
" the Salt minion and provides the principal example of how to write grains:"
msgstr ""

#: ../../topics/targeting/grains.rst:180
msgid ":blob:`salt/grains/core.py`"
msgstr ""

#: ../../topics/targeting/grains.rst:184
msgid "Syncing Grains"
msgstr ""

#: ../../topics/targeting/grains.rst:186
msgid ""
"Syncing grains can be done a number of ways, they are automatically synced "
"when :mod:`state.highstate <salt.modules.state.highstate>` is called, or (as"
" noted above) the grains can be manually synced and reloaded by calling the "
":mod:`saltutil.sync_grains <salt.modules.saltutil.sync_grains>` or "
":mod:`saltutil.sync_all <salt.modules.saltutil.sync_all>` functions."
msgstr ""
