# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/development/external_pillars.rst:6
msgid "External Pillars"
msgstr ""

#: ../../topics/development/external_pillars.rst:8
msgid ""
"Salt provides a mechanism for generating pillar data by calling external "
"pillar interfaces. This document will describe an outline of an ext_pillar "
"module."
msgstr ""

#: ../../topics/development/external_pillars.rst:13
msgid "Location"
msgstr ""

#: ../../topics/development/external_pillars.rst:15
msgid ""
"Salt expects to find your ``ext_pillar`` module in the same location where "
"it looks for other python modules. If the ``extension_modules`` option in "
"your Salt master configuration is set, Salt will look for a ``pillar`` "
"directory under there and load all the modules it finds. Otherwise, it will "
"look in your Python site-packages ``salt/pillar`` directory."
msgstr ""

#: ../../topics/development/external_pillars.rst:22
msgid "Configuration"
msgstr ""

#: ../../topics/development/external_pillars.rst:24
msgid ""
"The external pillars that are called when a minion refreshes its pillars is "
"controlled by the ``ext_pillar`` option in the Salt master configuration. "
"You can pass a single argument, a list of arguments or a dictionary of "
"arguments to your pillar:"
msgstr ""

#: ../../topics/development/external_pillars.rst:42
msgid "The Module"
msgstr ""

#: ../../topics/development/external_pillars.rst:45
msgid "Imports and Logging"
msgstr ""

#: ../../topics/development/external_pillars.rst:47
msgid ""
"Import modules your external pillar module needs. You should first include "
"generic modules that come with stock Python:"
msgstr ""

#: ../../topics/development/external_pillars.rst:55
msgid ""
"And then start logging. This is an idiomatic way of setting up logging in "
"Salt:"
msgstr ""

#: ../../topics/development/external_pillars.rst:62
msgid ""
"Finally, load modules that are specific to what you are doing. You should "
"catch import errors and set a flag that the the ``__virtual__`` function can"
" use later."
msgstr ""

#: ../../topics/development/external_pillars.rst:75
msgid "Options"
msgstr ""

#: ../../topics/development/external_pillars.rst:77
msgid ""
"If you define an ``__opts__`` dictionary, it will be merged into the "
"``__opts__`` dictionary handed to the ``ext_pillar`` function later. This is"
" a good place to put default configuration items. The convention is to name "
"things ``modulename.option``."
msgstr ""

#: ../../topics/development/external_pillars.rst:88
msgid "Initialization"
msgstr ""

#: ../../topics/development/external_pillars.rst:90
msgid ""
"If you define an ``__init__`` function, it will be called with the following"
" signature:"
msgstr ""

#: ../../topics/development/external_pillars.rst:99
msgid ""
"**Note**: The ``__init__`` function is ran every time a particular minion "
"causes the external pillar to be called, so don't put heavy initialization "
"code here. The ``__init__`` functionality is a side-effect of the Salt "
"loader, so it may not be as useful in pillars as it is in other Salt items."
msgstr ""

#: ../../topics/development/external_pillars.rst:105
msgid "__virtual__"
msgstr ""

#: ../../topics/development/external_pillars.rst:107
msgid ""
"If you define a ``__virtual__`` function, you can control whether or not "
"this module is visible. If it returns ``False`` then Salt ignores this "
"module. If it returns a string, then that string will be how Salt identifies"
" this external pillar in its ``ext_pillar`` configuration. If this function "
"does not exist, then the name Salt's ``ext_pillar`` will use to identify "
"this module is its conventional name in Python."
msgstr ""

#: ../../topics/development/external_pillars.rst:114
msgid ""
"This is useful to write modules that can be installed on all Salt masters, "
"but will only be visible if a particular piece of software your module "
"requires is installed."
msgstr ""

#: ../../topics/development/external_pillars.rst:139
msgid "ext_pillar"
msgstr ""

#: ../../topics/development/external_pillars.rst:141
msgid ""
"This is where the real work of an external pillar is done. If this module is"
" active and has a function called ``ext_pillar``, whenever a minion updates "
"its pillar this function is called."
msgstr ""

#: ../../topics/development/external_pillars.rst:145
msgid ""
"How it is called depends on how it is configured in the Salt master "
"configuration. The first argument is always the current pillar dictionary, "
"this contains pillar items that have already been added, starting with the "
"data from ``pillar_roots``, and then from any already-ran external pillars."
msgstr ""

#: ../../topics/development/external_pillars.rst:150
msgid "Using our example above:"
msgstr ""

#: ../../topics/development/external_pillars.rst:159
msgid ""
"In the ``example_a`` case, ``pillar`` will contain the items from the "
"``pillar_roots``, in ``example_b`` ``pillar``  will contain that plus the "
"items added by ``example_a``, and in ``example_c`` ``pillar`` will contain "
"that plus the items added by ``example_b``."
msgstr ""

#: ../../topics/development/external_pillars.rst:164
msgid ""
"This function should return a dictionary, the contents of which are merged "
"in with all of the other pillars and returned to the minion. **Note**: this "
"function is called once for each minion that fetches its pillar data."
msgstr ""

#: ../../topics/development/external_pillars.rst:179
msgid ""
"You shouldn't just add items to ``pillar`` and return that, since that will "
"cause Salt to merge data that already exists. Rather, just return the items "
"you are adding or changing. You could, however, use ``pillar`` in your "
"module to make some decision based on pillar data that already exists."
msgstr ""

#: ../../topics/development/external_pillars.rst:184
msgid "This function has access to some useful globals:"
msgstr ""

#: ../../topics/development/external_pillars.rst:187
msgid ""
"A dictionary of mostly Salt configuration options. If you had an "
"``__opts__`` dictionary defined in your module, those values will be "
"included. Also included and most useful is ``__opts__['id']``, which is the "
"minion id of the minion asking for pillar data."
msgstr ""

#: ../../topics/development/external_pillars.rst:193
msgid ""
"A dictionary of Salt module functions, useful so you don't have to duplicate"
" functions that already exist. E.g. ``__salt__['cmd.run']( 'ls -l' )`` "
"**Note**, runs on the *master*"
msgstr ""

#: ../../topics/development/external_pillars.rst:198
msgid "A dictionary of the grains of the minion making this pillar call."
msgstr ""

#: ../../topics/development/external_pillars.rst:203
msgid "Example configuration"
msgstr ""

#: ../../topics/development/external_pillars.rst:205
msgid ""
"As an example, if you wanted to add external pillar via the ``cmd_json`` "
"external pillar, add something like this to your master config:"
msgstr ""
