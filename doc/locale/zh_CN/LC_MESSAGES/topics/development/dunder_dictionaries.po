# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/development/dunder_dictionaries.rst:6
msgid "Dunder Dictionaries"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:8
msgid ""
"Salt provides several special \"dunder\" dictionaries as a convenience for "
"Salt development.  These include ``__opts__``, ``__context__``, "
"``__salt__``, and others. This document will describe each dictionary and "
"detail where they exist and what information and/or functionality they "
"provide."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:15
msgid "__opts__"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:18
#: ../../topics/development/dunder_dictionaries.rst:45
#: ../../topics/development/dunder_dictionaries.rst:63
#: ../../topics/development/dunder_dictionaries.rst:80
msgid "Available in"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:20
msgid "All loader modules"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:22
msgid ""
"The ``__opts__`` dictionary contains all of the options passed in the "
"configuration file for the master or minion."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:27
msgid ""
"In many places in salt, instead of pulling raw data from the __opts__ dict, "
"configuration data should be pulled from the salt `get` frunctions such as "
"config.get, aka - __salt__['config.get']('foo:bar') The `get` functions also"
" allow for dict traversal via the *:* delimiter. Consider using get "
"functions whenever using __opts__ or __pillar__ and __grains__ (when using "
"grains for configuration data)"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:34
msgid ""
"The configuration file data made available in the ``__opts__`` dictionary is"
" the configuration data relative to the running daemon. If the modules are "
"loaded and executed by the master, then the master configuration data is "
"available, if the modules are executed by the minion, then the minion "
"configuration is available. Any additional information passed into the "
"respective configuration files is made available"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:42
msgid "__salt__"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:47
#: ../../topics/development/dunder_dictionaries.rst:65
#: ../../topics/development/dunder_dictionaries.rst:82
msgid "Execution Modules"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:48
#: ../../topics/development/dunder_dictionaries.rst:66
#: ../../topics/development/dunder_dictionaries.rst:83
msgid "State Modules"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:49
#: ../../topics/development/dunder_dictionaries.rst:67
#: ../../topics/development/dunder_dictionaries.rst:84
msgid "Returners"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:51
msgid ""
"``__salt__`` contains the execution module functions. This allows for all "
"functions to be called as they have been set up by the salt loader."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:60
msgid "__grains__"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:68
msgid "External Pillar"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:70
msgid ""
"The ``__grains__`` dictionary contains the grains data generated by the "
"minion that is currently being worked with. In execution modules, state "
"modules and returners this is the grains of the minion running the calls, "
"when generating the external pillar the ``__grains__`` is the grains data "
"from the minion that the pillar is being generated for."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:77
msgid "__pillar__"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:86
msgid ""
"The ``__pillar__`` dictionary contains the pillar for the respective minion."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:89
msgid "__context__"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:91
msgid "``__context__`` exists in state modules and execution modules."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:93
msgid ""
"During a state run the ``__context__`` dictionary persists across all states"
" that are run and then is destroyed when the state ends."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:96
msgid ""
"When running an execution module ``__context__`` persists across all module "
"executions until the modules are refreshed; such as when "
"``saltutils.sync_all`` or ``state.highstate`` are executed."
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:100
msgid ""
"A great place to see how to use ``__context__`` is in the cp.py module in "
"salt/modules/cp.py. The fileclient authenticates with the master when it is "
"instantiated and then is used to copy files to the minion. Rather than "
"create a new fileclient for each file that is to be copied down, one "
"instance of the fileclient is instantiated in the ``__context__`` dictionary"
" and is reused for each file. Here is an example from salt/modules/cp.py:"
msgstr ""

#: ../../topics/development/dunder_dictionaries.rst:113
msgid ""
"Because __context__ may or may not have been destroyed, always be sure to "
"check for the existence of the key in __context__ and generate the key "
"before using it."
msgstr ""
