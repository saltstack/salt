# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/development/modular_systems.rst:6
msgid "Modular Systems"
msgstr ""

#: ../../topics/development/modular_systems.rst:8
msgid ""
"When first working with Salt, it is not always clear where all of the "
"modular components are and what they do. Salt comes loaded with more modular"
" systems than many users are aware of, making Salt very easy to extend in "
"many places."
msgstr ""

#: ../../topics/development/modular_systems.rst:12
msgid ""
"The most commonly used modular systems are execution modules and states. But"
" the modular systems extend well beyond the more easily exposed components "
"and are often added to Salt to make the complete system more flexible."
msgstr ""

#: ../../topics/development/modular_systems.rst:17
msgid "Execution Modules"
msgstr ""

#: ../../topics/development/modular_systems.rst:19
msgid ""
"Execution modules make up the core of the functionality used by Salt to "
"interact with client systems. The execution modules create the core system "
"management library used by all Salt systems, including states, which "
"interact with minion systems."
msgstr ""

#: ../../topics/development/modular_systems.rst:24
msgid ""
"Execution modules are completely open ended in their execution. They can be "
"used to do anything required on a minion, from installing packages to "
"detecting information about the system. The only restraint in execution "
"modules is that the defined functions always return a JSON serializable "
"object."
msgstr ""

#: ../../topics/development/modular_systems.rst:30
msgid ""
"For a list of all built in execution modules, click :doc:`here "
"</ref/modules/all/index>`"
msgstr ""

#: ../../topics/development/modular_systems.rst:33
msgid ""
"For information on writing execution modules, see :doc:`this page "
"</ref/modules/index>`."
msgstr ""

#: ../../topics/development/modular_systems.rst:37
msgid "State Modules"
msgstr ""

#: ../../topics/development/modular_systems.rst:39
msgid ""
"State modules are used to define the state interfaces used by Salt States. "
"These modules are restrictive in that they must follow a number of rules to "
"function properly."
msgstr ""

#: ../../topics/development/modular_systems.rst:45
msgid ""
"State modules define the available routines in sls files. If calling an "
"execution module directly is desired, take a look at the `module` state."
msgstr ""

#: ../../topics/development/modular_systems.rst:50
msgid "Auth"
msgstr ""

#: ../../topics/development/modular_systems.rst:52
msgid ""
"The auth module system allows for external authentication routines to be "
"easily added into Salt. The `auth` function needs to be implemented to "
"satisfy the requirements of an auth module. Use the ``pam`` module as an "
"example."
msgstr ""

#: ../../topics/development/modular_systems.rst:57
msgid "Fileserver"
msgstr ""

#: ../../topics/development/modular_systems.rst:59
msgid ""
"The fileserver module system is used to create fileserver backends used by "
"the Salt Master. These modules need to implement the functions used in the "
"fileserver subsystem. Use the ``gitfs`` module as an example."
msgstr ""

#: ../../topics/development/modular_systems.rst:64
msgid "Grains"
msgstr ""

#: ../../topics/development/modular_systems.rst:66
msgid ""
"Grain modules define extra routines to populate grains data. All defined "
"public functions will be executed and MUST return a Python dict object. The "
"dict keys will be added to the grains made available to the minion."
msgstr ""

#: ../../topics/development/modular_systems.rst:71
msgid "Output"
msgstr ""

#: ../../topics/development/modular_systems.rst:73
msgid ""
"The output modules supply the outputter system with routines to display data"
" in the terminal. These modules are very simple and only require the "
"`output` function to execute. The default system outputter is the ``nested``"
" module."
msgstr ""

#: ../../topics/development/modular_systems.rst:78
msgid "Pillar"
msgstr ""

#: ../../topics/development/modular_systems.rst:80
msgid ""
"Used to define optional external pillar systems. The pillar generated via "
"the filesystem pillar is passed into external pillars. This is commonly used"
" as a bridge to database data for pillar, but is also the backend to the "
"libvirt state used to generate and sign libvirt certificates on the fly."
msgstr ""

#: ../../topics/development/modular_systems.rst:86
msgid "Renderers"
msgstr ""

#: ../../topics/development/modular_systems.rst:88
msgid ""
"Renderers are the system used to render sls files into salt highdata for the"
" state compiler. They can be as simple as the ``py`` renderer and as complex"
" as ``stateconf`` and ``pydsl``."
msgstr ""

#: ../../topics/development/modular_systems.rst:93
msgid "Returners"
msgstr ""

#: ../../topics/development/modular_systems.rst:95
msgid ""
"Returners are used to send data from minions to external sources, commonly "
"databases. A full returner will implement all routines to be supported as an"
" external job cache. Use the ``redis`` returner as an example."
msgstr ""

#: ../../topics/development/modular_systems.rst:100
msgid "Runners"
msgstr ""

#: ../../topics/development/modular_systems.rst:102
msgid ""
"Runners are purely master-side execution sequences. These range from simple "
"reporting to orchestration engines like the overstate."
msgstr ""

#: ../../topics/development/modular_systems.rst:106
msgid "Tops"
msgstr ""

#: ../../topics/development/modular_systems.rst:108
msgid ""
"Tops modules are used to convert external data sources into top file data "
"for the state system."
msgstr ""

#: ../../topics/development/modular_systems.rst:112
msgid "Wheel"
msgstr ""

#: ../../topics/development/modular_systems.rst:114
msgid ""
"The wheel system is used to manage master side management routines. These "
"routines are primarily intended for the API to enable master configuration."
msgstr ""
