# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/releases/0.11.0.rst:6
msgid "Salt 0.11.0 Release Notes"
msgstr ""

#: ../../topics/releases/0.11.0.rst:8
msgid ""
"Salt 0.11.0 is here, with some highly sought after and exciting features. "
"These features include the new overstate system, the reactor system, a new "
"state run scope component called __context__, the beginning of the search "
"system (still needs a great deal of work), multiple package states, the "
"MySQL returner and a better system to arbitrarily reference outputters."
msgstr ""

#: ../../topics/releases/0.11.0.rst:14
msgid ""
"It is also noteworthy that we are changing how we mark release numbers. For "
"the life of the project we have been pushing every release with features and"
" fixes as point releases. We will now be releasing point releases for only "
"bug fixes on a more regular basis and major feature releases on a slightly "
"less regular basis. This means that the next release will be a bugfix only "
"release with a version number of 0.11.1. The next feature release will be "
"named 0.12.0 and will mark the end of life for the 0.11 series."
msgstr ""

#: ../../topics/releases/0.11.0.rst:23
msgid "Major Features"
msgstr ""

#: ../../topics/releases/0.11.0.rst:26
msgid "OverState"
msgstr ""

#: ../../topics/releases/0.11.0.rst:28
msgid ""
"The overstate system is a simple way to manage rolling state executions "
"across many minions. The overstate allows for a state to depend on the "
"successful completion of another state."
msgstr ""

#: ../../topics/releases/0.11.0.rst:33
msgid "Reactor System"
msgstr ""

#: ../../topics/releases/0.11.0.rst:35
msgid ""
"The new reactor system allows for a reactive logic engine to be created "
"which can respond to events within a salted environment. The reactor system "
"uses sls files to match events fired on the master with actions, enabling "
"Salt to react to problems in an infrastructure."
msgstr ""

#: ../../topics/releases/0.11.0.rst:40
msgid ""
"Your load-balanced group of webservers is under extra load? Spin up a new VM"
" and add it to the group. Your fileserver is filling up? Send a notification"
" to your sysadmin on call. The possibilities are endless!"
msgstr ""

#: ../../topics/releases/0.11.0.rst:45
msgid "Module Context"
msgstr ""

#: ../../topics/releases/0.11.0.rst:47
msgid ""
"A new component has been added to the module loader system. The module "
"context is a data structure that can hold objects for a given scope within "
"the module."
msgstr ""

#: ../../topics/releases/0.11.0.rst:50
msgid ""
"This allows for components that are initialized to be stored in a persistent"
" context which can greatly speed up ongoing connections. Right now the best "
"example can be found in the `cp` execution module."
msgstr ""

#: ../../topics/releases/0.11.0.rst:55
msgid "Multiple Package Management"
msgstr ""

#: ../../topics/releases/0.11.0.rst:57
msgid ""
"A long desired feature has been added to package management. By definition "
"Salt States have always installed packages one at a time. On most platforms "
"this is not the fastest way to install packages. Erik Johnson, aka "
"terminalmage, has modified the package modules for many providers and added "
"new capabilities to install groups of packages. These package groups can be "
"defined as a list of packages available in repository servers:"
msgstr ""

#: ../../topics/releases/0.11.0.rst:73
msgid "or specify based on the location of specific packages:"
msgstr ""

#: ../../topics/releases/0.11.0.rst:85
msgid "Search System"
msgstr ""

#: ../../topics/releases/0.11.0.rst:87
msgid ""
"The bones to the search system have been added. This is a very basic "
"interface that allows for search backends to be added as search modules. The"
" first supported search module is the whoosh search backend. Right now only "
"the basic paths for the search system are in place, making this very "
"experimental. Further development will involve improving the search routines"
" and index routines for whoosh and other search backends."
msgstr ""

#: ../../topics/releases/0.11.0.rst:94
msgid ""
"The search system has been made to allow for searching through all of the "
"state and pillar files, configuration files and all return data from minion "
"executions."
msgstr ""

#: ../../topics/releases/0.11.0.rst:100
msgid "Notable Changes"
msgstr ""

#: ../../topics/releases/0.11.0.rst:102
msgid ""
"All previous versions of Salt have shared many directories between the "
"master and minion. The default locations for keys, cached data and sockets "
"has been shared by master and minion. This has created serious problems with"
" running a master and a minion on the same systems. 0.11.0 changes the "
"defaults to be separate directories. Salt will also attempt to migrate all "
"of the old key data into the correct new directories, but if it is not "
"successful it may need to be done manually. If your keys exhibit issues "
"after updating make sure that they have been moved from ``/etc/salt/pki`` to"
" ``/etc/salt/pki/{master,minion}``."
msgstr ""

#: ../../topics/releases/0.11.0.rst:111
msgid "The old setup will look like this:"
msgstr ""

#: ../../topics/releases/0.11.0.rst:127
msgid ""
"With the accepted minion keys in ``/etc/salt/pki/minions``, the new setup "
"places the accepted minion keys in ``/etc/salt/pki/master/minions``."
msgstr ""
