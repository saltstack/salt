# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/troubleshooting/index.rst:6
msgid "Troubleshooting"
msgstr ""

#: ../../topics/troubleshooting/index.rst:8
msgid ""
"The intent of the troubleshooting section is to introduce solutions to a "
"number of common issues encountered by users and the tools that are "
"available to aid in developing States and Salt code."
msgstr ""

#: ../../topics/troubleshooting/index.rst:13
msgid "Running in the Foreground"
msgstr ""

#: ../../topics/troubleshooting/index.rst:15
msgid ""
"A great deal of information is available via the debug logging system, if "
"you are having issues with minions connecting or not starting run the minion"
" and/or master in the foreground:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:24
msgid ""
"Anyone wanting to run Salt daemons via a process supervisor such as "
"`monit`_, `runit`_, or `supervisord`_, should omit the ``-d`` argument to "
"the daemons and run them in the foreground."
msgstr ""

#: ../../topics/troubleshooting/index.rst:33
msgid "What Ports do the Master and Minion Need Open?"
msgstr ""

#: ../../topics/troubleshooting/index.rst:35
msgid ""
"No ports need to be opened up on each minion. For the master, TCP ports 4505"
" and 4506 need to be open. If you've put both your Salt master and minion in"
" debug mode and don't see an acknowledgment that your minion has connected, "
"it could very well be a firewall."
msgstr ""

#: ../../topics/troubleshooting/index.rst:40
msgid "You can check port connectivity from the minion with the nc command:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:47
msgid ""
"There is also a :doc:`firewall configuration</topics/tutorials/firewall>` "
"document that might help as well."
msgstr ""

#: ../../topics/troubleshooting/index.rst:50
msgid ""
"If you've enabled the right TCP ports on your operating system or Linux "
"distribution's firewall and still aren't seeing connections, check that no "
"additional access control system such as `SELinux`_ or `AppArmor`_ is "
"blocking Salt."
msgstr ""

#: ../../topics/troubleshooting/index.rst:62
msgid "Using salt-call"
msgstr ""

#: ../../topics/troubleshooting/index.rst:64
msgid ""
"The ``salt-call`` command was originally developed for aiding in the "
"development of new Salt modules. Since then, many applications have been "
"developed for running any Salt module locally on a minion. These range from "
"the original intent of salt-call, development assistance, to gathering more "
"verbose output from calls like :mod:`state.highstate "
"<salt.modules.state.highstate>`."
msgstr ""

#: ../../topics/troubleshooting/index.rst:70
msgid ""
"When creating your state tree, it is generally recommended to invoke "
":mod:`state.highstate <salt.modules.state.highstate>` with ``salt-call``. "
"This displays far more information about the highstate execution than "
"calling it remotely. For even more verbosity, increase the loglevel with the"
" same argument as ``salt-minion``:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:80
msgid ""
"The main difference between using ``salt`` and using ``salt-call`` is that "
"``salt-call`` is run from the minion, and it only runs the selected function"
" on that minion. By contrast, ``salt`` is run from the master, and requires "
"you to specify the minions on which to run the command using salt's "
":doc:`targeting system </topics/targeting/index>`."
msgstr ""

#: ../../topics/troubleshooting/index.rst:87
msgid "Too many open files"
msgstr ""

#: ../../topics/troubleshooting/index.rst:89
msgid ""
"The salt-master needs at least 2 sockets per host that connects to it, one "
"for the Publisher and one for response port. Thus, large installations may, "
"upon scaling up the number of minions accessing a given master, encounter:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:99
msgid ""
"The solution to this would be to check the number of files allowed to be "
"opened by the user running salt-master (root by default):"
msgstr ""

#: ../../topics/troubleshooting/index.rst:107
msgid ""
"And modify that value to be at least equal to the number of minions x 2. "
"This setting can be changed in limits.conf as the nofile value(s), and "
"activated upon new a login of the specified user."
msgstr ""

#: ../../topics/troubleshooting/index.rst:111
msgid ""
"So, an environment with 1800 minions, would need 1800 x 2 = 3600 as a "
"minimum."
msgstr ""

#: ../../topics/troubleshooting/index.rst:115
msgid "Salt Master Stops Responding"
msgstr ""

#: ../../topics/troubleshooting/index.rst:117
msgid ""
"There are known bugs with ZeroMQ versions less than 2.1.11 which can cause "
"the Salt master to not respond properly. If you're running a ZeroMQ version "
"greater than or equal to 2.1.9, you can work around the bug by setting the "
"sysctls ``net.core.rmem_max`` and ``net.core.wmem_max`` to 16777216. Next, "
"set the third field in ``net.ipv4.tcp_rmem`` and ``net.ipv4.tcp_wmem`` to at"
" least 16777216."
msgstr ""

#: ../../topics/troubleshooting/index.rst:123
msgid "You can do it manually with something like:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:132
msgid "Or with the following Salt state:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:158
msgid "Salt and SELinux"
msgstr ""

#: ../../topics/troubleshooting/index.rst:160
msgid ""
"Currently there are no SELinux policies for Salt. For the most part Salt "
"runs without issue when SELinux is running in Enforcing mode. This is "
"because when the minion executes as a daemon the type context is changed to "
"``initrc_t``. The problem with SELinux arises when using salt-call or "
"running the minion in the foreground, since the type context stays "
"``unconfined_t``."
msgstr ""

#: ../../topics/troubleshooting/index.rst:166
msgid ""
"This problem is generally manifest in the rpm install scripts when using the"
" pkg module. Until a full SELinux Policy is available for Salt the solution "
"to this issue is to set the execution context of ``salt-call`` and ``salt-"
"minion`` to rpm_exec_t:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:181
msgid ""
"This works well, because the ``rpm_exec_t`` context has very broad control "
"over other types."
msgstr ""

#: ../../topics/troubleshooting/index.rst:185
msgid "Red Hat Enterprise Linux 5"
msgstr ""

#: ../../topics/troubleshooting/index.rst:187
msgid ""
"Salt requires Python 2.6 or 2.7. Red Hat Enterprise Linux 5 and its variants"
" come with Python 2.4 installed by default. When installing on RHEL 5 from "
"the `EPEL repository`_ this is handled for you. But, if you run Salt from "
"git, be advised that its dependencies need to be installed from EPEL and "
"that Salt needs to be run with the ``python26`` executable."
msgstr ""

#: ../../topics/troubleshooting/index.rst:196
msgid "Common YAML Gotchas"
msgstr ""

#: ../../topics/troubleshooting/index.rst:198
msgid ""
"An extensive list of :doc:`YAML idiosyncrasies "
"</topics/troubleshooting/yaml_idiosyncrasies>` has been compiled."
msgstr ""

#: ../../topics/troubleshooting/index.rst:202
msgid "Live Python Debug Output"
msgstr ""

#: ../../topics/troubleshooting/index.rst:204
msgid ""
"If the minion or master seems to be unresponsive, a SIGUSR1 can be passed to"
" the processes to display where in the code they are running. If "
"encountering a situation like this, this debug information can be "
"invaluable. First make sure the master of minion are running in the "
"foreground:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:214
msgid ""
"The pass the signal to the master or minion when it seems to be "
"unresponsive:"
msgstr ""

#: ../../topics/troubleshooting/index.rst:221
msgid ""
"When filing an issue or sending questions to the mailing list for a problem "
"with an unresponsive daemon this information can be invaluable."
msgstr ""
