# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/tutorials/states_pt3.rst:6
msgid "States tutorial, part 3"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:10
msgid ""
"This tutorial builds on topics covered in :doc:`part 1 <states_pt1>` and "
":doc:`part 2 <states_pt2>`. It is recommended that you begin there."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:13
msgid ""
"This part of the tutorial will cover more advanced templating and "
"configuration techniques for ``sls`` files."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:17
msgid "Templating SLS modules"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:19
msgid ""
"SLS modules may require programming logic or inline execution. This is "
"accomplished with module templating. The default module templating system "
"used is `Jinja2`_  and may be configured by changing the "
":conf_master:`renderer` value in the master config."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:26
msgid ""
"All states are passed through a templating system when they are initially "
"read. To make use of the templating system, simply add some templating "
"markup. An example of an sls module with templating markup may look like "
"this:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:37
msgid "This templated sls file once generated will look like this:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:48
msgid "Here's a more complex example:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:64
msgid "Using Grains in SLS modules"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:66
msgid ""
"Often times a state will need to behave differently on different systems. "
":doc:`Salt grains </topics/targeting/grains>` objects are made available in "
"the template context. The `grains` can be used from within sls modules:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:81
msgid "Calling Salt modules from templates"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:83
msgid ""
"All of the Salt modules loaded by the minion are available within the "
"templating system. This allows data to be gathered in real time on the "
"target system. It also allows for shell commands to be run easily from "
"within the sls modules."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:88
msgid ""
"The Salt module functions are also made available in the template context as"
" ``salt:``"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:98
msgid ""
"Note that for the above example to work, ``some_group_that_exists`` must "
"exist before the state file is processed by the templating engine."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:101
msgid ""
"Below is an example that uses the ``network.hw_addr`` function to retrieve "
"the MAC address for eth0:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:109
msgid "Advanced SLS module syntax"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:111
msgid ""
"Lastly, we will cover some incredibly useful techniques for more complex "
"State trees."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:115
msgid ":term:`Include declaration`"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:117
msgid ""
"A previous example showed how to spread a Salt tree across several files. "
"Similarly, :doc:`requisites </ref/states/requisites>` span multiple files by"
" using an :term:`include declaration`. For example:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:121
msgid "``python/python-libs.sls:``"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:128
msgid "``python/django.sls:``"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:141
msgid ":term:`Extend declaration`"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:143
msgid ""
"You can modify previous declarations by using an :term:`extend declaration`."
" For example the following modifies the Apache tree to also restart Apache "
"when the vhosts file is changed:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:147
msgid "``apache/apache.sls:``"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:154
#: ../../topics/tutorials/states_pt3.rst:181
msgid "``apache/mywebsite.sls:``"
msgstr ""

#: ../../_incl/extend_with_require_watch.rst:1
msgid "Using extend with require or watch"
msgstr ""

#: ../../_incl/extend_with_require_watch.rst:3
msgid ""
"The ``extend`` statement works differently for ``require`` or ``watch``. It "
"appends to, rather than replacing the requisite component."
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:175
msgid ":term:`Name declaration`"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:177
msgid ""
"You can override the :term:`ID declaration` by using a :term:`name "
"declaration`. For example, the previous example is a bit more maintainable "
"if rewritten as follows:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:202
msgid ":term:`Names declaration`"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:204
msgid ""
"Even more powerful is using a :term:`names declaration` to override the "
":term:`ID declaration` for multiple states at once. This often can remove "
"the need for looping in a template. For example, the first example in this "
"tutorial can be rewritten without the loop:"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:219
msgid "Next steps"
msgstr ""

#: ../../topics/tutorials/states_pt3.rst:221
msgid ""
"In :doc:`part 4 <states_pt4>` we will discuss how to use salt's "
":conf_master:`file_roots` to set up a workflow in which states can be "
"\"promoted\" from dev, to QA, to production."
msgstr ""
