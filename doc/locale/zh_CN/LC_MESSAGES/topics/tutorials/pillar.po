# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/tutorials/pillar.rst:6
msgid "Pillar Walkthrough"
msgstr ""

#: ../../topics/tutorials/pillar.rst:10
msgid ""
"This walkthrough assumes that the reader has already completed the initial "
"Salt Stack :doc:`walkthrough </topics/tutorials/walkthrough>`."
msgstr ""

#: ../../topics/tutorials/pillar.rst:13
msgid ""
"The pillar interface inside of Salt is one of the most important components "
"of a Salt deployment. Pillar is the interface used to generate arbitrary "
"data for specific minions. The data generated in pillar is made available to"
" almost every component of Salt and is used for a number of purposes:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:20
msgid "Highly Sensitive Data:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:19
msgid ""
"Information transferred via pillar is guaranteed to only be presented to the"
" minions that are targeted, this makes pillar the engine to use in Salt for "
"managing security information, such as cryptographic keys and passwords."
msgstr ""

#: ../../topics/tutorials/pillar.rst:23
msgid "Minion Configuration:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:23
msgid ""
"Minion modules such as the execution modules, states, and returners can "
"often be configured via data stored in pillar."
msgstr ""

#: ../../topics/tutorials/pillar.rst:27
msgid "Variables:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:26
msgid ""
"Variables which need to be assigned to specific minions or groups of minions"
" can be defined in pillar and then accessed inside sls formulas and template"
" files."
msgstr ""

#: ../../topics/tutorials/pillar.rst:32
msgid "Arbitrary Data:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:30
msgid ""
"Pillar can contain any basic data structure, so a list of values, or a "
"key/value store can be defined making it easy to iterate over a group of "
"values in sls formulas"
msgstr ""

#: ../../topics/tutorials/pillar.rst:34
msgid ""
"Pillar is therefore one of the most important systems when using Salt, this "
"walkthrough is designed to get a simple pillar up and running in a few "
"minutes and then to dive into the capabilities of pillar and where the data "
"is available."
msgstr ""

#: ../../topics/tutorials/pillar.rst:40
msgid "Setting Up Pillar"
msgstr ""

#: ../../topics/tutorials/pillar.rst:42
msgid ""
"The pillar is already running in Salt by default. The data in the minion's "
"pillars can be seen via the following command:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:50
msgid ""
"Prior to version 0.16.2, this function is named ``pillar.data``. This "
"function name is still supported for backwards compatibility."
msgstr ""

#: ../../topics/tutorials/pillar.rst:53
msgid ""
"By default the contents of the master configuration file are loaded into "
"pillar for all minions, this is to enable the master configuration file to "
"be used for global configuration of minions."
msgstr ""

#: ../../topics/tutorials/pillar.rst:57
msgid ""
"The pillar is built in a similar fashion as the state tree, it is comprised "
"of sls files and has a top file, just like the state tree. The pillar is "
"stored in a different location on the Salt master than the state tree. The "
"default location for the pillar is in /srv/pillar."
msgstr ""

#: ../../topics/tutorials/pillar.rst:64
msgid ""
"The pillar location can be configured via the `pillar_roots` option inside "
"the master configuration file."
msgstr ""

#: ../../topics/tutorials/pillar.rst:67
msgid ""
"To start setting up the pillar, the /srv/pillar directory needs to be "
"present:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:73
msgid ""
"Now a simple top file, following the same format as the top file used for "
"states needs to be created:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:76 ../../topics/tutorials/pillar.rst:126
#: ../../topics/tutorials/pillar.rst:183
msgid "``/srv/pillar/top.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:84
msgid ""
"This top file associates the data.sls file to all minions. Now the "
"``/srv/pillar/data.sls`` file needs to be populated:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:87
msgid "``/srv/pillar/data.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:93
msgid "Now that the file has been saved the minions' pillars will be updated:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:99
msgid "The key ``info`` should now appear in the returned pillar data."
msgstr ""

#: ../../topics/tutorials/pillar.rst:102
msgid "More Complex Data"
msgstr ""

#: ../../topics/tutorials/pillar.rst:104
msgid ""
"Pillar files are sls files, just like states, but unlike states they do not "
"need to define :strong:`formulas`, the data can be arbitrary, this example "
"for instance sets up user data with a UID:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:108
msgid "``/srv/pillar/users/init.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:120
msgid ""
"The same directory lookups that exist in states exist in pillar, so the file"
" ``users/init.sls`` can be referenced with ``users`` in the :term:`top "
"file`."
msgstr ""

#: ../../topics/tutorials/pillar.rst:124
msgid "The top file will need to be updated to include this sls file:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:135
msgid ""
"Now the data will be available to the minions. To use the pillar data in a "
"state just access the pillar via Jinja:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:138
msgid "``/srv/salt/users/init.sls``"
msgstr ""

#: ../../topics/tutorials/pillar.rst:148
msgid ""
"This approach allows for users to be safely defined in a pillar and then the"
" user data is applied in an sls file."
msgstr ""

#: ../../topics/tutorials/pillar.rst:152
msgid "Paramaterizing States With Pillar"
msgstr ""

#: ../../topics/tutorials/pillar.rst:154
msgid ""
"One of the most powerful abstractions in pillar is the ability to "
"parameterize states. Instead of defining macros or functions within the "
"state context the entire state tree can be freely parameterized relative to "
"the minion's pillar."
msgstr ""

#: ../../topics/tutorials/pillar.rst:158
msgid ""
"This approach allows for Salt to be very flexible while staying very "
"straightforward. It also means that simple sls formulas used in the state "
"tree can be directly parameterized without needing to refactor the state "
"tree."
msgstr ""

#: ../../topics/tutorials/pillar.rst:162
msgid ""
"A simple example is to set up a mapping of package names in pillar for "
"separate Linux distributions:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:165
msgid "``/srv/pillar/pkg/init.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:181
msgid "The new ``pkg`` sls needs to be added to the top file:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:193
msgid ""
"Now the minions will auto map values based on respective operating systems "
"inside of the pillar, so sls files can be safely parameterized:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:196 ../../topics/tutorials/pillar.rst:211
msgid "``/srv/salt/apache/init.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:204
msgid "Or, if no pillar is available a default can be set as well:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:208
msgid ""
"The function ``pillar.get`` used in this example was added to Salt in "
"version 0.14.0"
msgstr ""

#: ../../topics/tutorials/pillar.rst:219
msgid ""
"In the above example, if the pillar value ``pillar['pkgs']['apache']`` is "
"not set in the minion's pillar, then the default of ``httpd`` will be used."
msgstr ""

#: ../../topics/tutorials/pillar.rst:224
msgid ""
"Under the hood, pillar is just a python dict, so python dict methods such as"
" `get` and `items` can be used."
msgstr ""

#: ../../topics/tutorials/pillar.rst:228
msgid "Pillar Makes Simple States Grow Easily"
msgstr ""

#: ../../topics/tutorials/pillar.rst:230
msgid ""
"One of the design goals of pillar is to make simple sls formulas easily grow"
" into more flexible formulas without refactoring or complicating the states."
msgstr ""

#: ../../topics/tutorials/pillar.rst:233
msgid "A simple formula:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:235 ../../topics/tutorials/pillar.rst:254
msgid "``/srv/salt/edit/vim.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:252
msgid "Can be easily transformed into a powerful, parameterized formula:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:272
msgid "Where the vimrc source location can now be changed via pillar:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:274
msgid "``/srv/pillar/edit/vim.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:286
msgid "Ensuring that the right vimrc is sent out to the correct minions."
msgstr ""

#: ../../topics/tutorials/pillar.rst:289
msgid "More On Pillar"
msgstr ""

#: ../../topics/tutorials/pillar.rst:291
msgid ""
"The pillar data is generated on the Salt master and securely distributed to "
"minions. Salt is not restricted to the pillar sls files when defining the "
"pillar but can retrieve data from external sources. This can be useful when "
"information about an infrastructure is stored in a separate location."
msgstr ""

#: ../../topics/tutorials/pillar.rst:296
msgid ""
"Reference information on pillar and the external pillar interface can be "
"found in the Salt Stack documentation:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:299
msgid ":doc:`Pillar </topics/pillar/index>`"
msgstr ""
