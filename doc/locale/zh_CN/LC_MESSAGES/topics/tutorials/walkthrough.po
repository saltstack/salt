# 
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-799-g9ccf089\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 21:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/tutorials/walkthrough.rst:6
msgid "Salt Stack Walkthrough"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:9
msgid "Welcome!"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:11
msgid ""
"Welcome to Salt Stack! I am excited that you are interested in Salt and "
"starting down the path to better infrastructure management. I developed (and"
" am continuing to develop) Salt with the goal of making the best software "
"available to manage computers of almost any kind. I hope you enjoy working "
"with Salt and that the software can solve your real world needs!"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:17
msgid "Thomas S Hatch"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:18
msgid "Salt creator and chief developer"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:19
msgid "CTO of Salt Stack, Inc."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:23
msgid ""
"This is the first of a series of walkthroughs and serves as the best entry "
"point for people new to Salt, after this be sure to read up on pillar and "
"more on states:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:27
#: ../../topics/tutorials/walkthrough.rst:602
msgid ":doc:`Starting States </topics/tutorials/starting_states>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:29
#: ../../topics/tutorials/walkthrough.rst:604
msgid ":doc:`Pillar Walkthrough </topics/tutorials/pillar>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:33
msgid "Getting Started"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:36
msgid "What is Salt?"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:38
msgid ""
"Salt is a different approach to infrastructure management, it is founded on "
"the idea that high speed communication with large numbers of systems can "
"open up new capabilities. This approach makes Salt a powerful multitasking "
"system that can solve many specific problems in an infrastructure. The "
"backbone of Salt is the remote execution engine, which creates a high speed,"
" secure and bi-directional communication net for groups of systems. On top "
"of this communication system Salt provides an extremely fast, flexible and "
"easy to use configuration management system called ``Salt States``."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:47
msgid ""
"This unique approach to management makes for a transparent control system "
"that is not only amazingly easy to set up and use, but also capable of "
"solving very complex problems in infrastructures; as will be explored in "
"this walk through."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:51
msgid ""
"Salt is being used today by some of the largest infrastructures in the world"
" and has a proven ability to scale to astounding proportions without "
"modification. With the proven ability to scale out well beyond many tens of "
"thousands of servers, Salt has also proven to be an excellent choice for "
"small deployments as well, lowering compute and management overhead for "
"infrastructures as small as just a few systems."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:60
msgid "Installing Salt"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:62
msgid ""
"Salt Stack has been made to be very easy to install and get started. Setting"
" up Salt should be as easy as installing Salt via distribution packages on "
"Linux or via the Windows installer. The :doc:`installation documents "
"</topics/installation/index>` cover specific platform installation in depth."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:69
msgid "Starting Salt"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:71
msgid ""
"Salt functions on a master/minion topology. A master server acts as a "
"central control bus for the clients (called minions), and the minions "
"connect back to the master."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:77
msgid "Setting Up the Salt Master"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:79
msgid ""
"Turning on the Salt Master is easy, just turn it on! The default "
"configuration is suitable for the vast majority of installations. The Salt "
"master can be controlled by the local Linux/Unix service manager:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:83
msgid "On Systemd based platforms (OpenSuse, Fedora):"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:89
msgid "On Upstart based systems (Ubuntu, older Fedora/RHEL):"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:95
msgid "On SysV Init systems (Debian, Gentoo etc.):"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:101
msgid "Or the master can be started directly on the command line:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:107
msgid ""
"The Salt Master can also be started in the foreground in debug mode, thus "
"greatly increasing the command output:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:114
msgid ""
"The Salt Master needs to bind to 2 TCP network ports on the system, these "
"ports are 4505 and 4506. For more in depth information on firewalling these "
"ports, the firewall tutorial is available :doc:`here "
"</topics/tutorials/firewall>`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:120
msgid "Setting up a Salt Minion"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:124
msgid ""
"The Salt Minion can operate with or without a Salt Master. This walkthrough "
"assumes that the minion will be connected to the master, for information on "
"how to run a master-less minion please see the masterless quickstart guide:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:128
msgid ":doc:`Masterless Minion Quickstart </topics/tutorials/quickstart>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:130
msgid ""
"The Salt Minion only needs to be aware of one piece of information to run, "
"the network location of the master. By default the minion will look for the "
"DNS name ``salt`` for the master, making the easiest approach to set "
"internal DNS to resolve the name ``salt`` back to the Salt Master IP. "
"Otherwise the minion configuration file will need to be edited, edit the "
"configuration option ``master`` to point to the DNS name or the IP of the "
"Salt Master:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:139
msgid ""
"The default location of the configuration files is ``/etc/salt``. Most "
"platforms adhere to this convention, but platforms such as FreeBSD and "
"Microsoft Windows place this file in different locations."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:143
msgid "``/etc/salt/minion:``"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:149
msgid ""
"Now that the master can be found, start the minion in the same way as the "
"master; with the platform init system, or via the command line directly:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:152
msgid "As a daemon:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:158
msgid "In the foreground in debug mode:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:164
msgid ""
"Now that the minion is started it will generate cryptographic keys and "
"attempt to connect to the master. The next step is to venture back to the "
"master server and accept the new minion's public key."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:170
msgid ""
"When the minion is started, it will generate an ``id`` value, unless it has "
"been generated on a previous run and cached in the configuration directory "
"(``/etc/salt`` by default). This is the name by which the minion will "
"attempt to authenticate to the master. The following steps are attempted, in"
" order to try to find a value that is not ``localhost``:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:176
msgid "The Python function ``socket.getfqdn()`` is run"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:177
msgid "``/etc/hostname`` is checked (non-Windows only)"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:178
msgid ""
"``/etc/hosts`` (``%WINDIR%\\system32\\drivers\\etc\\hosts`` on Windows "
"hosts) is checked for hostnames that map to anything within "
":strong:`127.0.0.0/8`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:181
msgid ""
"If none of the above are able to produce an id which is not ``localhost``, "
"then a sorted list of IP addresses on the minion (excluding any within "
":strong:`127.0.0.0/8`) is inspected. The first publicly-routable IP address "
"is used, if there is one. Otherwise, the first privately-routable IP address"
" is used."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:187
msgid "If all else fails, then ``localhost`` is used as a fallback."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:189
msgid "Overriding the ``id``"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:191
msgid ""
"The minion id can be manually specified using the :conf_minion:`id` "
"parameter in the minion config file.  If this configuration value is "
"specified, it will override all other sources for the ``id``."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:197
msgid "Using salt-key"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:199
msgid ""
"Salt authenticates minions using public key encryption and authentication. "
"For a minion to start accepting commands from the master the minion keys "
"need to be accepted. The ``salt-key`` command is used to manage all of the "
"keys on the master. To list the keys that are on the master run a salt-key "
"list command:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:208
msgid ""
"The keys that have been rejected, accepted and pending acceptance are "
"listed. The easiest way to accept the minion key is to accept all pending "
"keys:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:217
msgid ""
"Keys should be verified! The secure thing to do before accepting a key is to"
" run ``salt-key -p minion-id`` to print the public key for the minion. This "
"can then be compared against the minion's public key file, which is located "
"(on the minion, of course) at ``/etc/salt/pki/minion/minion.pub``."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:222
msgid "On the master::"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:241
msgid "On the minion::"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:261
msgid "Sending the First Commands"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:263
msgid ""
"Now that the minion is connected to the master and authenticated, the master"
" can start to command the minion. Salt commands allow for a vast set of "
"functions to be executed and for specific minions and groups of minions to "
"be targeted for execution. This makes the ``salt`` command very powerful, "
"but the command is also very usable, and easy to understand."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:269
msgid ""
"The ``salt`` command is comprised of command options, target specification, "
"the function to execute, and arguments to the function. A simple command to "
"start with looks like this:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:277
msgid ""
"The ``*`` is the target, which specifies all minions, and ``test.ping`` "
"tells the minion to run the :py:func:`test.ping <salt.modules.test.ping>` "
"function. The result of running this command will be the master instructing "
"all of the minions to execute :py:func:`test.ping <salt.modules.test.ping>` "
"in parallel and return the result. This is not an actual ICMP ping, but "
"rather a simple function which returns ``True``. Using :py:func:`test.ping "
"<salt.modules.test.ping>` is a good way of confirming that a minion is "
"connected."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:288
msgid ""
"Each minion registers itself with a unique minion id. This id defaults to "
"the minion's hostname, but can be explicitly defined in the minion config as"
" well by using the :conf_minion:`id` parameter."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:294
msgid "Getting to Know the Functions"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:296
msgid ""
"Salt comes with a vast library of functions available for execution, and "
"Salt functions are self documenting. To see what functions are available on "
"the minions execute the :py:func:`sys.doc <salt.modules.sys.doc>` function:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:304
msgid ""
"This will display a very large list of available functions and documentation"
" on them, this documentation is also available :doc:`here "
"</ref/modules/all/index>`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:308
msgid ""
"These functions cover everything from shelling out to package management to "
"manipulating database servers. They comprise a powerful system management "
"API which is the backbone to Salt configuration management and many other "
"aspects of Salt."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:315
msgid ""
"Salt comes with many plugin systems. The functions that are available via "
"the ``salt`` command are called :doc:`Execution Modules "
"</ref/modules/all/index>`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:321
msgid "Helpful Functions to Know"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:323
msgid ""
"The :doc:`cmd </ref/modules/all/salt.modules.cmdmod>` module contains "
"functions to shell out on minions, such as :mod:`cmd.run "
"<salt.modules.cmdmod.run>` and :mod:`cmd.run_all "
"<salt.modules.cmdmod.run_all>`:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:332
msgid ""
"The ``pkg`` functions automatically map local system package managers to the"
" same salt functions. This means that ``pkg.install`` will install packages "
"via yum on Red Hat based systems, apt on Debian systems, etc.:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:341
msgid ""
"Some custom Linux spins and derivatives of other distros are not properly "
"detected by Salt. If the above command returns an error message saying that "
"``pkg.install`` is not available, then you may need to override the pkg "
"provider. This process is explained :doc:`here </ref/states/providers>`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:346
msgid ""
"The :mod:`network.interfaces <salt.modules.network.interfaces>` function "
"will list all interfaces on a minion, along with their IP addresses, "
"netmasks, MAC addresses, etc:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:355
msgid "``salt-call``"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:357
msgid ""
"The examples so far have described running commands from the Master using "
"the ``salt`` command, but when troubleshooting it can be more beneficial to "
"login to the minion directly and use ``salt-call``. Doing so allows you to "
"see the minion log messages specific to the command you are running (which "
"are *not* part of the return data you see when running the command from the "
"Master using ``salt``), making it unnecessary to tail the minion log. More "
"information on ``salt-call`` and how to use it can be found :ref:`here "
"<using-salt-call>`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:366
#: ../../topics/tutorials/walkthrough.rst:397
msgid "Grains"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:368
msgid ""
"Salt uses a system called :doc:`Grains <../targeting/grains>` to build up "
"static data about minions. This data includes information about the "
"operating system that is running, CPU architecture and much more. The grains"
" system is used throughout Salt to deliver platform data to many components "
"and to users."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:373
msgid ""
"Grains can also be statically set, this makes it easy to assign values to "
"minions for grouping and managing. A common practice is to assign grains to "
"minions to specify what the role or roles a minion might be. These static "
"grains can be set in the minion configuration file or via the "
":mod:`grains.setval <salt.modules.grains.setval>` function."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:381
msgid "Targeting"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:383
msgid ""
"Salt allows for minions to be targeted based on a wide range of criteria.  "
"The default targeting system uses globular expressions to match minions, "
"hence if there are minions named ``larry1``, ``larry2``, ``curly1`` and "
"``curly2``, a glob of ``larry*`` will match ``larry1`` and ``larry2``, and a"
" glob of ``*1`` will match ``larry1`` and ``curly1``."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:389
msgid ""
"Many other targeting systems can be used other than globs, these systems "
"include:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:393
msgid "Regular Expressions"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:393
msgid "Target using PCRE compliant regular expressions"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:396
msgid ""
"Target based on grains data: :doc:`Targeting with Grains "
"</topics/targeting/grains>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:401
msgid "Pillar"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:400
msgid ""
"Target based on pillar data: :doc:`Targeting with Pillar "
"</ref/pillar/index>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:404
msgid "IP"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:404
msgid "Target based on IP addr/subnet/range"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:408
msgid "Compound"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:407
msgid ""
"Create logic to target based on multiple targets: :doc:`Targeting with "
"Compound </topics/targeting/compound>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:412
msgid "Nodegroup"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:411
msgid ""
"Target with nodegroups: :doc:`Targeting with Nodegroup "
"</topics/targeting/nodegroups>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:414
msgid ""
"The concepts of targets are used on the command line with salt, but also "
"function in many other areas as well, including the state system and the "
"systems used for ACLs and user permissions."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:420
msgid "Passing in Arguments"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:422
msgid ""
"Many of the functions available accept arguments, these arguments can be "
"passed in on the command line:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:429
msgid ""
"This example passes the argument ``vim`` to the pkg.install function, since "
"many functions can accept more complex input then just a string the "
"arguments are parsed through YAML, allowing for more complex data to be sent"
" on the command line:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:438
msgid ""
"In this case Salt translates the string 'foo: bar' into the dictionary "
"\"{'foo': 'bar'}\""
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:443
msgid "Any line that contains a newline will not be parsed by yaml."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:447
msgid "Salt States"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:449
msgid ""
"Now that the basics are covered the time has come to evaluate ``States``.  "
"Salt ``States``, or the ``State System`` is the component of Salt made for "
"configuration management. The State system is a fully functional "
"configuration management system which has been designed to be exceptionally "
"powerful while still being simple to use, fast, lightweight, deterministic "
"and with salty levels of flexibility."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:456
msgid ""
"The state system is already available with a basic salt setup, no additional"
" configuration is required, states can be set up immediately."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:461
msgid ""
"Before diving into the state system, a brief overview of how states are "
"constructed will make many of the concepts clearer. Salt states are based on"
" data modeling, and build on a low level data structure that is used to "
"execute each state function. Then more logical layers are built on top of "
"each other. The high layers of the state system which this tutorial will "
"cover consists of everything that needs to be known to use states, the two "
"high layers covered here are the `sls` layer and the highest layer "
"`highstate`."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:470
msgid ""
"Again, knowing that there are many layers of data management, will help with"
" understanding states, but they never need to be used. Just as understanding"
" how a compiler functions when learning a programming language, "
"understanding what is going on under the hood of a configuration management "
"system will also prove to be a valuable asset."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:478
msgid "The First SLS Formula"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:480
msgid ""
"The state system is built on sls formulas, these formulas are built out in "
"files on Salt's file server. To make a very basic sls formula open up a file"
" under /srv/salt named vim.sls and get vim installed:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:484
#: ../../topics/tutorials/walkthrough.rst:502
msgid "``/srv/salt/vim.sls:``"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:491
msgid "Now install vim on the minions by calling the sls directly:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:497
msgid ""
"This command will invoke the state system and run the named sls which was "
"just created, ``vim``."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:500
msgid "Now, to beef up the vim sls formula, a vimrc can be added:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:516
msgid ""
"Now the desired vimrc needs to be copied into the Salt file server to "
"/srv/salt/vimrc, in Salt everything is a file, so no path redirection needs "
"to be accounted for. The vimrc file is placed right next to the vim.sls "
"file. The same command as above can be executed to all the vim sls formulas "
"and now include managing the file."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:524
msgid ""
"Salt does not need to be restarted/reloaded or have the master manipulated "
"in any way when changing sls formulas, they are instantly available."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:529
msgid "Adding Some Depth"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:531
msgid ""
"Obviously maintaining sls formulas right in the root of the file server will"
" not scale out to reasonably sized deployments. This is why more depth is "
"required. Start by making an nginx formula a better way, make an nginx "
"subdirectory and add an init.sls file:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:536
msgid "``/srv/salt/nginx/init.sls:``"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:548
msgid ""
"A few things are introduced in this sls formula, first is the service "
"statement which ensures that the nginx service is running, but the nginx "
"service can't be started unless the package is installed, hence the "
"``require``. The ``require`` statement makes sure that the required "
"component is executed before and that it results in success."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:556
msgid ""
"The `require` option belongs to a family of options called `requisites`. "
"Requisites are a powerful component of Salt States, for more information on "
"how requisites work and what is available see: "
":doc:`Requisites</ref/states/requisites>` Also evaluation ordering is "
"available in Salt as well: :doc:`Ordering States</ref/states/ordering>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:563
msgid ""
"Now this new sls formula has a special name, ``init.sls``, when an sls "
"formula is named ``init.sls`` it inherits the name of the directory path "
"that contains it, so this formula can be referenced via the following "
"command:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:571
msgid ""
"Now that subdirectories can be used the vim.sls formula can be cleaned up, "
"but to make things more flexible (and to illustrate another point of "
"course), move the vim.sls and vimrc into a new subdirectory called ``edit`` "
"and change the vim.sls file to reflect the change:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:576
msgid "``/srv/salt/edit/vim.sls:``"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:590
msgid ""
"The only change in the file is fixing the source path for the vimrc file. "
"Now the formula is referenced as ``edit.vim`` because it resides in the edit"
" subdirectory. Now the edit subdirectory can contain formulas for emacs, "
"nano, joe or any other editor that may need to be deployed."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:597
msgid "Next Reading"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:599
msgid ""
"Two walkthroughs are specifically recommended at this point. First, a deeper"
" run through States, followed by an explanation of Pillar."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:606
msgid "An understanding of Pillar is extremely helpful in using States."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:610
msgid "Getting Deeper Into States"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:612
msgid ""
"Two more in-depth States tutorials exist, which delve much more deeply into "
"States functionality."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:615
msgid ""
"Thomas' original states tutorial, :doc:`How Do I Use Salt "
"States?</topics/tutorials/starting_states>`, covers much more to get off the"
" ground with States."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:619
msgid ""
"The :doc:`States Tutorial</topics/tutorials/states_pt1>` also provides a "
"fantastic introduction."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:622
msgid ""
"These tutorials include much more in depth information including templating "
"sls formulas etc."
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:627
msgid "So Much More!"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:629
msgid ""
"This concludes the initial Salt walkthrough, but there are many more things "
"to learn still! These documents will cover important core aspects of Salt:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:632
msgid ":doc:`Pillar</topics/pillar/index>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:634
msgid ":doc:`Job Management</topics/jobs/index>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:636
msgid "A few more tutorials are also available:"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:638
msgid ":doc:`Remote Execution Tutorial</topics/tutorials/modules>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:640
msgid ":doc:`Standalone Minion</topics/tutorials/standalone_minion>`"
msgstr ""

#: ../../topics/tutorials/walkthrough.rst:642
msgid ""
"This still is only scratching the surface, many components such as the "
"reactor and event systems, extending Salt, modular components and more are "
"not covered here. For an overview of all Salt features and documentation, "
"look at the :doc:`Table of Contents</contents>`."
msgstr ""
