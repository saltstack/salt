# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/renderers/all/salt.renderers.pydsl.rst:6
# f6d1c86372944316b5fdd994a782b634
msgid "salt.renderers.pydsl"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:1
# 87121d6fbbd34b33925d0f21d958cf6b
msgid "A Python-based DSL"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:3
# 065f8cc082b64caaba3487defe9f928c
msgid "Jack Kuan <kjkuan@gmail.com>"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:4
# 1df00e99cabc472284f376d67a1ceeb0
msgid "new"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:5
# 3ba6a74e55cc45cc9ce21c00e562829c
msgid "all"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:7
# b88c56ed171b45b584af2f67694dd529
msgid "The `pydsl` renderer allows one to author salt formulas(.sls files) in pure Python using a DSL that's easy to write and easy to read. Here's an example:"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:23
# 4fda64a9a44947259060ce91c9bc19df
msgid "Notice that any Python code is allow in the file as it's really a Python module, so you have the full power of Python at your disposal. In this module, a few objects are defined for you, including the usual(with ``__`` added) ``__salt__`` dictionary, ``__grains__``, ``__pillar__``, ``__opts__``, ``__env__``, and ``__sls__``, plus a few more:"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:29
# de302502375a484eb8d43f7af3891355
msgid "``__file__``"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:31
# 82eec4938ca94f6cae854c0d2b8d3cf1
msgid "local file system path to the sls module."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:33
# ab77fbe1342f4903af677ac5bf916ce0
msgid "``__pydsl__``"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:35
# 1a490d63f0094a53b181c9a4537df8a4
msgid "Salt PyDSL object, useful for configuring DSL behavior per sls rendering."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:37
# f263e47b3bff40538bfa8acfb1d42859
msgid "``include``"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:39
# 9672c8e36bb04a048b59363e94827718
msgid "Salt PyDSL function for creating :term:`include declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:41
# e55d89592201436ab2cb26224a3a1531
msgid "``extend``"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:43
# 155dc97a63eb458ca617eaae24556625
msgid "Salt PyDSL function for creating :term:`extend declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:45
# 88cd889d9b024d27ae2bdb7e820cf6ea
msgid "``state``"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:47
# bdd5dd9067e549f5ad21e33418319138
msgid "Salt PyDSL function for creating :term:`ID declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:50
# e37c5c31203d4431b0076ea1a7e0570d
msgid "A state :term:`ID declaration` is created with a ``state(id)`` function call. Subsequent ``state(id)`` call with the same id returns the same object. This singleton access pattern applies to all declaration objects created with the DSL."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:61
# edc77b5719f543e19214e3a758664486
msgid "The `id` argument is optional. If omitted, an UUID will be generated and used as the `id`."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:64
# d2fb568cddc942e2ad04d7f24f7297b8
msgid "``state(id)`` returns an object under which you can create a :term:`state declaration` object by accessing an attribute named after *any* state module available in Salt."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:74
# 6f5ab2705d524944af86f02b2af59ee4
msgid "Then, a :term:`function declaration` object can be created from a :term:`state declaration` object by one of the following two ways:"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:77
# ae9a5b590da1429ea37104b99c06d640
msgid "by directly calling the attribute named for the :term:`state declaration`, and supplying the state function name as the first argument."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:84
# 2bb9cb779cff476eb93d46802d5214a2
msgid "by calling a method named after the state function on the :term:`state declaration` object."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:91
# 2eb492a8803c4c2fa5cd294a31433043
msgid "With either way of creating a :term:`function declaration` object, any :term:`function arg declaration`'s can be passed as keyword arguments to the call. Subsequent calls of a :term:`function declaration` will update the arg declarations."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:100
# 982c9f49a6114973ac9c40f7adfaaded
msgid "As a shortcut, the special `name` argument can also be passed as the first(second if calling using the first way) positional argument."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:108
# 994f3185aac74798954c3e92d3aedf2a
msgid "Finally, a :term:`requisite declaration` object with its :term:`requisite reference`'s can be created by invoking one of the requisite methods(``require``, ``watch``, ``use``, ``require_in``, ``watch_in``, and ``use_in``) on either a :term:`function declaration` object or a :term:`state declaration` object. The return value of a requisite call is also a :term:`function declaration` object, so you can chain several requisite calls together."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:115
# e9a43a9fa35a4e2cb9961df719be6611
msgid "Arguments to a requisite call can be a list of :term:`state declaration` objects and/or a set of keyword arguments whose names are state modules and values are IDs of :term:`ID declaration`'s or names of :term:`name declaration`'s."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:141
# 8ed2f7e21fa44800bbf1cd322481bd5c
msgid ":term:`include declaration` objects can be created with the ``include`` function, while :term:`extend declaration` objects can be created with the ``extend`` function, whose arguments are just :term:`function declaration` objects."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:150
# 70c15fb36c8349ac8c90e1829d46f6a5
msgid "The ``include`` function, by default, causes the included sls file to be rendered as soon as the ``include`` function is called. It returns a list of rendered module objects; sls files not rendered with the pydsl renderer return ``None``'s. This behavior creates no :term:`include declaration`'s in the resulting high state data structure."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:172
# 0a4a479161fe48b88f41498c5656aeac
msgid "Notice how you can define a reusable function in your pydsl sls module and then call it via the module returned by ``include``."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:175
# fa8d8a101c6a4fa48691077ff10d4c73
msgid "It's still possible to do late includes by passing the ``delayed=True`` keyword argument to ``include``."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:182
# d7b3a570da434dc28128743c15928ad7
msgid "Above will just create a :term:`include declaration` in the rendered result, and such call always returns ``None``."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:187
# 093517862e7345caab5984ef2e5def57
msgid "Special integration with the `cmd` state"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:188
# 7b37a8d0472b438c853c10d6cf600fb4
msgid "Taking advantage of rendering a Python module, PyDSL allows you to declare a state that calls a pre-defined Python function when the state is executed."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:200
# 7051a590ba194ba986d51dfd5f6ab664
msgid "The `cmd.call` state function takes care of calling our ``helper`` function with the arguments we specified in the states, and translates the return value of our function into a structure expected by the state system. See :func:`salt.states.cmd.call` for more information."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:207
# 8f85a762c2a44a1fb90b2bd579c3a2b2
msgid "Implicit ordering of states"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:208
# 1050d9f7c0354cd983670449ae77977c
msgid "Salt states are explicitly ordered via :term:`requisite declaration`'s. However, with `pydsl` it's possible to let the renderer track the order of creation for :term:`function declaration` objects, and implicitly add ``require`` requisites for your states to enforce the ordering. This feature is enabled by setting the ``ordered`` option on ``__pydsl__``."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:215
# 86da1a7833b04fc59defbbc2b2c2e239
msgid "this feature is only available if your minions are using Python >= 2.7."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:233
# 1677a1b3e1ef4a8e9ea2b872884eb61c
msgid "Notice that the ``ordered`` option needs to be set after any ``extend`` calls. This is to prevent `pydsl` from tracking the creation of a state function that's passed to an ``extend`` call."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:237
# 1d62370ed7114af1886556ac78db625e
msgid "Above example should create states from ``0`` to ``9`` that will output ``0``, ``one``, ``two``, ``3``, ... ``9``, in that order."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:240
# d44c470772864167affc1292aa8509ca
msgid "It's important to know that `pydsl` tracks the *creations* of :term:`function declaration` objects, and automatically adds a ``require`` requisite to a :term:`function declaration` object that requires the last :term:`function declaration` object created before it in the sls file."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:245
# 9452eb47b2474d0abdcbc87b9210d01b
msgid "This means later calls(perhaps to update the function's :term:`function arg declaration`) to a previously created function declaration will not change the order."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:249
# 1daf7b5ecbc049668d97446255940f78
msgid "Render time state execution"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:250
# e1968411a9ad41619dfdf1f5041bd2c8
msgid "When Salt processes a salt formula file(`.sls`), the file is rendered to salt's high state data representation by a renderer before the states can be executed. In the case of the `pydsl` renderer, the .sls file is executed as a python module as it is being rendered which makes it easy to execute a state at render time. In `pydsl`, executing one or more states at render time can be done by calling a configured :term:`ID declaration` object."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:269
# bf20db347978464a96741f9d7a89a90c
msgid "Once an :term:`ID declaration` is called at render time it is detached from the sls module as if it was never defined."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:273
# 582d7f1974454db98ce322be75a8a979
msgid "If `implicit ordering` is enabled(ie, via ``__pydsl__.set(ordered=True)``) then the *first* invocation of a :term:`ID declaration` object must be done before a new :term:`function declaration` is created."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:279
# a2488cedc27443af978ca35c917854e1
msgid "Integration with the stateconf renderer"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:280
# 03bdd4bc132a4e288c7823e78b011217
msgid "The :doc:`salt.renderers.stateconf` renderer offers a few interesting features that can be leveraged by the `pydsl` renderer. In particular, when using with the `pydsl` renderer, we are interested in `stateconf`'s sls namespacing feature(via dot-prefixed id declarations), as well as, the automatic `start` and `goal` states generation."
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:285
# 1746d092ecf54baaad2e9c0fa65bed71
msgid "Now you can use `pydsl` with `stateconf` like this:"
msgstr ""

#: ../../../salt/renderers/pydsl.py:docstring of salt.renderers.pydsl:303
# 29077f55df1e497facc5cc549ad11499
msgid "``-s`` enables the generation of a stateconf `start` state, and ``-p`` lets us pipe high state data rendered by `pydsl` to `stateconf`. This example shows that by ``require``-ing or ``require_in``-ing the included sls' `start` or `goal` states, it's possible to ensure that the included sls files can be made to execute before or after a state in the including sls file."
msgstr ""

