# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/states/all/salt.states.file.rst:6
# 915c999fb83c4edab9d0e10fb7cb5356
msgid "salt.states.file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:2
# 614e25bac10c46578cd272bef8fa987f
msgid "Operations on regular files, special files, directories, and symlinks."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:4
# 4a0634479c2c4364bca8971b7ddfc5f5
msgid "Salt States can aggressively manipulate files on a system. There are a number of ways in which files can be managed."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:7
# 03f03d5879a446e2bfd62437bd21c04a
msgid "Regular files can be enforced with the ``managed`` function. This function downloads files from the salt master and places them on the target system. The downloaded files can be rendered as a jinja, mako, or wempy template, adding a dynamic component to file management. An example of ``file.managed`` which makes use of the jinja templating system would look like this:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:30
# 7b4a6555a94d4817ac302bc791e2c39c
msgid "If using a template, any user-defined template variables in the file defined in ``source`` must be passed in using the ``defaults`` and/or ``context`` arguments. The general best practice is to place default values in ``defaults``, with conditional overrides going into ``context``, as seen above."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:35
# 03e99fd12ffc4a0287099b1adfaf4a80
msgid "The ``source`` parameter can be specified as a list. If this is done, then the first file to be matched will be the one that is used. This allows you to have a default file on which to fall back if the desired file does not exist on the salt fileserver. Here's an example:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:51
# 7046307e434644fb9c14bfd265f42bcf
msgid "The ``source`` parameter can also specify a file in another Salt environment. In this example ``foo.conf`` in the ``dev`` environment will be used instead."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:66
# 4f9239c0d14741d69b76801792893c18
msgid "When using a mode that includes a leading zero you must wrap the value in single quotes. If the value is not wrapped in quotes it will be read by YAML as an integer and evaluated as an octal."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:70
# dc6277bd9b8c4b8ebaeaa0ed7e216bfe
msgid "Special files can be managed via the ``mknod`` function. This function will create and enforce the permissions on a special file. The function supports the creation of character devices, block devices, and fifo pipes. The function will create the directory structure up to the special file if it is needed on the minion. The function will not overwrite or operate on (change major/minor numbers) existing special files with the exception of user, group, and permissions. In most cases the creation of some special files require root permisisons on the minion. This would require that the minion to be run as the root user. Here is an example of a character device:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:91
# 55ad19b11e78467cba0062947ddcc357
msgid "Here is an example of a block device:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:104
# d65c7bc9416846df8a2259c51a7d63bd
msgid "Here is an example of a fifo pipe:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:115
# d9d8adac9dc240c6b4ead2f43947a66c
msgid "Directories can be managed via the ``directory`` function. This function can create and enforce the permissions on a directory. A directory statement will look like this:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:128
# 8a1f1b14fe0648f180c2269e6e399f0c
msgid "If you need to enforce user and/or group ownership or permissions recursively on the directory's contents, you can do so by adding a ``recurse`` directive:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:144
# fae53acfab174b7697f89b3d8469d61a
msgid "As a default, ``mode`` will resolve to ``dir_mode`` and ``file_mode``, to specify both directory and file permissions, use this form:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:161
# 76d448e45a3e4921834adbbfe3c6f9dc
msgid "Symlinks can be easily created; the symlink function is very simple and only takes a few arguments:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file:170
# f036feb06990453888a6c21bc306bb62
msgid "Recursive directory management can also be set via the ``recurse`` function. Recursive directory management allows for a directory on the salt master to be recursively copied down to the minion. This is a great tool for deploying large code and configuration systems. A state using ``recurse`` would look something like this:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.absent:1
# b7e427002a8f4570bf80f7630324a779
msgid "Verify that the named file or directory is absent, this will work to reverse any of the functions in the file state module."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.absent:4
#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:5
#: ../../../salt/states/file.py:docstring of salt.states.file.comment:3
#: ../../../salt/states/file.py:docstring of salt.states.file.copy:6
#: ../../../salt/states/file.py:docstring of salt.states.file.directory:4
#: ../../../salt/states/file.py:docstring of salt.states.file.exists:6
#: ../../../salt/states/file.py:docstring of salt.states.file.managed:5
#: ../../../salt/states/file.py:docstring of salt.states.file.missing:4
#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:15
#: ../../../salt/states/file.py:docstring of salt.states.file.patch:5
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:5
#: ../../../salt/states/file.py:docstring of salt.states.file.rename:6
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:5
#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:10
#: ../../../salt/states/file.py:docstring of salt.states.file.touch:11
#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:3
# 987507f0999140368c4cd2c5970e4031
# c3c58d6096b44730aadd4914ffce2df3
# 4133db76ced74d9a884b9fa64318d9f0
# b206d0a8bc4e4a96ab6cb06ae8665fdb
# 17677a41ed144865b5e7102d8ae70697
# 2360d7ec1ff84f25b4553a4d8facfa12
# 41a7d9f9412143779344bf207b2fb821
# bb5068579aaf42fe8a407604ef7eb0ba
# 4ba132ea578f4c5aa2b3c049ac710601
# 358c871367564a41af207c9cd8a3ec26
# 2b2c82bd839d48c09fcac6323b01dfac
# 8bb35c0838624d98b65e82a4f8ce2705
# 0378173450794b309f7efba51a749944
# 4da6005fbfa34b5bb1fbc954806bf096
# f96f1a087aca411dba49088380032427
# 26088f7c87314c838ecd7830bcb6ab8a
msgid "name"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.absent:5
# 52ce72ca99a0422e929e24915766dad0
msgid "The path which should be deleted"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:1
# c4a0792da6644a1997b861ad5c88272a
msgid "Prepare accumulator which can be used in template in file.managed state. Accumulator dictionary becomes available in template."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:5
# 8f62940fef2942a08e811962f9f4b478
msgid "Accumulator name"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:9
# cf3d2b99813c4a0aadbfa6c78134ad2d
msgid "filename"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:8
# d2f400c8280e4df48d5d3bef0515e8b9
msgid "Filename which would receive this accumulator (see file.managed state documentation about ``name``)"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:12
# cad403edb61d48a4a775508035501fbb
msgid "text"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:12
# 2c4a0b2b7d0f42ceafd980730abe740c
msgid "String or list for adding in accumulator"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:15
# a4bf1967484b45e69f148ca05ee55ce7
msgid "require_in / watch_in"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.accumulated:15
# 9c74b122a24e45fdb6ba77975324791f
msgid "One of them required for sure we fill up accumulator before we manage the file. Probably the same as filename"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.append:1
# 3fcf05dc67a3440ba763e44d1613e720
msgid "Ensure that some text appears at the end of a file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.append:3
# 9f3933c35fa24aa09d37205f2fb4111e
msgid "The text will not be appended again if it already exists in the file. You may specify a single line of text or a list of lines to append."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.append:6
# 67722826190f487d9b419aee1423a734
msgid "Multi-line example::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.append:15
# d0c6f719bdaa4727a3e45f80a5a2da03
msgid "Multiple lines of text::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.append:23
# 4ad7a0f87df94f318e85353b7b652e01
msgid "Gather text from multiple template files::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:1
# 35157f127a4e4722a1a62f228f30d793
msgid "Comment out specified lines in a file."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:4
#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:4
# 5d30914db926489a8d2bb2445a5883da
# ed0521cdb2c2477d8751abd5c06ce154
msgid "The full path to the file to be edited"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:10
#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:10
# c95f56a1641b42afa1cec064da23e2bd
# f0ca9350ff1a4d1a867fd693b46f7c68
msgid "regex"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:6
# 35ef764d192348f99ba7201174c49492
msgid "A regular expression used to find the lines that are to be commented; this pattern will be wrapped in parenthesis and will move any preceding/trailing ``^`` or ``$`` characters outside the parenthesis (e.g., the pattern ``^foo$`` will be rewritten as ``^(foo)$``) Note that you _need_ the leading ^, otherwise each time you run highstate, another comment char will be inserted."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:13
#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:12
# 6684d39bfffe493cb2d44699f6d01e8e
# 6e12683bd7b3437283c4edf57791994f
msgid "char : ``#``"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:13
# a1c49d1db8e2493b9cc058910f06a38a
msgid "The character to be inserted at the beginning of a line in order to comment it out"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:22
#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:17
# 20a663fb27dc44d79ba23b15c2d4ab99
# df86869f98f146dba9e65e6a665f8f9e
msgid "backup : ``.bak``"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:16
# 157bf75d68844a488a487acae346c702
msgid "The file will be backed up before edit with this file extension"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:20
# b6d52b3af6814a0b8d73924cfc7f9152
msgid "This backup will be overwritten each time ``sed`` / ``comment`` / ``uncomment`` is called. Meaning the backup will only be useful after the first invocation."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.comment:24
#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:38
#: ../../../salt/states/file.py:docstring of salt.states.file.patch:30
#: ../../../salt/states/file.py:docstring of salt.states.file.sed:32
#: ../../../salt/states/file.py:docstring of salt.states.file.touch:23
#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:19
# b06e3262530544359b3e80da13bf5aa1
# a18926975d314693b3977072d8c1317c
# 241fdc2fec5a44dd8905d0dd42296893
# d9976d676078422396a324b0d0ece13c
# 75f85192ec97401a983bede7b5e48e93
# 227ec9188ab142a1aa01e69d9309f70b
msgid "Usage::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:1
# 48c0b64d7ee04e2b89893686deb14a24
msgid "If the source file exists on the system, copy it to the named file. The named file will not be overwritten if it already exists unless the force option is set to True."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:6
# f69c98336b9f440294f516c03ec35f94
msgid "The location of the file to copy to"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:9
#: ../../../salt/states/file.py:docstring of salt.states.file.managed:16
#: ../../../salt/states/file.py:docstring of salt.states.file.patch:11
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:11
#: ../../../salt/states/file.py:docstring of salt.states.file.rename:9
# d33feb9fe87a43e9b49f238fe097c131
# a36907b5a0214c65b431bad7c10e719b
# 1024956e9cb549b3ba43dfc99b21de7f
# 237bf2e80b42420e9a186228233a1f8c
# 84070dc20fc04d008848a1451bccf4be
msgid "source"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:9
# db064f62b5b949b3b8cfc02c9e66f10e
msgid "The location of the file to copy to the location specified with name"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:13
#: ../../../salt/states/file.py:docstring of salt.states.file.rename:13
#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:18
# 7de11ac204bc4eb383c5f0c834649e01
# 4d2e29dd78014ef690cada4a793d0bd4
# ed719e588d5449ae914cc1187c371a63
msgid "force"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:12
#: ../../../salt/states/file.py:docstring of salt.states.file.rename:12
# 2490a77524fd4bf9b87302417e333609
# 10fc360b0ecb47229d9285ae8744f86d
msgid "If the target location is present then the file will not be moved, specify \"force: True\" to overwrite the target file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:15
#: ../../../salt/states/file.py:docstring of salt.states.file.directory:41
#: ../../../salt/states/file.py:docstring of salt.states.file.managed:54
#: ../../../salt/states/file.py:docstring of salt.states.file.rename:15
#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:22
#: ../../../salt/states/file.py:docstring of salt.states.file.touch:21
# 4973dc7c53d84c5696ae30c546d7462c
# 15d5779ea38a4f389a4c9760ccb96d3f
# dd9e93392d1f4ba18409d2155a95b3d1
# 05ee543ea05f4aa6899f49208dff10d2
# 2280619b312e41cf8b1ff3b6696cfe59
# a98d8d3065b347099d9d1187dc44d78e
msgid "makedirs"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.copy:16
#: ../../../salt/states/file.py:docstring of salt.states.file.rename:16
# aeb932eb9a7447db82c40cdfbe8b6c98
# 9431b4ecb9fe4fa39cd5c7b98961b299
msgid "If the target subdirectories don't exist create them"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:1
# 55f00c58471c4d23896288be9c96f237
msgid "Ensure that a named directory is present and has the right perms"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:4
# b1dd9846f2de41beb50c374c39c3e3c9
msgid "The location to create or manage a directory"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:8
#: ../../../salt/states/file.py:docstring of salt.states.file.managed:36
#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:30
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:23
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:15
# 660e83c551774f6b933c859b7a39ea74
# f0af846a9d9f43fd826f4ed9d3021588
# 00a80134836149c4ac84ae3f1b0af29f
# 64e9547e6e304ac08ac17f7faa82ac14
# 454b35f422ae44728f44d1df13ff4d82
msgid "user"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:7
# b8f37e4ca7974d62bb5347b12cf4e202
msgid "The user to own the directory; this defaults to the user salt is running as on the minion"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:12
#: ../../../salt/states/file.py:docstring of salt.states.file.managed:40
#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:33
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:27
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:19
# ba644c4b9dcc48d5be5ba31b8dd21bf3
# 13682f74145348d7815e2349daeea7d0
# 57e7ff1aae864c3586926ba79b00fb3b
# 613292cadff04e96abbc6efea8db9dac
# ea0f5d99519a46f7be61362db82f32da
msgid "group"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:11
# 95aedadd0a404db3a53895b7e9efe073
msgid "The group ownership set for the directory; this defaults to the group salt is running as on the minion"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:28
# 3459768cab6c4b99918dec959fa87bc0
msgid "recurse"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:15
# 4e75706442974db7bf73fa76152751a8
msgid "Enforce user/group ownership and mode of directory recursively. Accepts a list of strings representing what you would like to recurse. Example::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:31
# 41bf8e89f48641ffbc58b60f64939246
msgid "dir_mode / mode"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:31
# cc43f63ee13d40ebb1c4f05517cf35de
msgid "The permissions mode to set any directories created."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:35
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:33
# 7ff2e4c301594a7387738b79f5d69ef3
# 2743180b22d842ad95c6c26904ea84d9
msgid "file_mode"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:34
# 95c6a0b096e94af3a1bd610efe4c7b81
msgid "The permissions mode to set any files created if 'mode' is ran in 'recurse'. This defaults to dir_mode."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:38
# 1274587393c9479eab5ac0b93ab35554
msgid "If the directory is located in a path without a parent directory, then the state will fail. If makedirs is set to True, then the parent directories will be created to facilitate the creation of the named file."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:46
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:16
# 5c8d52bfc7c5456896e56c805ef8947b
# 048f6520871e4c81a8aaa6a8d22244c8
msgid "clean"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:44
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:14
# 75ca428ba68b4235a2bf289346ba9eec
# fa5d96cb42d8486c9dd0987b28eefff5
msgid "Make sure that only files that are set up by salt and required by this function are kept. If this option is set then everything in this directory will be deleted unless it is required."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:49
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:19
# 525058512cc64095afd7c2b3135a6f92
# 85b79e06483a4412b55899969b09b34c
msgid "require"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:49
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:19
# 296f94ba3d644e3b8ef221be23d94ec9
# 86bfab1c788c45bfb9e09d141da82904
msgid "Require other resources such as packages or files"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:52
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:76
# 21cfa6bb00ec4436bf3cd56d04916fb4
# 37719fe8ae5142ada72a7c1df64e9d34
msgid "exclude_pat"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.directory:52
# e8ac23d3adb24302915b81b1ff4167da
msgid "When 'clean' is set to True, exclude this pattern from removal list and preserve in the destination."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.exists:1
# d77244b9970a413694c5e90d66240f26
msgid "Verify that the named file or directory is present or exists. Ensures pre-requisites outside of Salt's purview (e.g., keytabs, private keys, etc.) have been previously satisfied before deployment."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.exists:7
# d29f4d6781d24d3ea06bfd17de54116d
msgid "Absolute path which must exist"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:1
# e699172546e3413699190410de7b296d
msgid "Manage a given file, this function allows for a file to be downloaded from the salt master and potentially run through a templating system."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:5
# baf46ee3635940fd8fd0a76b0d99d2d7
msgid "The location of the file to manage"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:8
# ad91e2a27cba476db3eeebb7afbecca3
msgid "The source file to download to the minion, this source file can be hosted on either the salt master server, or on an HTTP or FTP server. For files hosted on the salt file server, if the file is located on the master in the directory named spam, and is called eggs, the source string is salt://spam/eggs. If source is left blank or None, the file will be created as an empty file and the content will not be managed"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:15
# 0f3c818f3a7d4d1c88f216ef7a81d6cc
msgid "If the file is hosted on a HTTP or FTP server then the source_hash argument is also required"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:32
# 738a5a51cd114e02a3b1167f5101c4b2
msgid "source_hash:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:19
# 211f26965ef548a4b24500a486b44f0b
msgid "This can be either a file which contains a source hash string for the source, or a source hash string. The source hash string is the hash algorithm followed by the hash of the file: md5=e138491e9d5b97023cea823fe17bac22"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:24
# 3bfe43f76bd648388dff300ab2b5445e
msgid "The file can contain checksums for several files, in this case every line must consist of full name of the file and checksum separated by space:"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:28
# 845e09bbb7b44650bc4269b160b9c46a
msgid "Example::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:35
# 5be427f3d6f34f9a9d4d7485831a8f52
msgid "The user to own the file, this defaults to the user salt is running as on the minion"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:39
# 5ebf338e968e458691a3da9fa51a0c51
msgid "The group ownership set for the file, this defaults to the group salt is running as on the minion"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:43
#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:36
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:22
# d3c19e1eba6346d0aa60e8b03602fb6e
# ac0ef3b0cdd8489f844c35ec6cea2de9
# 73220d357b4a462487e583b21ac973d4
msgid "mode"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:43
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:22
# 65ad1e9f45da40edbe8166db2df690a7
# 09692716f250447aa47083cf55ed3064
msgid "The permissions to set on this file, aka 644, 0775, 4664"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:48
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:41
# 618b59a03cd5402898b362f29496ad49
# 71edea2970c743058bb682f078fa9795
msgid "template"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:46
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:39
# 1188ddedaaab495eb46e05354aec1b7d
# 31d0cb1fe42e4d099df254b06c5161bb
msgid "If this setting is applied then the named templating engine will be used to render the downloaded file, currently jinja, mako, and wempy are supported"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:51
# 057e79373ea44724beedbcf233973805
msgid "If the file is located in a path without a parent directory, then the state will fail. If makedirs is set to True, then the parent directories will be created to facilitate the creation of the named file."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:59
# 7a42db8946fb453086a6357fa1e8926d
msgid "replace"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:57
# 4966ac493989469793db693f1929faba
msgid "If this file should be replaced.  If false, this command will not overwrite file contents but will enforce permissions if the file exists already.  Default is True."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:62
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:44
# 64da0aabc72c469db206019c76408f44
# efce49e64be142f99ef719f5c1479705
msgid "context"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:62
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:44
# dced1fb137564cb683e8f148c6197ee5
# d5c6afce22074e988284d119713891c3
msgid "Overrides default context variables passed to the template."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:65
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:47
# 5a38813fb12a4f6483e6e945b243333d
# 26419f8aca5446298187b42cd41c7677
msgid "defaults"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:65
#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:47
# 20c15985cac54df49beb9d5d628b0960
# 0148cceeba2340eda80867c1ff351b36
msgid "Default context passed to the template."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:68
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:25
# 1038a441649b453ca59bfe3c8a807e5f
# 8d53fde8315f46f7b1703a8510b1bea4
msgid "backup"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:68
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:25
# 77060a7b54424f3f8e44889d12c24b0f
# af2cee3016b64d8a8e8d8bc08184dbba
msgid "Overrides the default backup mode for this specific file."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:71
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:28
# 60773d922b87458a978b4c6d9330d54e
# ea063746f5d14413a6460a30ac60959e
msgid "show_diff"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:71
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:28
# 4de1c8e83218410fabc24a6253f444d1
# b93bf8a4d0dc46fea0db5fe4ef3b1d2c
msgid "If set to False, the diff will not be shown."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:75
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:33
# 804e8b31c02544e5a7cd0d77187522da
# 5c51134a91b64558980e0c7e4f308534
msgid "create"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:74
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:31
# ec43a14b3df44337ace3e23e0849026b
# ac0565e786764d398bf4d8df2121149f
msgid "Default is True, if create is set to False then the file will only be managed if the file already exists on the system."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:80
# 60e4f227e73243e8918aa618fb47fc64
msgid "contents"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:78
# cd7e69f5b0f54898b1a418404e083d82
msgid "Default is None.  If specified, will use the given string as the contents of the file.  Should not be used in conjunction with a source file of any kind.  Ignores hashes and does not use a templating engine."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:89
# 5f771671f45a4487b7c2f23980dc145f
msgid "contents_pillar"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.managed:85
# dd8d117545cb44fcb6b2302023e10d68
msgid "Operates like ``contents``, but draws from a value stored in pillar, using the pillar path syntax used in :mod:`pillar.get <salt.modules.pillar.get>`. This is useful when the pillar value contains newlines, as referencing a pillar variable using a jinja/mako template can result in YAML formatting issues due to the newlines causing indentation mismatches."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.missing:1
# ce9da40a26de47a9943e1f77d4c3a56d
msgid "Verify that the named file or directory is missing, this returns True only if the named file is missing but does not remove the file if it is present."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.missing:5
# 8abb0fee98f445a483ec81cfb8bfd147
msgid "Absolute path which must NOT exist"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:1
# 92e62aabd91348a889cf17b62a3a3313
msgid "Create a special file similar to the 'nix mknod command. The supported device types are ``p`` (fifo pipe), ``c`` (character device), and ``b`` (block device). Provide the major and minor numbers when specifying a character device or block device. A fifo pipe does not require this information. The command will create the necessary dirs if needed. If a file of the same name not of the same type/major/minor exists, it will not be overwritten or unlinked (deleted). This is logically in place as a safety measure because you can really shoot yourself in the foot here and it is the behavior of 'nix ``mknod``. It is also important to note that not just anyone can create special devices. Usually this is only done as root. If the state is executed as none other than root on a minion, you may receive a permission error."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:15
#: ../../../salt/states/file.py:docstring of salt.states.file.touch:11
# e3eb7398291144bf9f1c00cdf9e3e17b
# 699d1726a6e64a9e89e17d015171845a
msgid "name of the file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:19
# 16051c977ae14851b9700413c3993943
msgid "ntype"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:18
# ee9ff080e8b043938eb4fb0a6977883e
msgid "node type 'p' (fifo pipe), 'c' (character device), or 'b' (block device)"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:23
# e0eaf4da10f142f4aa9417cc893dfa75
msgid "major"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:22
# 3e9aa3a8f9314561bc328bd408cc2ad0
msgid "major number of the device does not apply to a fifo pipe"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:27
# 4ed8c45147ba4af9a77000fc2e97c9bf
msgid "minor"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:26
# 27bd4f2ad5fc4befa4518274baa52804
msgid "minor number of the device does not apply to a fifo pipe"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:30
# 20b8aa8468f44f439083e997c7252a4f
msgid "owning user of the device/pipe"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:33
# 1bc6609f357f44b8b74653cd40d07fcc
msgid "owning group of the device/pipe"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.mknod:36
# 8ec545b42ea64dcd9095c9b2d891bb54
msgid "permissions on the device/pipe"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:1
# 62e358ed2bb94b6d940664680cb444a4
msgid "Apply a patch to a file. Note: a suitable ``patch`` executable must be available on the minion when using this state function."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:5
# 4c17aeec817d435381e5d8b7103b9295
msgid "The file to with the patch will be applied."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:8
# 6300e607a5f647c786d985d37d685473
msgid "The source patch to download to the minion, this source file must be hosted on the salt master server. If the file is located in the directory named spam, and is called eggs, the source string is salt://spam/eggs. A source is required."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:17
# 826d8745147646e4b95a76db69da481a
msgid "hash"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:14
# 7baa45a8deaa4c32a06c738e02826fc1
msgid "Hash of the patched file. If the hash of the target file matches this value then the patch is assumed to have been applied. The hash string is the hash algorithm followed by the hash of the file: md5=e138491e9d5b97023cea823fe17bac22"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:20
# 76526f5ff1034d9cb6cb003dd6ec0102
msgid "options"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:20
# f4302b3937a847af9693cac1e9ab4961
msgid "Extra options to pass to patch."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:23
# 77b84fccfd3a475d8748b5aeb03d05d2
msgid "dry_run_first : ``True``"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:23
# fe5a7e053daf44028cdc4aa3b4368933
msgid "Run patch with ``--dry-run`` first to check if it will apply cleanly."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:28
# eb43d78408b34bae9d00fe2022fb06e4
msgid "env"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.patch:26
# c587466c8e3241f29ce1ec3d2f64cba9
msgid "Specify the environment from which to retrieve the patch file indicated by the ``source`` parameter. If not provided, this defaults to the environment from which the state is being executed."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:1
# 35494f0e2d4141c9aeabb29e56d1b34c
msgid "Recurse through a subdirectory on the master and copy said subdirectory over to the specified path."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:5
# b9def67a3f804b2197c80dc60f2f08e6
msgid "The directory to set the recursion in"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:8
# c79e9477d691487d97959b1204567823
msgid "The source directory, this directory is located on the salt master file server and is specified with the salt:// protocol. If the directory is located on the master in the directory named spam, and is called eggs, the source string is salt://spam/eggs"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:22
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:14
# 703d9c0d52d34973981e30383c799c86
# c8860fcc7dd64b8b9e1c81511f1b3c70
msgid "The user to own the directory, this defaults to the user salt is running as on the minion"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:26
#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:18
# b6d57c1a7a69433a8a35031f92539a52
# 04de8a3ae66644459abaf3627830c201
msgid "The group ownership set for the directory, this defaults to the group salt is running as on the minion"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:30
# b81fbdeea4fb45a7b821ff06bd36fa40
msgid "dir_mode"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:30
# 9d0e0781e8e44c59b600f68c8affc045
msgid "The permissions mode to set any directories created"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:33
# 758082beb08947298051e4b2cfd7f232
msgid "The permissions mode to set any files created"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:36
# 62c8eec0e2c44397ad3212f623dfa335
msgid "sym_mode"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:36
# d6596c60b15a42578e629ada3ea5d6f9
msgid "The permissions mode to set on any symlink created"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:51
# 6e740f9f5e5d41e48e4bffad5cba2181
msgid "include_empty"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:50
# a4f311b1da8d4086ab2bb2f89175b652
msgid "Set this to True if empty directories should also be created (default is False)"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:61
# 186bbe170cd44f3fa16d4024f01c0a80
msgid "include_pat"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:54
# d21ee6fb69a24adb8c961a31db4ce062
msgid "When copying, include only this pattern from the source. Default is glob match; if prefixed with 'E@', then regexp match. Example::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:64
# 66a4e835fad64d2591649a5fea128163
msgid "When copying, exclude this pattern from the source. If both include_pat and exclude_pat are supplied, then it will apply conditions cumulatively. i.e. first select based on include_pat, and then within that result apply exclude_pat."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:69
# 179ef3fa818745b2a37267521791af71
msgid "Also, when 'clean=True', exclude this pattern from the removal list and preserve in the destination. Example::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:86
# e1282fc3cd3b4a4ba6a13e889895f685
msgid "maxdepth"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:79
# b18c9946710d4073b2e309d8e635b1de
msgid "When copying, only copy paths which are depth maxdepth from the source path. Example::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:91
# 57b0bc121a8f4d02931aed88fa860d8e
msgid "keep_symlinks"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:89
# 9f291a02c2714d638ad7db012b1a438c
msgid "Keep symlinks when copying from the source. This option will cause the copy operation to terminate at the symlink. If you are after rsync-ish behavior, then set this to True."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:96
# a135b9daf4584afb8ac03a4a0a38cc13
msgid "force_symlinks"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.recurse:94
# 2f06be55cbc848cfbcff8633fe02f67c
msgid "Force symlink creation. This option will force the symlink creation. If a file or directory is obstructing symlink creation it will be recursively removed so that symlink creation can proceed. This option is usually not needed except in special circumstances."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.rename:1
# ab18b4a57677465b8fd5a13915fa0301
msgid "If the source file exists on the system, rename it to the named file. The named file will not be overwritten if it already exists unless the force option is set to True."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.rename:6
# e2cdb523700649559da6b4cea6f988ba
msgid "The location of the file to rename to"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.rename:9
# 963781a7bc7540bf9973eb6106503478
msgid "The location of the file to move to the location specified with name"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.replace:1
# 0792d029d0e743d28db260e40ff99a92
msgid "Maintain an edit in a file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.replace:5
# 74e76b4b816345d0af870694470339d1
msgid "Params are identical to :py:func:`~salt.modules.file.replace`."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:1
# 2bc318d5d6ab4f83aa99b9f96522c8c4
msgid "Use :py:func:`~salt.states.file.replace` instead."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:4
# 26829c622bd74eb29e2b73ce7f0e6cd9
msgid "Maintain a simple edit to a file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:6
# ed36f2722c434bf792d012f1808db978
msgid "The file will be searched for the ``before`` pattern before making the edit.  In general the ``limit`` pattern should be as specific as possible and ``before`` and ``after`` should contain the minimal text to be changed."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:10
# 541d352f98444469a18a5582615cb374
msgid "before"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:11
# 66580e50351e43c1b63130b054c4d46f
msgid "A pattern that should exist in the file before the edit."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:12
# 63c7bd8419e041a194f4bae8574c3f64
msgid "after"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:13
# 817a4f3834f648c9abe00f172f4f116d
msgid "A pattern that should exist in the file after the edit."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:15
# 3e8a72c92c4c45469b3e8bb43c67f7b5
msgid "limit"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:15
# 1cf7ec546f2143b8ae992bb45c4c37e4
msgid "An optional second pattern that can limit the scope of the before pattern."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:18
# 603b95a7b47444c8beda10b3c0e73d6e
msgid "backup : '.bak'"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:18
# fd243debfafd4247b5e0f816f9e67426
msgid "The extension for the backed-up version of the file before the edit. If no backups is desired, pass in the empty string: ''"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:22
# b80e7915755346b0ad8cd8a87a52082e
msgid "options : ``-r -e``"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:21
# 3ada4b9119a04f719e7c6f3f0ec88944
msgid "Any options to pass to the ``sed`` command. ``-r`` uses extended regular expression syntax and ``-e`` denotes that what follows is an expression that sed will execute."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:25
# b493dd084c604d0ea277363cfa9e4879
msgid "flags : ``g``"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:25
# a49a23f1015f429eab721efbdcd3bb75
msgid "Any flags to append to the sed expression. ``g`` specifies the edit should be made globally (and not stop after the first replacement)."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:30
# dd32bd1c46694dd187940f1f1053ba19
msgid "negate_match : False"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.sed:28
# b58b3b36796d490195b243e9ced424c3
msgid "Negate the search command (``!``)"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:1
# 5528d99356254ff4b0cf75d03525ba8f
msgid "Serializes dataset and store it into managed file. Useful for sharing simple configuration files."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:5
#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:10
# b164dd226a184a0b8b66a8584a6b84fe
# 4426594ca2ea471894402235dac97033
msgid "The location of the symlink to create"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:8
# 33659939c478480794528fb60349f7f3
msgid "dataset"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:8
# 6e3e8124ad4245ad87d0956cd2b53eba
msgid "the dataset that will be serialized"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:11
# 0c22a4f3bd844e0fad0ddc7aca9719af
msgid "formatter"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:11
# e01def33ca134cffbc65fc8d305803a8
msgid "the formatter, currently only yaml and json are supported"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:35
# e033526af3a644d9b749f491d41d8bb2
msgid "For example, this state::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.serialize:49
# 38455e0c2ae6421c93c46131371b12db
msgid "will manages the file ``/etc/dummy/package.json``::"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:1
# ea0ee4fa11b44d87a1ccad5874afec8d
msgid "Create a symlink"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:3
# 8407ed44a8e74187acbcf720720dd4b5
msgid "If the file already exists and is a symlink pointing to any location other than the specified target, the symlink will be replaced. If the symlink is a regular file or directory then the state will return False. If the regular file or directory is desired to be replaced with a symlink pass force: True."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:13
# 9532a30471a743b4bc0f2a0bfef96e62
msgid "target"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:13
# 1fa2aa920ff2449fb42afebeabf0f73f
msgid "The location that the symlink points to"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:16
# 6655081191984814a73384ebde557dae
msgid "If the location of the symlink exists and is not a symlink then the state will fail, set force to True and any file or directory in the way of the symlink file will be deleted to make room for the symlink"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.symlink:21
# 93cf254b545f4d9a98b3cecd659fcae1
msgid "If the location of the symlink does not already have a parent directory then the state will fail, setting makedirs to True will allow Salt to create the parent directory"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:1
# d8581249679541b4a56d90ae2a558a04
msgid "Replicate the 'nix \"touch\" command to create a new empty file or update the atime and mtime of an existing file."
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:4
# ecdda7714d82413c8a43c8b6d7b28ecc
msgid "Note that if you just want to create a file and don't care about atime or mtime, you should use ``file.managed`` instead, as it is more feature-complete.  (Just leave out the ``source``/``template``/``contents`` arguments, and it will just create the file and/or check its permissions, without messing with contents)"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:14
# 70f5f0a491b442feb575807fa50e2075
msgid "atime"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:14
# 76e684c52683488d898ceb52e3487cdc
msgid "atime of the file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:17
# 7ea86943e8164d99b15fbfbad034e1c5
msgid "mtime"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:17
# 280d9cfec42c446ba3b722337b9eda54
msgid "mtime of the file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.touch:20
# 3c3f8434fcd642878c914291e69aaa5c
msgid "whether we should create the parent directory/directories in order to touch the file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:1
# d5ebec80cfab40b68a692b83a9d8530c
msgid "Uncomment specified commented lines in a file"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:6
# 588c146dadad415c890050ecf0778874
msgid "A regular expression used to find the lines that are to be uncommented. This regex should not include the comment character. A leading ``^`` character will be stripped for convenience (for easily switching between comment() and uncomment()).  The regex will be searched for from the beginning of the line, ignoring leading spaces (we prepend '^[ \\t]*')"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:13
# bbf3a5c27c344dcba14356849ab14d4e
msgid "The character to remove in order to uncomment a line"
msgstr ""

#: ../../../salt/states/file.py:docstring of salt.states.file.uncomment:15
# c011a1f10cf24acea0f77ec4e856732f
msgid "The file will be backed up before edit with this file extension; **WARNING:** each time ``sed``/``comment``/``uncomment`` is called will overwrite this backup"
msgstr ""

