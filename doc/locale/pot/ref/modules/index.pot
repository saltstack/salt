# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/modules/index.rst:6
# 1d9e7f6a260e42dbbc7679f13f9f8e50
msgid "Modules"
msgstr ""

#: ../../ref/modules/index.rst:8
# 004d17e702884601831a5a49bb1b1895
msgid "Salt modules are the functions called by the :command:`salt` command."
msgstr ""

#: ../../ref/modules/index.rst:10
# e83088ae52464d99a557507b0b3763e9
msgid ":ref:`Full list of builtin modules <all-salt.modules>`"
msgstr ""

#: ../../ref/modules/index.rst:12
# 72d5569b95f145c1925d91e684bdd58d
msgid "Salt ships with many modules that cover a wide variety of tasks."
msgstr ""

#: ../../ref/modules/index.rst:15
# 4f3a78d0086b4e6fbb07c8aca486fd93
msgid "Modules Are Easy to Write!"
msgstr ""

#: ../../ref/modules/index.rst:17
# f4e3c7fff87a40878772ec8c9fcc3f72
msgid "Salt modules are amazingly simple to write. Just write a regular Python module or a regular `Cython`_ module and place it a directory called ``_modules/`` within the :conf_master:`file_roots` specified by the master config file, and they will be synced to the minions when :mod:`state.highstate <salt.modules.state.highstate>` is run, or by executing the :mod:`saltutil.sync_modules <salt.modules.saltutil.sync_modules>` or :mod:`saltutil.sync_all <salt.modules.saltutil.sync_all>` functions."
msgstr ""

#: ../../ref/modules/index.rst:25
# 2c318b5c667c4d358db856a3e5f128c6
msgid "Any custom modules which have been synced to a minion, that are named the same as one of Salt's default set of modules, will take the place of the default module with the same name. Note that a module's default name is its filename (i.e. ``foo.py`` becomes module ``foo``), but that its name can be overridden by using a :ref:`__virtual__ function <virtual-modules>`."
msgstr ""

#: ../../ref/modules/index.rst:31
# 113f26925c2a4012a18c4c8e41b2c900
msgid "Since Salt modules are just Python/Cython modules, there are no restraints on what you can put inside of a Salt module. If a Salt module has errors and cannot be imported, the Salt minion will continue to load without issue and the module with errors will simply be omitted."
msgstr ""

#: ../../ref/modules/index.rst:36
# 291b592023b7415282f3f2081ea3d8e1
msgid "If adding a Cython module the file must be named ``<modulename>.pyx`` so that the loader knows that the module needs to be imported as a Cython module. The compilation of the Cython module is automatic and happens when the minion starts, so only the ``*.pyx`` file is required."
msgstr ""

#: ../../ref/modules/index.rst:44
# 562f177eeeb5426fa8da41c9c2ef4ac8
msgid "Cross Calling Modules"
msgstr ""

#: ../../ref/modules/index.rst:46
# 613bff4f77904fa6914c3e59a8377bfa
msgid "All of the Salt modules are available to each other, and can be \"cross called\". This means that, when creating a module, functions in modules that already exist can be called."
msgstr ""

#: ../../ref/modules/index.rst:50
# 6c2fdcb7acec4b8ab1fe05da611d490d
msgid "The variable ``__salt__`` is packed into the modules after they are loaded into the Salt minion. This variable is a :ref:`Python dictionary <python2:typesmapping>` of all of the Salt functions, laid out in the same way that they are made available to the Salt command."
msgstr ""

#: ../../ref/modules/index.rst:55
# 0050600415674b2ebe8adbc8ba317cbf
msgid "Salt modules can be cross called by accessing the value in the ``__salt__`` dict:"
msgstr ""

#: ../../ref/modules/index.rst:62
# dbd30bce7277404ba423b2e23b69f1f6
msgid "This code will call the Salt cmd module's ``run`` function and pass the argument ``bar``."
msgstr ""

#: ../../ref/modules/index.rst:67
# 6059f5afbf9c484f979e46ad4fbb1044
msgid "Preloaded Modules Data"
msgstr ""

#: ../../ref/modules/index.rst:69
# 685cd20371ef46a28cefdf0690a346b1
msgid "When interacting with modules often it is nice to be able to read information dynamically about the minion, or load in configuration parameters for a module. Salt allows for different types of data to be loaded into the modules by the minion, as of this writing Salt loads information gathered from the Salt Grains system and from the minion configuration file."
msgstr ""

#: ../../ref/modules/index.rst:76
# 98c7d6dc86be4368bb1b0dc16234f442
msgid "Grains Data"
msgstr ""

#: ../../ref/modules/index.rst:78
# f4f5ad334e4148949d1c55588e6c566c
msgid "The Salt minion detects information about the system when started. This allows for modules to be written dynamically with respect to the underlying hardware and operating system. This information is referred to as Salt Grains, or \"grains of salt\". The Grains system was introduced to replace Facter, since relying on a Ruby application from a Python application was both slow and inefficient. Grains support replaces Facter in all Salt releases after 0.8"
msgstr ""

#: ../../ref/modules/index.rst:85
# 94b55179ce2c46f58686601628070095
msgid "The values detected by the Salt Grains on the minion are available in a :ref:`dict <python2:typesmapping>` named ``__grains__`` and can be accessed from within callable objects in the Python modules."
msgstr ""

#: ../../ref/modules/index.rst:89
# 97d112be2c4e4f0eb56dea2a599a7c65
msgid "To see the contents of the grains dict for a given system in your deployment run the :func:`grains.items` function:"
msgstr ""

#: ../../ref/modules/index.rst:96
# e1672d9cca574532ac96e23bcb42b9c5
msgid "To use the ``__grains__`` dict simply call it as a Python dict from within your code, an excellent example is available in the Grains module: :mod:`salt.modules.grains`."
msgstr ""

#: ../../ref/modules/index.rst:102
# 675f6d174986429abd64aa10f335462d
msgid "Module Configuration"
msgstr ""

#: ../../ref/modules/index.rst:104
# 43f4c30b9b6a459dbe63e717a25f9ccf
msgid "Since parameters for configuring a module may be desired, Salt allows for configuration information stored in the main minion config file to be passed to the modules."
msgstr ""

#: ../../ref/modules/index.rst:108
# 3b1e7659eb424af088e6c6c6e5087097
msgid "Since the minion configuration file is a YAML document, arbitrary configuration data can be passed in the minion config that is read by the modules. It is **strongly** recommended that the values passed in the configuration file match the module. This means that a value intended for the ``test`` module should be named ``test.<value>``."
msgstr ""

#: ../../ref/modules/index.rst:114
# 50f1d6696fcb40a2aad7d586d205cbd0
msgid "Configuration also requires that default configuration parameters need to be loaded as well. This can be done simply by adding the ``__opts__`` dict to the top level of the module."
msgstr ""

#: ../../ref/modules/index.rst:118
# 9627f418bc1242a2ab08140fbaeca80e
msgid "The test module contains usage of the module configuration, and the default configuration file for the minion contains the information and format used to pass data to the modules. :mod:`salt.modules.test`, :file:`conf/minion`."
msgstr ""

#: ../../ref/modules/index.rst:123
# e4f4690b798e4d4891993e2c009d36c5
msgid "Printout Configuration"
msgstr ""

#: ../../ref/modules/index.rst:125
# 474e72a1a8cd47d19267bd9f013ccb3f
msgid "Since module functions can return different data, and the way the data is printed can greatly change the presentation, Salt has a printout configuration."
msgstr ""

#: ../../ref/modules/index.rst:129
# 6e46ce9f734d478b9882c9e8e337e1e6
msgid "When writing a module the ``__outputter__`` dict can be declared in the module. The ``__outputter__`` dict contains a mapping of function name to Salt Outputter."
msgstr ""

#: ../../ref/modules/index.rst:139
# 124db5c3252f4d138b39528cb8b6e093
msgid "This will ensure that the text outputter is used."
msgstr ""

#: ../../ref/modules/index.rst:145
# 0e5e0f756143469e940b7ff6054019a5
msgid "Virtual Modules"
msgstr ""

#: ../../ref/modules/index.rst:147
# 932b140b794642e3820b3251f0c5ec9f
msgid "Sometimes a module should be presented in a generic way. A good example of this can be found in the package manager modules. The package manager changes from one operating system to another, but the Salt module that interfaces with the package manager can be presented in a generic way."
msgstr ""

#: ../../ref/modules/index.rst:152
# 651bceb783024a968d95f2b1853d21a0
msgid "The Salt modules for package managers all contain a ``__virtual__`` function which is called to define what systems the module should be loaded on."
msgstr ""

#: ../../ref/modules/index.rst:155
# 807a2f666cf94f6b8fa0752efac9f3d0
msgid "The ``__virtual__`` function is used to return either a :ref:`string <python2:typesseq>` or :py:data:`False`. If False is returned then the module is not loaded, if a string is returned then the module is loaded with the name of the string."
msgstr ""

#: ../../ref/modules/index.rst:160
# 5b81e97ca1334594bfef11236e405266
msgid "This means that the package manager modules can be presented as the ``pkg`` module regardless of what the actual module is named."
msgstr ""

#: ../../ref/modules/index.rst:163
# ba1158dc198c4b049355532c976a6e22
msgid "The package manager modules are the best example of using the ``__virtual__`` function: :blob:`salt/modules/pacman.py` :blob:`salt/modules/yumpkg.py` :blob:`salt/modules/apt.py`"
msgstr ""

#: ../../ref/modules/index.rst:171
# 4538d347520d4ea5a13c886745aa3736
msgid "Documentation"
msgstr ""

#: ../../ref/modules/index.rst:173
# 929537ce8c834b6baec672d43f6dee29
msgid "Salt modules are self documenting, the :func:`sys.doc` function will return the documentation for all available modules:"
msgstr ""

#: ../../ref/modules/index.rst:180
# 9a699826a78341dda5e3d175ca0c6512
msgid "This function simply prints out the docstrings found in the modules; when writing Salt modules, please follow the formatting conventions for docstrings as they appear in the other modules."
msgstr ""

#: ../../ref/modules/index.rst:185
# 94934ff2584147eaa165d1d9329e00d7
msgid "Adding Documentation to Salt Modules"
msgstr ""

#: ../../ref/modules/index.rst:187
# 150c38165c8b4391b613e19854b6ee4a
msgid "Since life is much better with documentation, it is strongly suggested that all Salt modules have documentation added. Any Salt modules submitted for inclusion in the main distribution of Salt will be required to have documentation."
msgstr ""

#: ../../ref/modules/index.rst:192
# 9070f6f39c0a40a0acbc091f775be3e6
msgid "Documenting Salt modules is easy! Just add a `Python docstring`_ to the function."
msgstr ""

#: ../../ref/modules/index.rst:206
# 84e6e36705ee4d7cbf0a305f5ebf7238
msgid "Now when the sys.doc call is executed the docstring will be cleanly returned to the calling terminal."
msgstr ""

#: ../../ref/modules/index.rst:213
# eae632dcc5d84de5888bc5a917d8dd02
msgid "Add Module metadata"
msgstr ""

#: ../../ref/modules/index.rst:215
# b6f19eba11c14b31ab4d9a07d3bbda7a
msgid "Add information about the module using the following field lists:"
msgstr ""

#: ../../ref/modules/index.rst:224
# 8701fc0c2f7c4707af82ff88d71304dd
msgid "The maintainer field is a comma-delimited list of developers who help maintain this module."
msgstr ""

#: ../../ref/modules/index.rst:227
# c8523b6e3cea4c359b8cb7eeb110c103
msgid "The maturity field indicates the level of quality and testing for this module. Standard labels will be determined."
msgstr ""

#: ../../ref/modules/index.rst:230
# 2ef988295d0c440ca5fdd3428c3416fb
msgid "The depends field is a comma-delimited list of modules that this module depends on."
msgstr ""

#: ../../ref/modules/index.rst:233
# d7e6f1e7953a47549f97ffac19cae1f7
msgid "The platform field is a comma-delimited list of platforms that this module is known to run on."
msgstr ""

#: ../../ref/modules/index.rst:237
# 75ac1fb1bb264b6aaaebbdd86bca2b84
msgid "How Functions are Read"
msgstr ""

#: ../../ref/modules/index.rst:239
# 39bcfbf47ca941919167fdd1713174b7
msgid "In Salt, Python callable objects contained within a module are made available to the Salt minion for use. The only exception to this rule is a callable object with a name starting with an underscore ``_``."
msgstr ""

#: ../../ref/modules/index.rst:244
# 59952b19455841f99150c23ce3965c8f
msgid "Objects Loaded Into the Salt Minion"
msgstr ""

#: ../../ref/modules/index.rst:256
# 16726bdac9054f098479c23fd7dbad48
msgid "Objects NOT Loaded into the Salt Minion"
msgstr ""

#: ../../ref/modules/index.rst:266
# dd30427adb3e4122a8de1bd2734647cc
msgid "Useful Decorators for Modules"
msgstr ""

#: ../../ref/modules/index.rst:267
# 315d3d72720d474e9834e69b8fcd43f4
msgid "Sometimes when writing modules for large scale deployments you run into some small things that end up severely complicating the code. To alleviate some of this pain Salt has some useful decorators for use within modules!"
msgstr ""

#: ../../ref/modules/index.rst:272
# c875f0128cd84ca3bb298ce5c47f36cf
msgid "Depends Decorator"
msgstr ""

#: ../../ref/modules/index.rst:273
# 4303f3902e044d4087d06d87ddc1935d
msgid "When writing custom modules there are many times where some of the module will work on all hosts, but some functions require (for example) a service to be installed. Instead of trying to wrap much of the code in large try/except blocks you can use a simple decorator to do this. If the dependencies passed to the decorator don't exist, then the salt minion will remove those functions from the module on that host. If a \"fallback_funcion\" is defined, it will replace the function instead of removing it"
msgstr ""

#: ../../ref/modules/index.rst:313
# f8f4a04a410047d586933efc47e041b0
msgid "Examples of Salt Modules"
msgstr ""

#: ../../ref/modules/index.rst:315
# 7c876cf3b926419989d439cae60d25ca
msgid "The existing Salt modules should be fairly easy to read and understand, the goal of the main distribution's Salt modules is not only to build a set of functions for Salt, but to stand as examples for building out more Salt modules."
msgstr ""

#: ../../ref/modules/index.rst:320
# 15b91c7bd2fc493eb536bb344cbbc78c
msgid "The existing modules can be found here: :blob:`salt/modules`"
msgstr ""

#: ../../ref/modules/index.rst:323
# 1f2ea199afce47449be18378110874f3
msgid "The most simple module is the test module, it contains the simplest Salt function, ``test.ping``:"
msgstr ""

