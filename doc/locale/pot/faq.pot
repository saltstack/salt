# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../faq.rst:5
# e6e4d20f2ecb4f39a11ebb0d8d10d25c
msgid "Frequently Asked Questions"
msgstr ""

#: ../../faq.rst:0
# 0ed92de68ec0402fa7655e45cd723e80
msgid "FAQ"
msgstr ""

#: ../../faq.rst:10
# 3ab6493305ab410489373aee76177427
msgid "Is Salt open-core?"
msgstr ""

#: ../../faq.rst:12
# 6ba613f872c849a5a0e95dd3ca84479b
msgid "No. Salt is 100% committed to being open-source, including all of our APIs and the new `'Halite' web interface`_ which will be included in version 0.17.0. It is developed under the `Apache 2.0 license`_, allowing it to be used in both open and proprietary projects."
msgstr ""

#: ../../faq.rst:21
# d9e751953f584145ad0614e1fb25cbf0
msgid "What ports should I open on my firewall?"
msgstr ""

#: ../../faq.rst:23
# 40ad92760641436995dbc7efd789ee0d
msgid "Minions need to be able to connect to the Master on TCP ports 4505 and 4506. Minions do not need any inbound ports open. More detailed information on firewall settings can be found :doc:`here </topics/tutorials/firewall>`."
msgstr ""

#: ../../faq.rst:28
# dccf212e1b0b44029bac4810800d1549
msgid "My script runs every time I run a *state.highstate*. Why?"
msgstr ""

#: ../../faq.rst:30
# 2a23b21d93064493912d23df57712ac0
msgid "You are probably using :mod:`cmd.run <salt.states.cmd.run>` rather than :mod:`cmd.wait <salt.states.cmd.wait>`. A :mod:`cmd.wait <salt.states.cmd.wait>` state will only run when there has been a change in a state that it is watching."
msgstr ""

#: ../../faq.rst:35
# 626ab177499b4810930bbc310458f838
msgid "A :mod:`cmd.run <salt.states.cmd.run>` state will run the corresponding command *every time* (unless it is prevented from running by the ``unless`` or ``onlyif`` arguments)."
msgstr ""

#: ../../faq.rst:39
# bb71888b82e249458a6619c29ec5906e
msgid "More details can be found in the docmentation for the :mod:`cmd <salt.states.cmd>` states."
msgstr ""

#: ../../faq.rst:43
# 3c4bee2df3f846b59c15697a79bec3e8
msgid "When I run *test.ping*, why don't the Minions that aren't responding return anything? Returning ``False`` would be helpful."
msgstr ""

#: ../../faq.rst:45
# 1ffc5c5eefb44433ac8dfde32a3fa48a
msgid "When you run *test.ping* the Master tells Minions to run commands/functions, and listens for the return data, printing it to the screen when it is received. If it doesn't receive anything back, it doesn't have anything to display for that Minion."
msgstr ""

#: ../../faq.rst:50
# 765a1000ba0c4f5dbd528824deac5fea
msgid "There are a couple options for getting information on Minions that are not responding. One is to use the verbose (``-v``) option when you run salt commands, as it will display \"Minion did not return\" for any Minions which time out."
msgstr ""

#: ../../faq.rst:59
# c358007ab790497dad52522482513e58
msgid "Another option is to use the :mod:`manage.down <salt.runners.manage.down>` runner:"
msgstr ""

#: ../../faq.rst:67
# ac3e72eb2ddb45d2902835cc200400ad
msgid "How does Salt determine the Minion's id?"
msgstr ""

#: ../../faq.rst:69
# fe2a491250404be58916bd5c765c2604
msgid "If the Minion id is not configured explicitly (using the :conf_minion:`id` parameter), Salt will determine the id based on the hostname. Exactly how this is determined varies a little between operating systems and is described in detail :ref:`here <minion-id-generation>`."
msgstr ""

#: ../../faq.rst:75
# 770cceb99cac49188cf340866c987aa6
msgid "I'm trying to manage packages/services but I get an error saying that the state is not available. Why?"
msgstr ""

#: ../../faq.rst:77
# b5e840919ec942e08079abc8fd70ba41
msgid "Salt detects the Minion's operating system and assigns the correct package or service management module based on what is detected. However, for certain custom spins and OS derivatives this detection fails. In cases like this, an issue should be opened on our tracker_, with the following information:"
msgstr ""

#: ../../faq.rst:82
# ca15b2d300264dc283ed6f0eb77ba2e7
msgid "The output of the following command:"
msgstr ""

#: ../../faq.rst:88
# 450954f4b781407d9233b3187e9ac2c3
msgid "The contents of ``/etc/lsb-release``, if present on the Minion."
msgstr ""

#: ../../faq.rst:93
# 0f23cb22f41f437896ceee4542f8711d
msgid "I'm using gitfs and my custom modules/states/etc are not syncing. Why?"
msgstr ""

#: ../../faq.rst:95
# 91f50e077cdc4252a55312f08a1da4d3
msgid "In versions of Salt 0.16.3 or older, there is a bug in :doc:`gitfs </topics/tutorials/gitfs>` which can affect the syncing of custom types. Upgrading to 0.16.4 or newer will fix this."
msgstr ""

#: ../../faq.rst:100
# dce25b0d12464ae48749e9319a5f57b8
msgid "Why aren't my custom modules/states/etc. available on my Minions?"
msgstr ""

#: ../../faq.rst:102
# 73326f0320354c46a0cdd4eb83fc285d
msgid "Custom modules are only synced to Minions when :mod:`state.highstate <salt.modules.state.highstate>`, :mod:`saltutil.sync_modules <salt.modules.saltutil.sync_modules>`, or :mod:`saltutil.sync_all <salt.modules.saltutil.sync_all>` is run. Similarly, custom states are only synced to Minions when :mod:`state.highstate <salt.modules.state.highstate>`, :mod:`saltutil.sync_states <salt.modules.saltutil.sync_states>`, or :mod:`saltutil.sync_all <salt.modules.saltutil.sync_all>` is run."
msgstr ""

#: ../../faq.rst:110
# e3fa2ef96618432f915e50b2c008c51c
msgid "Other custom types (renderers, outputters, etc.) have similar behavior, see the documentation for the :mod:`saltutil <salt.modules.saltutil>` module for more information."
msgstr ""

#: ../../faq.rst:115
# 30fa6f5699dd4a71971bc692dfc306d4
msgid "Module ``X`` isn't available, even though the shell command it uses is installed. Why?"
msgstr ""

#: ../../faq.rst:116
# 2d8b0bb1a784445b9abf6940566266bf
msgid "This is most likely a PATH issue. Did you custom-compile the software which the module requires? RHEL/CentOS/etc. in particular override the root user's path in ``/etc/init.d/functions``, setting it to ``/sbin:/usr/sbin:/bin:/usr/bin``, making software installed into ``/usr/local/bin`` unavailable to Salt when the Minion is started using the initscript. In version 0.18.0, Salt will have a better solution for these sort of PATH-related issues, but recompiling the software to install it into a location within the PATH should resolve the issue in the meantime. Alternatively, you can create a symbolic link within the PATH using a :mod:`file.symlink <salt.states.file.symlink>` state."
msgstr ""

