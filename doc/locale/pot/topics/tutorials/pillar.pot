# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/tutorials/pillar.rst:6
# 59e8582056894589a854d8f0e6208332
msgid "Pillar Walkthrough"
msgstr ""

#: ../../topics/tutorials/pillar.rst:10
# 285b9f0f87a541d8a472def9005cb8f8
msgid "This walkthrough assumes that the reader has already completed the initial Salt Stack :doc:`walkthrough </topics/tutorials/walkthrough>`."
msgstr ""

#: ../../topics/tutorials/pillar.rst:13
# 893007108f0c48e9bd7ffc83fc648bd5
msgid "The pillar interface inside of Salt is one of the most important components of a Salt deployment. Pillar is the interface used to generate arbitrary data for specific minions. The data generated in pillar is made available to almost every component of Salt and is used for a number of purposes:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:20
# a96bee558dbe478fbaf4faf1b6017d7c
msgid "Highly Sensitive Data:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:19
# 7401bf3f296e4d21a51faa2d5f656784
msgid "Information transferred via pillar is guaranteed to only be presented to the minions that are targeted, this makes pillar the engine to use in Salt for managing security information, such as cryptographic keys and passwords."
msgstr ""

#: ../../topics/tutorials/pillar.rst:23
# 6bd224547bdc43bfb26b3690fc89e99f
msgid "Minion Configuration:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:23
# 3db88cc8d2314c5b9e8cfda612b2996f
msgid "Minion modules such as the execution modules, states, and returners can often be configured via data stored in pillar."
msgstr ""

#: ../../topics/tutorials/pillar.rst:27
# 62eb12dbd7784adcb9b72dd52edb6f33
msgid "Variables:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:26
# 81f6eb8654a9435588bb18ed02779148
msgid "Variables which need to be assigned to specific minions or groups of minions can be defined in pillar and then accessed inside sls formulas and template files."
msgstr ""

#: ../../topics/tutorials/pillar.rst:32
# 6c1b2a2d20404d7796b9c52c37b5ec45
msgid "Arbitrary Data:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:30
# 4c536e3c6a7245058334edbbb8c87dd2
msgid "Pillar can contain any basic data structure, so a list of values, or a key/value store can be defined making it easy to iterate over a group of values in sls formulas"
msgstr ""

#: ../../topics/tutorials/pillar.rst:34
# 91c9e7d9229c49b5bf27d34af6471be4
msgid "Pillar is therefore one of the most important systems when using Salt, this walkthrough is designed to get a simple pillar up and running in a few minutes and then to dive into the capabilities of pillar and where the data is available."
msgstr ""

#: ../../topics/tutorials/pillar.rst:40
# d55b821db2dd4a83851c238995478315
msgid "Setting Up Pillar"
msgstr ""

#: ../../topics/tutorials/pillar.rst:42
# 987f1d4898cd4f3089d13d80ec770cde
msgid "The pillar is already running in Salt by default. The data in the minion's pillars can be seen via the following command:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:50
# ef9cac7ad1ab4b4980b4c5da402c4079
msgid "Prior to version 0.16.2, this function is named ``pillar.data``. This function name is still supported for backwards compatibility."
msgstr ""

#: ../../topics/tutorials/pillar.rst:53
# 48be62414a784ec1aee6d9adcc68f8ab
msgid "By default the contents of the master configuration file are loaded into pillar for all minions, this is to enable the master configuration file to be used for global configuration of minions."
msgstr ""

#: ../../topics/tutorials/pillar.rst:57
# 844dc018e78d4007961c2f99e6e78b92
msgid "The pillar is built in a similar fashion as the state tree, it is comprised of sls files and has a top file, just like the state tree. The pillar is stored in a different location on the Salt master than the state tree. The default location for the pillar is in /srv/pillar."
msgstr ""

#: ../../topics/tutorials/pillar.rst:64
# d749cd7ce1d140ec85d7f6aa5d0e6e88
msgid "The pillar location can be configured via the `pillar_roots` option inside the master configuration file."
msgstr ""

#: ../../topics/tutorials/pillar.rst:67
# d98dafa804c4460885cace87dccbf767
msgid "To start setting up the pillar, the /srv/pillar directory needs to be present:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:73
# aaaaa352f15f4bc6af2ec5708ca886ce
msgid "Now a simple top file, following the same format as the top file used for states needs to be created:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:76
#: ../../topics/tutorials/pillar.rst:126
#: ../../topics/tutorials/pillar.rst:183
# 0118882be79048fca215b199c7713f73
# bbabd347efb64b119d9552a2e688cb14
# c2f0f4ace6e940b4ad01301ec07bd71f
msgid "``/srv/pillar/top.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:84
# 074adc4cbda5462fa8e34c7669a7355d
msgid "This top file associates the data.sls file to all minions. Now the ``/srv/pillar/data.sls`` file needs to be populated:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:87
# 5281136b42634ab882f126b964e3c86d
msgid "``/srv/pillar/data.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:93
# ef6cc6ddc95a4629a0758f61d5e46955
msgid "Now that the file has been saved the minions' pillars will be updated:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:99
# b379db30ebda4ddeba7c5ed31201aa2f
msgid "The key ``info`` should now appear in the returned pillar data."
msgstr ""

#: ../../topics/tutorials/pillar.rst:102
# a63169cd9ed34b83951ef67a9b3bc0d7
msgid "More Complex Data"
msgstr ""

#: ../../topics/tutorials/pillar.rst:104
# b6bb8902cd3e4760a473a6b7273cfe03
msgid "Pillar files are sls files, just like states, but unlike states they do not need to define :strong:`formulas`, the data can be arbitrary, this example for instance sets up user data with a UID:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:108
# 7464fcecca0b403f9387e73c33cd857e
msgid "``/srv/pillar/users/init.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:120
# 0088c17f449d493ba41a96fef8d1f977
msgid "The same directory lookups that exist in states exist in pillar, so the file ``users/init.sls`` can be referenced with ``users`` in the :term:`top file`."
msgstr ""

#: ../../topics/tutorials/pillar.rst:124
# 37fd6870ccca48e6a476237e93b9d2a3
msgid "The top file will need to be updated to include this sls file:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:135
# f09374526e4342fea28a5700e96759b3
msgid "Now the data will be available to the minions. To use the pillar data in a state just access the pillar via Jinja:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:138
# b970d0b2f0ad4621939981a9d8f8a31f
msgid "``/srv/salt/users/init.sls``"
msgstr ""

#: ../../topics/tutorials/pillar.rst:148
# b4aaafabc364410f9d30333ba4545c39
msgid "This approach allows for users to be safely defined in a pillar and then the user data is applied in an sls file."
msgstr ""

#: ../../topics/tutorials/pillar.rst:152
# 7b03e030301c49f4a673c2e5d9a2ba55
msgid "Paramaterizing States With Pillar"
msgstr ""

#: ../../topics/tutorials/pillar.rst:154
# fba03ef17bdb457c9c5ab019f0026e20
msgid "One of the most powerful abstractions in pillar is the ability to parameterize states. Instead of defining macros or functions within the state context the entire state tree can be freely parameterized relative to the minion's pillar."
msgstr ""

#: ../../topics/tutorials/pillar.rst:158
# 474be3c6d34047029698c924a038171f
msgid "This approach allows for Salt to be very flexible while staying very straightforward. It also means that simple sls formulas used in the state tree can be directly parameterized without needing to refactor the state tree."
msgstr ""

#: ../../topics/tutorials/pillar.rst:162
# 1a2493e9677649c0b0c0c4d385fd0803
msgid "A simple example is to set up a mapping of package names in pillar for separate Linux distributions:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:165
# 12dcbca77a0b4376bacb8aa7acac0040
msgid "``/srv/pillar/pkg/init.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:181
# 882e76f278054c2c89054487a34fb6cd
msgid "The new ``pkg`` sls needs to be added to the top file:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:193
# 2aad3521f89a4ab1974c368bdd8fd19b
msgid "Now the minions will auto map values based on respective operating systems inside of the pillar, so sls files can be safely parameterized:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:196
#: ../../topics/tutorials/pillar.rst:211
# 238b5b08e5804e01b957050a82ad637a
# 056ccc026e6f41909cdce746bca7b175
msgid "``/srv/salt/apache/init.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:204
# e3a4c857b5e94263b8f1bac5f45298cc
msgid "Or, if no pillar is available a default can be set as well:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:208
# 9ba834ebfcbf42cca0704df366983136
msgid "The function ``pillar.get`` used in this example was added to Salt in version 0.14.0"
msgstr ""

#: ../../topics/tutorials/pillar.rst:219
# 91b436dfa19f4f2c9aefd3fb19680701
msgid "In the above example, if the pillar value ``pillar['pkgs']['apache']`` is not set in the minion's pillar, then the default of ``httpd`` will be used."
msgstr ""

#: ../../topics/tutorials/pillar.rst:224
# 6a0fa0a63b7b42539bfe75196578504e
msgid "Under the hood, pillar is just a python dict, so python dict methods such as `get` and `items` can be used."
msgstr ""

#: ../../topics/tutorials/pillar.rst:228
# f37792b614ac47dd8a1482d49a5d0429
msgid "Pillar Makes Simple States Grow Easily"
msgstr ""

#: ../../topics/tutorials/pillar.rst:230
# c1fdb3e8c56448b8a9568d603fc186d8
msgid "One of the design goals of pillar is to make simple sls formulas easily grow into more flexible formulas without refactoring or complicating the states."
msgstr ""

#: ../../topics/tutorials/pillar.rst:233
# 66c574bd0fd74511a0bcd4e8b70cb511
msgid "A simple formula:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:235
#: ../../topics/tutorials/pillar.rst:254
# 907c102417ba40faa4f08fd3371f0d54
# 3d0156c0da5b4a32a8cc63ed6d522750
msgid "``/srv/salt/edit/vim.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:252
# 537a63a73300432fa071739ccbd54982
msgid "Can be easily transformed into a powerful, parameterized formula:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:272
# 69c0cbcbb79d49c4ba4ec367ab09ed7c
msgid "Where the vimrc source location can now be changed via pillar:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:274
# 48646992bf444090b5c4b6e508069de3
msgid "``/srv/pillar/edit/vim.sls``:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:286
# 4d0d46ee01cb4dd89356a7f5607189f4
msgid "Ensuring that the right vimrc is sent out to the correct minions."
msgstr ""

#: ../../topics/tutorials/pillar.rst:289
# 8ac6e137aa254b7f9e8ed9f7574904e9
msgid "More On Pillar"
msgstr ""

#: ../../topics/tutorials/pillar.rst:291
# 0e6545618571405a8abec9fba544d81f
msgid "The pillar data is generated on the Salt master and securely distributed to minions. Salt is not restricted to the pillar sls files when defining the pillar but can retrieve data from external sources. This can be useful when information about an infrastructure is stored in a separate location."
msgstr ""

#: ../../topics/tutorials/pillar.rst:296
# 5cd8e518fdec44fcb23274d0740cb859
msgid "Reference information on pillar and the external pillar interface can be found in the Salt Stack documentation:"
msgstr ""

#: ../../topics/tutorials/pillar.rst:299
# b289c5b3b8684cf286222144fab8f836
msgid ":doc:`Pillar </topics/pillar/index>`"
msgstr ""

