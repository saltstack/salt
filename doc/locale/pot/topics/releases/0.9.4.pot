# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/releases/0.9.4.rst:6
# 00879550d3b1400280dce936d8af35d1
msgid "Salt 0.9.4 Release Notes"
msgstr ""

#: ../../topics/releases/0.9.4.rst:8
# d809f80ecf8b4904be0a12626a52f27d
msgid "Salt 0.9.4 has arrived. This is a critical update that repairs a number of key bugs found in 0.9.3. But this update is not without feature additions as well! 0.9.4 adds support for Gentoo portage to the pkg module and state system. Also there are 2 major new state additions, the failhard option and the ability to set up finite state ordering with the ``order`` option."
msgstr ""

#: ../../topics/releases/0.9.4.rst:14
# 095602c89bb34dd58d94ad4c0dc0701c
msgid "This release also sees our largest increase in community contributions. These contributors have and continue to be the life blood of the Salt project, and the team continues to grow. I want to put out a big thanks to our new and existing contributors."
msgstr ""

#: ../../topics/releases/0.9.4.rst:20
# 25fff6f4a7ff40d681d3417d22fd3ff2
msgid "Download!"
msgstr ""

#: ../../topics/releases/0.9.4.rst:22
# 1c2f7673e47c4ea38f4c9d3de01449ef
msgid "The Salt source can be downloaded from the salt GitHub site:"
msgstr ""

#: ../../topics/releases/0.9.4.rst:24
# e4cf58a030f3484fa0d228a027163b38
msgid ":download:`salt-0.9.4.tar.gz`"
msgstr ""

#: ../../topics/releases/0.9.4.rst:26
# fc94f8d3b5d24e5f82c40ae926832cc2
msgid "Or from PyPI:"
msgstr ""

#: ../../topics/releases/0.9.4.rst:28
# 2bcbfea7073f460398e24cdaa26f44f5
msgid "http://pypi.python.org/packages/source/s/salt/salt-0.9.4.tar.gz"
msgstr ""

#: ../../topics/releases/0.9.4.rst:30
# c21911fe177948eca7990eba022ecfc2
msgid "For instructions on how to set up Salt please see the :ref:`installation` instructions."
msgstr ""

#: ../../topics/releases/0.9.4.rst:34
# 9e482de298fd4c8db923777d8230213f
msgid "New Features"
msgstr ""

#: ../../topics/releases/0.9.4.rst:37
# 7677e54c68074717955d5efabbac9f69
msgid "Failhard State Option"
msgstr ""

#: ../../topics/releases/0.9.4.rst:39
# 4cfcaa39ca7a46b9988abe4527c522b6
msgid "Normally, when a state fails Salt continues to execute the remainder of the defined states and will only refuse to execute states that require the failed state."
msgstr ""

#: ../../topics/releases/0.9.4.rst:43
# ea535651bbda4071acea12ec14e1041c
msgid "But the situation may exist, where you would want all state execution to stop if a single state execution fails. The capability to do this is called ``failing hard``."
msgstr ""

#: ../../topics/releases/0.9.4.rst:48
# 5260b2bc4ba145fcbcece20269f59104
msgid "State Level Failhard"
msgstr ""

#: ../../topics/releases/0.9.4.rst:50
# a15e4a4482c7457a92f694b319a7df7d
msgid "A single state can have a failhard set, this means that if this individual state fails that all state execution will immediately stop. This is a great thing to do if there is a state that sets up a critical config file and setting a require for each state that reads the config would be cumbersome. A good example of this would be setting up a package manager early on:"
msgstr ""

#: ../../topics/releases/0.9.4.rst:68
# 227fa04fd644481c8fd3732aada1beb2
msgid "In this situation, the yum repo is going to be configured before other states, and if it fails to lay down the config file, than no other states will be executed."
msgstr ""

#: ../../topics/releases/0.9.4.rst:73
# 2e4f8a682751441fb9e250ea2c51e21f
msgid "Global Failhard"
msgstr ""

#: ../../topics/releases/0.9.4.rst:75
# 885f5183bbcc41718d968301fc674cd4
msgid "It may be desired to have failhard be applied to every state that is executed, if this is the case, then failhard can be set in the master configuration file. Setting failhard in the master configuration file will result in failing hard when any minion gathering states from the master have a state fail."
msgstr ""

#: ../../topics/releases/0.9.4.rst:80
# 8ef1806ce02a4565aa6f4d70ebc69465
msgid "This is NOT the default behavior, normally Salt will only fail states that require a failed state."
msgstr ""

#: ../../topics/releases/0.9.4.rst:83
# 1c6a0edd4ed34700836df96a1b669354
msgid "Using the global failhard is generally not recommended, since it can result in states not being executed or even checked. It can also be confusing to see states failhard if an admin is not actively aware that the failhard has been set."
msgstr ""

#: ../../topics/releases/0.9.4.rst:88
# 7e1db37d7437420cb1f5128d25a9159e
msgid "To use the global failhard set failhard: True in the master configuration"
msgstr ""

#: ../../topics/releases/0.9.4.rst:91
# 7f4bc9c9f4b6482e829d4584071fc3cc
msgid "Finite Ordering of State Execution"
msgstr ""

#: ../../topics/releases/0.9.4.rst:93
# 7e64ed2ce81943a4b1197b4d407806d8
msgid "When creating salt sls files, it is often important to ensure that they run in a specific order. While states will always execute in the same order, that order is not necessarily defined the way you want it."
msgstr ""

#: ../../topics/releases/0.9.4.rst:97
# 782323fc7c9d44198766b77dd57df9da
msgid "A few tools exist in Salt to set up the correct state ordering, these tools consist of requisite declarations and order options."
msgstr ""

#: ../../topics/releases/0.9.4.rst:101
# c10e337bba2b46fa8a6db81cf7ecebe1
msgid "The Order Option"
msgstr ""

#: ../../topics/releases/0.9.4.rst:103
# 4b4a69cd288243df9e2975b1930e0a1c
msgid "Before using the order option, remember that the majority of state ordering should be done with requisite statements, and that a requisite statement will override an order option."
msgstr ""

#: ../../topics/releases/0.9.4.rst:107
# 102f000959954334b8945dfa2ce21547
msgid "The order option is used by adding an order number to a state declaration with the option `order`:"
msgstr ""

#: ../../topics/releases/0.9.4.rst:117
# 4d401ea2d9a344adbacae1e7d75ab3e1
msgid "By adding the order option to `1` this ensures that the vim package will be installed in tandem with any other state declaration set to the order `1`."
msgstr ""

#: ../../topics/releases/0.9.4.rst:120
# fbb326adab744e2a96f23464fe405706
msgid "Any state declared without an order option will be executed after all states with order options are executed."
msgstr ""

#: ../../topics/releases/0.9.4.rst:123
# 44ea600ee96c46928382cf709a9104a7
msgid "But this construct can only handle ordering states from the beginning. Sometimes you may want to send a state to the end of the line, to do this set the order to last:"
msgstr ""

#: ../../topics/releases/0.9.4.rst:134
# b96ef6005a5048778ad673023a2bb6dd
msgid "Substantial testing has gone into the state system and it is ready for real world usage. A great deal has been added to the documentation for states and the modules and functions available to states have been cleanly documented."
msgstr ""

#: ../../topics/releases/0.9.4.rst:138
# 9ae83bbeca4b4fed9803c4710bb2162a
msgid "A number of State System bugs have also been founds and repaired, the output from the state system has also been refined to be extremely clear and concise."
msgstr ""

#: ../../topics/releases/0.9.4.rst:141
# 548a404800e542f0b4b96cb97f36ffce
msgid "Error reporting has also been introduced, issues found in sls files will now be clearly reported when executing Salt States."
msgstr ""

#: ../../topics/releases/0.9.4.rst:146
# 3f7899a5383e458c8766a2fb1bb0dc04
msgid "Gentoo Support"
msgstr ""

#: ../../topics/releases/0.9.4.rst:148
# 4fadd4da7bc34d64bc93f77d3a7865a3
msgid "Additional experimental support has been added for Gentoo. This is found in the contribution from Doug Renn, aka nestegg."
msgstr ""

