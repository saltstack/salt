# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/releases/0.15.0.rst:6
# 9ef8d03251bf4fd2b19d3896e6290c9a
msgid "Salt 0.15.0 Release Notes"
msgstr ""

#: ../../topics/releases/0.15.0.rst:8
# 878beb92742442f28cf999bf1e50ea65
msgid "The many new features of Salt 0.15.0 have arrived! Salt 0.15.0 comes with many smaller features and a few larger ones."
msgstr ""

#: ../../topics/releases/0.15.0.rst:11
# 77db1a6a7f1040099dcd1bceb9459e5c
msgid "These features range from better debugging tools to the new Salt Mine system."
msgstr ""

#: ../../topics/releases/0.15.0.rst:14
# ecde7ea3773941d182a7331a2e241017
msgid "Major Features"
msgstr ""

#: ../../topics/releases/0.15.0.rst:17
# 0aa51265ef1d4bc9b9ecda83ef58760e
msgid "The Salt Mine"
msgstr ""

#: ../../topics/releases/0.15.0.rst:19
# 27206993b35f487ca38184152dd5892e
msgid "First there was the peer system, allowing for commands to be executed from a minion to other minions to gather data live. Then there was the external job cache for storing and accessing long term data. Now the middle ground is being filled in with the Salt Mine. The Salt Mine is a system used to execute functions on a regular basis on minions and then store only the most recent data from the functions on the master, then the data is looked up via targets."
msgstr ""

#: ../../topics/releases/0.15.0.rst:26
# dda4e391cfca4c9599c814c308788fc3
msgid "The mine caches data that is public to all minions, so when a minion posts data to the mine all other minions can see it."
msgstr ""

#: ../../topics/releases/0.15.0.rst:30
# e883219d97ab456d9a3e00c023d577e5
msgid "IPV6 Support"
msgstr ""

#: ../../topics/releases/0.15.0.rst:32
# d401c925293745aa92845ff642088bae
msgid "0.13.0 saw the addition of initial IPV6 support but errors were encountered and it needed to be stripped out. This time the code covers more cases and must be explicitly enabled. But the support is much more extensive than before."
msgstr ""

#: ../../topics/releases/0.15.0.rst:37
# 7945892d23fd4479b5f365fd588ed78c
msgid "Copy Files From Minions to the Master"
msgstr ""

#: ../../topics/releases/0.15.0.rst:39
# 03e738ecf5db444e868c9f8ddef7556a
msgid "Minions have long been able to copy files down from the master file server, but until now files could not be easily copied from the minion up to the master."
msgstr ""

#: ../../topics/releases/0.15.0.rst:42
# 861b075273df4b369cabe8dd81a476a4
msgid "A new function called ``cp.push`` can push files from the minions up to the master server. The uploaded files are then cached on the master in the master cachedir for each minion."
msgstr ""

#: ../../topics/releases/0.15.0.rst:47
# 0fb906376cbe40f2b0127000b3f1513f
msgid "Better Template Debugging"
msgstr ""

#: ../../topics/releases/0.15.0.rst:49
# e8103836b10044ebb4ad9354f4fd4552
msgid "Template errors have long been a burden when writing states and pillar. 0.15.0 will now send the compiled template data to the debug log, this makes tracking down the intermittent stage templates much easier. So running state.sls or state.highstate with `-l debug` will now print out the rendered templates in the debug information."
msgstr ""

#: ../../topics/releases/0.15.0.rst:56
# b0e27a9bc40e4b55873b4c75475d3443
msgid "State Event Firing"
msgstr ""

#: ../../topics/releases/0.15.0.rst:58
# e35595a278864e558d3ce44bf626c1c6
msgid "The state system is now more closely tied to the master's event bus. Now when a state fails the failure will be fired on the master event bus so that the reactor can respond to it."
msgstr ""

#: ../../topics/releases/0.15.0.rst:63
# 007b02b77a0c4fee9b7d20f5f6ab324c
msgid "Major Syndic Updates"
msgstr ""

#: ../../topics/releases/0.15.0.rst:65
# 9869d054e5404fc38eb8e1e22c8717ca
msgid "The Syndic system has been basically re-written. Now it runs in a completely asynchronous way and functions primarily as an event broker. This means that the events fired on the syndic are now pushed up to the higher level master instead of the old method used which waited for the client libraries to return."
msgstr ""

#: ../../topics/releases/0.15.0.rst:71
# beb052080f3e4732b0bc7682b30a931c
msgid "This makes the syndic much more accurate and powerful, it also means that all events fired on the syndic master make it up the pipe as well making a reactor on the higher level master able to react to minions further downstream."
msgstr ""

#: ../../topics/releases/0.15.0.rst:77
# 00c4ae2e0de646e589f79451c86d4876
msgid "Peer System Updates"
msgstr ""

#: ../../topics/releases/0.15.0.rst:79
# ed4bff0d4dcb42df94256000bebd959f
msgid "The Peer System has been updated to run using the client libraries instead of firing directly over the publish bus. This makes the peer system much more consistent and reliable."
msgstr ""

#: ../../topics/releases/0.15.0.rst:84
# c2659b330b95474db23538b085e0a9f7
msgid "Minion Key Revocation"
msgstr ""

#: ../../topics/releases/0.15.0.rst:86
# 2f5ba5e55a074efbbf7a00d0c9513127
msgid "In the past when a minion was decommissioned the key needed to be manually deleted on the master, but now a function on the minion can be used to revoke the calling minion's key:"
msgstr ""

#: ../../topics/releases/0.15.0.rst:95
# cc18e94c611b4455b07c7e01ccd16210
msgid "Function Return Codes"
msgstr ""

#: ../../topics/releases/0.15.0.rst:97
# 3fabeacd203444a89116ad2f76b8f3f0
msgid "Functions can now be assigned numeric return codes to determine if the function executed successfully. While not all functions have been given return codes, many have and it is an ongoing effort to fill out all functions that might return a non-zero return code."
msgstr ""

#: ../../topics/releases/0.15.0.rst:103
# 4584ca2fecf742a19b2e5a19ba452009
msgid "Functions in Overstate"
msgstr ""

#: ../../topics/releases/0.15.0.rst:105
# 0bb0d66531ca49298c0cd8dedaa37207
msgid "The overstate system was originally created to just manage the execution of states, but with the addition of return codes to functions, requisite logic can now be used with respect to the overstate. This means that an overstate stage can now run single functions instead of just state executions."
msgstr ""

#: ../../topics/releases/0.15.0.rst:111
# 64a0b2629ecd4aee9b3e71ae5a78b9fa
msgid "Pillar Error Reporting"
msgstr ""

#: ../../topics/releases/0.15.0.rst:113
# 45aa1465258e468eacd947bf4daa745f
msgid "Previously if errors surfaced in pillar, then the pillar would consist of only an empty dict. Now all data that was successfully rendered stays in pillar and the render error is also made available. If errors are found in the pillar, states will refuse to run."
msgstr ""

#: ../../topics/releases/0.15.0.rst:119
# 52a9a7e6e3e6480b9df4f81688758ae8
msgid "Using Cached State Data"
msgstr ""

#: ../../topics/releases/0.15.0.rst:121
# 3b6d6cfe0a0b4d6090f024c037377321
msgid "Sometimes states are executed purely to maintain a specific state rather than to update states with new configs. This is grounds for the new cached state system. By adding `cache=True` to a state call the state will not be generated fresh from the master but the last state data to be generated will be used. If no previous state data is available then fresh data will be generated."
msgstr ""

#: ../../topics/releases/0.15.0.rst:128
# d5a2162c8a354b2c9dbdde54e98a40df
msgid "Monitoring States"
msgstr ""

#: ../../topics/releases/0.15.0.rst:130
# 7da9688cdc8b46fd9df4757dbb5e3ae1
msgid "The new monitoring states system has been started. This is very young but allows for states to be used to configure monitoring routines. So far only one monitoring state is available, the ``disk.status`` state. As more capabilities are added to Salt UI the monitoring capabilities of Salt will continue to be expanded."
msgstr ""

