# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/pillar/index.rst:8
# 414d0585cb8642d0a06c4453403dee26
msgid "Pillar of Salt"
msgstr ""

#: ../../topics/pillar/index.rst:10
# 5cf79901aca3408f945fe6df2210b25b
msgid "Pillar is an interface for Salt designed to offer global values that can be distributed to all minions. Pillar data is managed in a similar way as the Salt State Tree."
msgstr ""

#: ../../topics/pillar/index.rst:14
# 2326a2f7a7954947873bf9c404e1f464
msgid "Pillar was added to Salt in version 0.9.8"
msgstr ""

#: ../../topics/pillar/index.rst:16
# 443e3c2790ed4dbd8740d5897d7a1b9a
msgid "Storing sensitive data"
msgstr ""

#: ../../topics/pillar/index.rst:18
# 079840bbdac349159a3b5a97819e6e65
msgid "Unlike state tree, pillar data is only available for the targeted minion specified by the matcher type.  This makes it useful for storing sensitive data specific to a particular minion."
msgstr ""

#: ../../topics/pillar/index.rst:24
# 7398dd63f36f417a9ad5d093ef51c533
msgid "Declaring the Master Pillar"
msgstr ""

#: ../../topics/pillar/index.rst:26
# 1e287b7d21364d88bd45181cb905f070
msgid "The Salt Master server maintains a pillar_roots setup that matches the structure of the file_roots used in the Salt file server. Like the Salt file server the ``pillar_roots`` option in the master config is based on environments mapping to directories. The pillar data is then mapped to minions based on matchers in a top file which is laid out in the same way as the state top file. Salt pillars can use the same matcher types as the standard top file."
msgstr ""

#: ../../topics/pillar/index.rst:34
# 784f58974991433fbb7a137f1deaa00f
msgid "The configuration for the :conf_master:`pillar_roots` in the master config file is identical in behavior and function as :conf_master:`file_roots`:"
msgstr ""

#: ../../topics/pillar/index.rst:43
# bfc4c385846f4e2ab330fa455a841591
msgid "This example configuration declares that the base environment will be located in the ``/srv/pillar`` directory. The top file used matches the name of the top file used for States, and has the same structure:"
msgstr ""

#: ../../topics/pillar/index.rst:47
# b91c813f4ca04cd1967d46d27e551aa7
msgid "``/srv/pillar/top.sls``"
msgstr ""

#: ../../topics/pillar/index.rst:55
# c2a706e8b1aa478fab6c3e6004418b35
msgid "This further example shows how to use other standard top matching types (grain matching is used in this example) to deliver specific salt pillar data to minions with different ``os`` grains:"
msgstr ""

#: ../../topics/pillar/index.rst:66
# e8562d6db3c34260b6b6dca77916108f
msgid "``/srv/pillar/packages.sls``"
msgstr ""

#: ../../topics/pillar/index.rst:78
# 460246db03cb4e91b4476f78318ab886
msgid "Now this data can be used from within modules, renderers, State SLS files, and more via the shared pillar :ref:`dict <python2:typesmapping>`:"
msgstr ""

#: ../../topics/pillar/index.rst:97
# 500df8f3c45747f181bc29d9923d76ee
msgid "Note that you cannot just list key/value-information in ``top.sls``."
msgstr ""

#: ../../topics/pillar/index.rst:100
# 6dfca83dc74147689a11445796a6a8b0
msgid "Pillar namespace flattened"
msgstr ""

#: ../../topics/pillar/index.rst:102
# 1ebbef5ee29c45739c3c43ab601c6215
msgid "The separate pillar files all share the same namespace. Given a ``top.sls`` of:"
msgstr ""

#: ../../topics/pillar/index.rst:112
# cff23f37752a41afb28b84c5fab1b337
msgid "a ``packages.sls`` file of:"
msgstr ""

#: ../../topics/pillar/index.rst:118
# 8a7be2ba665f4d359cee064d26606d6f
msgid "and a ``services.sls`` file of:"
msgstr ""

#: ../../topics/pillar/index.rst:124
# 91a441dfeccc47d6be7e8c9af75335b9
msgid "Then a request for the ``bind`` pillar will only return 'named'; the 'bind9' value is not available. It is better to structure your pillar files with more hierarchy. For example your ``package.sls`` file could look like:"
msgstr ""

#: ../../topics/pillar/index.rst:134
# 81bae25b3371484586e64a04a0582235
msgid "Including Other Pillars"
msgstr ""

#: ../../topics/pillar/index.rst:138
# 005bb66e31c94f0a8fdd5fd29f424208
msgid "Pillar SLS files may include other pillar files, similar to State files. Two syntaxes are available for this purpose. The simple form simply includes the additional pillar as if it were part of the same file:"
msgstr ""

#: ../../topics/pillar/index.rst:147
# 8cd35760cc0c48699fc91dce55b00c09
msgid "The full include form allows two additional options -- passing default values to the templating engine for the included pillar file as well as an optional key under which to nest the results of the included pillar:"
msgstr ""

#: ../../topics/pillar/index.rst:159
# 0e9a333b28b244dc8c0fe4daa0ccfc8f
msgid "With this form, the included file (users.sls) will be nested within the 'users' key of the compiled pillar. Additionally, the 'sudo' value will be available as a template variable to users.sls."
msgstr ""

#: ../../topics/pillar/index.rst:165
# e4931543b06c442da8f01f2ab684c10d
msgid "Viewing Minion Pillar"
msgstr ""

#: ../../topics/pillar/index.rst:167
# f836d7c6e5d44d058aa2a2fc64dfdc12
msgid "Once the pillar is set up the data can be viewed on the minion via the ``pillar`` module, the pillar module comes with two functions, :mod:`pillar.items <salt.modules.pillar.items>` and and :mod:`pillar.raw <salt.modules.pillar.raw>`.  :mod:`pillar.items <salt.modules.pillar.items>` will return a freshly reloaded pillar and :mod:`pillar.raw <salt.modules.pillar.raw>` will return the current pillar without a refresh:"
msgstr ""

#: ../../topics/pillar/index.rst:179
# eb6736d30b0c42dab32987b4472a3177
msgid "Prior to version 0.16.2, this function is named ``pillar.data``. This function name is still supported for backwards compatibility."
msgstr ""

#: ../../topics/pillar/index.rst:184
# 0b0d3ddd54b248bcad512a96862d7de4
msgid "Pillar \"get\" Function"
msgstr ""

#: ../../topics/pillar/index.rst:188
# c518d1a3383044e5b930988c3957ac74
msgid "The :mod:`pillar.get <salt.modules.pillar.get>` function works much in the same way as the ``get`` method in a python dict, but with an enhancement: nested dict components can be extracted using a `:` delimiter."
msgstr ""

#: ../../topics/pillar/index.rst:192
# 6a78e1e221d848d78d054f6f672fe3c7
msgid "If a structure like this is in pillar:"
msgstr ""

#: ../../topics/pillar/index.rst:200
# fe3febf287db4ff191610562e038a18f
msgid "Extracting it from the raw pillar in an sls formula or file template is done this way:"
msgstr ""

#: ../../topics/pillar/index.rst:207
# 21a5e170e5e043649732223d52dfc7f1
msgid "Now, with the new :mod:`pillar.get <salt.modules.pillar.get>` function the data can be safely gathered and a default can be set, allowing the template to fall back if the value is not available:"
msgstr ""

#: ../../topics/pillar/index.rst:215
# d631871a976143a0b37bf30b07d92fc2
msgid "This makes handling nested structures much easier."
msgstr ""

#: ../../topics/pillar/index.rst:219
# 0fa0961f1ce44f58b0e3c0c40f665dc9
msgid "Refreshing Pillar Data"
msgstr ""

#: ../../topics/pillar/index.rst:221
# 66fbf70c8e3f4eb6a0668506d4adcb36
msgid "When pillar data is changed on the master the minions need to refresh the data locally. This is done with the ``saltutil.refresh_pillar`` function."
msgstr ""

#: ../../topics/pillar/index.rst:228
# e5c9c3ab6fde4d899a49f4059a4baf75
msgid "This function triggers the minion to asynchronously refresh the pillar and will always return ``None``."
msgstr ""

#: ../../topics/pillar/index.rst:232
# 816080d1236547a9802e770ded858c22
msgid "Targeting with Pillar"
msgstr ""

#: ../../topics/pillar/index.rst:234
# 0eda5a0bd96b490fb59e7e48fdad7392
msgid "Pillar data can be used when targeting minions. This allows for ultimate control and flexibility when targeting minions."
msgstr ""

#: ../../topics/pillar/index.rst:241
# f4a8e29efeb94e39bda23e29ef7b3c8e
msgid "Like with :doc:`Grains <../targeting/grains>`, it is possible to use globbing as well as match nested values in Pillar, by adding colons for each level that is being traversed. The below example would match minions with a pillar named ``foo``, which is a dict containing a key ``bar``, with a value beginning with ``baz``:"
msgstr ""

#: ../../topics/pillar/index.rst:253
# dff437890e844e7fb9ad0de9a171728a
msgid "Master Config In Pillar"
msgstr ""

#: ../../topics/pillar/index.rst:255
# ec07d2b35de64268a59c914899f302b3
msgid "For convenience the data stored in the master configuration file is made available in all minion's pillars. This makes global configuration of services and systems very easy but may not be desired if sensitive data is stored in the master configuration."
msgstr ""

#: ../../topics/pillar/index.rst:260
# cae727313c8a4a27acc7828854b47de3
msgid "To disable the master config from being added to the pillar set ``pillar_opts`` to ``False``:"
msgstr ""

