# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013 SaltStack, Inc.
# This file is distributed under the same license as the Salt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Salt 0.17.0-848-g77b77a3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-12 23:19+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:6
# 6e82ce2880584c97971b0f7cb9e133bc
msgid "YAML Idiosyncrasies"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:8
# 39a0ba7cfc8a4e40bbb909ef13f5fb50
msgid "One of Salt's strengths, the use of existing serialization systems for representing SLS data, can also backfire. `YAML`_ is a general purpose system and there are a number of things that would seem to make sense in an sls file that cause YAML issues. It is wise to be aware of these issues. While reports or running into them are generally rare they can still crop up at unexpected times."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:18
# cff697da0f194e37a5944cb64c927bac
msgid "Spaces vs Tabs"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:20
# 84cae017d4a8423ab5feb31a5a5e10f5
msgid "`YAML uses spaces`_, period. Do not use tabs in your SLS files! If strange errors are coming up in rendering SLS files, make sure to check that no tabs have crept in! In Vim, after enabling search highlighting with: ``:set hlsearch``,  you can check with the following key sequence in normal mode(you can hit `ESC` twice to be sure): ``/``, `Ctrl-v`, `Tab`, then hit `Enter`. Also, you can convert tabs to 2 spaces by these commands in Vim: ``:set tabstop=2 expandtab`` and then ``:retab``."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:31
# e47031be03e74eeea1ea89a38c0b905e
msgid "Indentation"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:32
# 10c28d190bb3463ea2cb67cd2b4dcd22
msgid "The suggested syntax for YAML files is to use 2 spaces for indentation, but YAML will follow whatever indentation system that the individual file uses. Indentation of two spaces works very well for SLS files given the fact that the data is uniform and not deeply nested."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:38
# 04649907ed14409a8a3965c4ef90c503
msgid "Nested Dicts (key=value)"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:40
# 664a84d167524f629b41bdcd795012f7
msgid "When :ref:`dicts <python2:typesmapping>` are more deeply nested, they no longer follow the same indentation logic. This is rarely something that comes up in Salt, since deeply nested options like these are discouraged when making State modules, but some do exist. A good example is the context and default options in the :doc:`file.managed</ref/states/all/salt.states.file>` state:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:63
# afd03e3531c245fb89c0fcded1c9d02f
msgid "Notice that the spacing used is 2 spaces, and that when defining the context and defaults options there is a 4 space indent. If only a 2 space indent is used then the information will not be loaded correctly. If using double spacing is not desirable, then a deeply nested dict can be declared with curly braces:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:86
# 67e9c5967ee3450a994544d0cfe31765
msgid "True/False, Yes/No, On/Off"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:88
# 2e121a884fac4d8c81dce32ced833470
msgid "PyYAML will load these values as boolean ``True`` or ``False``. Un-capitalized versions will also be loaded as booleans (``true``, ``false``, ``yes``, ``no``, ``on``, and ``off``). This can be especially problematic when constructing Pillar data. Make sure that your Pillars which need to use the string versions of these values are enclosed in quotes."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:95
# 16e68189b10b4257bb25dd43fc4e7582
msgid "Integers are Parsed as Integers"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:97
# ee00fe86ef614a47a5edc3ce769e65dd
msgid "NOTE: This has been fixed in salt 0.10.0, as of this release passing an integer that is preceded by a 0 will be correctly parsed"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:100
# 6632efb787214174be2b9b54c9d9549d
msgid "When passing :func:`integers <python2:int>` into an SLS file, they are passed as integers. This means that if a state accepts a string value and an integer is passed, that an integer will be sent. The solution here is to send the integer as a string."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:105
# 112d5e9001364f8591c4720ef40c0983
msgid "This is best explained when setting the mode for a file:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:117
# 4ef06577ab044feabf88a10db2df78af
msgid "Salt manages this well, since the mode is passed as 644, but if the mode is zero padded as 0644, then it is read by YAML as an integer and evaluated as an octal value, 0644 becomes 420. Therefore, if the file mode is preceded by a 0 then it needs to be passed as a string:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:134
# 03d963900ede4a9d8d3be12d74d57c24
msgid "YAML does not like \"Double Short Decs\""
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:136
# 075e2614dfea42ac9a30fa4d99a677a1
msgid "If I can find a way to make YAML accept \"Double Short Decs\" then I will, since I think that double short decs would be awesome. So what is a \"Double Short Dec\"? It is when you declare a multiple short decs in one ID. Here is a standard short dec, it works great:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:146
# 908f1f29ec4745e5b0189e027f8ead3b
msgid "The short dec means that there are no arguments to pass, so it is not required to add any arguments, and it can save space."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:149
# 0c7b4b2d6d5c4a69aa5f57b8c944bb33
msgid "YAML though, gets upset when declaring multiple short decs, for the record..."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:151
# 43f1324428aa4ec686c49eefa1f5b14b
msgid "THIS DOES NOT WORK:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:159
# 176927b704474e6e9338908a53d73cad
msgid "Similarly declaring a short dec in the same ID dec as a standard dec does not work either..."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:162
# 9ee5af4a70c7497b82a61390fdc7ee11
msgid "ALSO DOES NOT WORK:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:175
# af543e1c72f449fabef3f8c4d3717767
msgid "The correct way is to define them like this:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:193
# f6a500d70f1846218a0d8a04cc7a89d7
msgid "Alternatively,  they can be defined the \"old way\",  or with multiple \"full decs\":"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:216
# d89c40376d9f4ba5a90349e306454f28
msgid "YAML support only plain ASCII"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:218
# 4ca1404f4a5744ce9f87b3a296a45189
msgid "According to YAML specification, only ASCII characters can be used."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:220
# 9c31bdfa98344fcf9351253bd8d6de9e
msgid "Within double-quotes, special characters may be represented with C-style escape sequences starting with a backslash ( \\\\ )."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:223
# 14f4212c9fd0438ea9dac100f65735bd
msgid "Examples:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:235
# 7f0c32923be34d2c93b76a8146ea1d41
msgid "List of usable `Unicode characters`_  will help you to identify correct numbers."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:240
# a74ca82f9539482dbc18f29bdacb0804
msgid "Python can also be used to discover the Unicode number for a character:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:246
# 295b9dacd6324ec69b7f7d1e76a42989
msgid "This shell command can find wrong characters in your SLS files:"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:254
# 34c4337b635b4a229094236fd705b775
msgid "Underscores stripped in Integer Definitions"
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:256
# 22d23f206296436ba281eedfdfcdfd0c
msgid "If a definition only includes numbers and underscores, it is parsed by YAML as an integer and all underscores are stripped.  To ensure the object becomes a string, it should be surrounded by quotes.  `More information here`_."
msgstr ""

#: ../../topics/troubleshooting/yaml_idiosyncrasies.rst:262
# f575c05ec4574befb102c911b6c76263
msgid "Here's an example:"
msgstr ""

