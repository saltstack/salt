#!/bin/sh
#
# Salt minion
###################################

# LSB header

### BEGIN INIT INFO
# Provides:          salt-minion
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Salt minion daemon
# Description:       This is the Salt minion daemon that can be controlled by the
#                    Salt master.
### END INIT INFO


# chkconfig header

# chkconfig: 345 97 04
# description:  This is the Salt minion daemon that can be controlled by the Salt master.
#
# processname: /usr/bin/salt-minion


DEBIAN_VERSION="/etc/debian_version"
SUSE_RELEASE="/etc/SuSE-release"
# Source function library.
if [ -f $DEBIAN_VERSION ]; then
   break
elif [ -f $SUSE_RELEASE -a -r /etc/rc.status ]; then
    . /etc/rc.status
else
    . /etc/rc.d/init.d/functions
fi

# Default values (can be overridden below)
SALTMINION="/usr/bin/salt-minion"
SALTCALL="/usr/bin/salt-call"
PYTHON="/usr/bin/python2.6"
# CONFIGS are newline-separated entries of: MINION_USER CONFIG_DIR
CONFIGS="
root /etc/salt
"
MINION_ARGS=""
TIMEOUT=30

SERVICE="salt-minion"
PROCESS="salt-minion"

if [ -f /etc/default/salt ]; then
    . /etc/default/salt
elif [ -f /etc/sysconfig/salt ]; then
    . /etc/sysconfig/salt
fi

RETVAL=0

ERROR_TO_DEVNULL="/dev/null"


__su_cmd() {
    local user="$1"
    shift

    if [ "X$USER" = "X$user" ]; then
        eval $1
    else
        su -l -c "$1" "$user"
    fi
}


_get_pid() {
    netstat --notrim -ap --protocol=unix 2>$ERROR_TO_DEVNULL \
        | sed -r  -e "\|\s${SOCK_DIR}/minion_event_${MINION_ID_HASH}_pub\.ipc$|"'!d; s|/.*||; s/.*\s//;'
}


_is_running() {
    [ -n "$(_get_pid)" ] && return 0 || return 1
}


_get_salt_config_value() {
    __su_cmd "$MINION_USER" "\"$PYTHON\" \"$SALTCALL\" -c \"$CONFIG_DIR\" --no-color --local config.get \"$1\"" 2>$ERROR_TO_DEVNULL \
        | sed -r -e '2!d; s/^\s*//;'
}


_make_id_hash() {
    # $1 - minion_id
    case "$(_get_salt_config_value hash_type)" in
        (md5) hasher="md5sum";;
        (sha1) hasher="sha1sum";;
        (sha224) hasher="sha224sum";;
        (sha256) hasher="sha256sum";;
        (sha384) hasher="sha384sum";;
        (sha512) hasher="sha512sum";;
    esac

    printf "$1" | "$hasher" | cut -c 1-10
}


start() {
    # $1 - config dir
    local retval=0

    if _is_running; then
        echo $"Service $SERVICE:$MINION_USER:$MINION_ID already running"
        return 1
    fi

    echo -n $"Starting $SERVICE:$MINION_USER:$MINION_ID daemon: "

    __su_cmd "$MINION_USER" "\"$PYTHON\" \"$SALTMINION\" -d $MINION_ARGS >& /dev/null"
    retval=$?

    _count=0
    while ! _is_running; do
        _count=$((_count+1))
        sleep 1
        if [ "$TIMEOUT" -le "$_count" ]; then
            echo -n "TIMEOUT "
            retval=1
            break
        fi
    done

    if [ 0 = "$retval" ]; then
        echo -n "OK"
    else
        echo -n "FAIL"
    fi

    echo
    return $retval
}


stop() {
    # $1 - config dir
    local retval=0

    if ! _is_running; then
        echo $"Service $SERVICE:$MINION_USER:$MINION_ID is not running"
        return 1
    fi
        
    echo -n $"Stopping $SERVICE:$MINION_USER:$MINION_ID daemon: "
    local pid="$(_get_pid)"

    __su_cmd "$MINION_USER" "kill -TERM \"$pid\""
    retval=$?

    _count=0
    while _is_running; do
        _count=$((_count+1))
        sleep 1
        if [ "$TIMEOUT" -le "$_count" ]; then
            echo -n "TIMEOUT "
            retval=1
            break
        fi
    done

    if [ 0 = "$retval" ]; then
        echo -n "OK"
    else
        echo -n "FAIL"
    fi
    echo

    return $retval
}


restart() {
    # $1 - config dir
    stop "$1"
    start "$1"
}


main() {
    if [ -n "$DEBUG" ]; then
        ERROR_TO_DEVNULL="&2"
        set -x
    fi

    # Pre-filter for unhandled commands
    case "$1" in
        (start|stop|status|restart|condrestart|reload) ;;
        (*)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|reload}"
        exit 1
        ;;
    esac

    while read MINION_USER CONFIG_DIR; do
        if [ -z "$CONFIG_DIR" ]; then
            continue
        fi

        if ! [ -d "$CONFIG_DIR" ]; then
            echo "ERROR: non-existent $SERVICE config directory: $CONFIG_DIR"
            RETVAL=1
            continue
        fi

        SOCK_DIR="$(_get_salt_config_value sock_dir)"
        PID_FILE="$(_get_salt_config_value pidfile)"
        MINION_ID="$(_get_salt_config_value id)"
        MINION_ID_HASH="$(_make_id_hash "$MINION_ID")"
        if [ \
            -z "$SOCK_DIR" \
            -o -z "$PID_FILE" \
            -o -z "$MINION_ID" \
            -o -z "$MINION_ID_HASH" \
        ]; then
            echo "ERROR: Unable to look-up config values for $CONFIG_DIR"
            RETVAL=1
        fi

        # See how we were called.
        case "$1" in
            (start|stop|restart)
            "$1" || RETVAL=$?
            ;;
            (status)
            _pid="$(_get_pid)"
            if [ -n "$_pid" ]; then
                echo "$SERVICE:$MINION_USER:$MINION_ID is running: $_pid"
            else
                RETVAL=1
                echo "$SERVICE:$MINION_USER:$MINION_ID is stopped."
            fi
            ;;
            (condrestart)
            if _is_running; then
                stop
                start || RETVAL=$?
            fi
            ;;
            (reload)
            echo "can't reload $SERVICE configuration - you must restart it"
            RETVAL=1
            ;;
            (*)
            echo $"Usage: $0 {start|stop|status|restart|condrestart|reload}"
            exit 1
            ;;
        esac
    done <<EOF
$CONFIGS
EOF

    exit $RETVAL
}


if [ "$#" = 0 ]; then
    main
else
    main "$@"
fi
