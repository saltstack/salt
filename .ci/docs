// Define the maximum time, in hours, that a test run should run for
def global_timeout = 2
def salt_target_branch = 'develop'

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
])

// Be sure to cancel any previously running builds
def buildNumber = env.BUILD_NUMBER as int
if (buildNumber > 1) {
    // This will cancel the previous build which also defined a matching milestone
    milestone(buildNumber - 1)
}
// Define a milestone for this build so that, if another build starts, this one will be aborted
milestone(buildNumber)

node('docs') {
    timeout(time: global_timeout, unit: 'HOURS') {
        ansiColor('xterm') {
            timestamps {
                try {
                    // Checkout the repo
                    stage('checkout-scm') {
                        cleanWs notFailBuild: true
                        checkout scm
                    }

                    // Setup the kitchen required bundle
                    stage('Setup') {
                        sh '''
                        eval "$(pyenv init -)"
                        pyenv --version
                        pyenv install --skip-existing 3.6.8
                        pyenv shell 3.6.8
                        python --version
                        pip install -U nox-py2
                        nox --version
                        '''
                    }

                    stage('Build') {
                        sh '''
                        eval "$(pyenv init -)"
                        pyenv shell 3.6.8
                        nox -e docs
                        '''
                        archiveArtifacts artifacts: 'doc/doc-archive.tar.gz'
                    }
                } catch (Exception e) {
                    currentBuild.result = 'FAILURE'
                    try {
                        slackSend channel: "#jenkins-prod-pr",
                            color: '#FF0000',
                            message: "*${currentBuild.currentResult}*: ${currentBuild.getFullDisplayName()} (<${env.BUILD_URL}|open>)"
                    } catch (Exception e2) {
                        sh 'echo Failed to send the Slack notification'
                    }
                } finally {
                    cleanWs notFailBuild: true
                }
            }
        }
    }
}

// vim: ft=groovy
