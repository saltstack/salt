---
name: Build Windows Packages

on:
  workflow_call:
    inputs:
      salt-version:
        type: string
        required: true
        description: The Salt version to set prior to building packages
      sign-packages:
        type: boolean
        required: false
        default: false
        description: Sign the packages after they are built

jobs:

  build-pkgs:
    name: Windows
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        arch:
          - x86
          - amd64
    runs-on:
      - windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Setup Salt Version
        id: setup-salt-version
        uses: ./.github/actions/setup-salt-version
        with:
          salt-version: "${{ inputs.salt-version }}"

      - name: Download Onedir Tarball as an Artifact
        uses: actions/download-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.zip
          path: artifacts/

      - name: Code signing with Software Trust Manager
        if: ${{ inputs.sign-packages == true }}
        uses: digicert/ssm-code-signing@v0.0.2

      - name: Setup Certificate
        if: ${{ inputs.sign-packages == true }}
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash

      - name: Set Package Signing Paths
        if: ${{ inputs.sign-packages == true }}
        id: variables
        run: |
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash

      - name: Build Windows Packages
        env:
          SIGN_PACKAGES: ${{ inputs.sign-packages }}
          SM_API_KEY: "${{ secrets.SM_API_KEY }}"
        run: |
          tools pkg build windows --onedir salt-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.zip --salt-version ${{ inputs.salt-version }} --arch ${{ matrix.arch }}

      - name: Signing Artifacts
        if: ${{ inputs.sign-packages == true }}
        env:
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_CLIENT_CERT_FILE: "D:\Certificate_pkcs12.p12"
          # Change this to SM_HOST_PROD once we're sure it's working
          SM_HOST: "${{ secrets.SM_HOST_DEMO }}"
          SM_API_KEY: "${{ secrets.SM_API_KEY }}"
          SM_CLIENT_CERT_PASSWORD: "${{ secrets.SM_CLIENT_CERT_PASSWORD }}"
        shell: pwsh
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} `
            /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64-Setup.exe" `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64.msi" `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86-Setup.exe" `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86.msi"

      - name: Verifying Signatures
        if: ${{ inputs.sign-packages == true }}
        shell: pwsh
        run: |
          signtool.exe verify /v /pa `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64-Setup.exe" `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64.msi" `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86-Setup.exe" `
            "pkg\windows\build\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86.msi"

      - name: Upload ${{ matrix.arch }} Packages
        uses: actions/upload-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-${{ matrix.arch }}-NSIS
          path: pkg/windows/build/Salt-*.exe
          retention-days: 7
          if-no-files-found: error

      - name: Upload ${{ matrix.arch }} MSI Package
        uses: actions/upload-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-${{ matrix.arch }}-MSI
          path: pkg/windows/build/Salt-*.msi
          retention-days: 7
          if-no-files-found: error
