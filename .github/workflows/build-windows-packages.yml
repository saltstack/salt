---
name: Build Windows Packages

on:
  workflow_call:
    inputs:
      salt-version:
        type: string
        required: true
        description: The Salt version to set prior to building packages.

jobs:

  build-pkgs:
    name: Windows
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        arch:
          - x86
          - amd64
    runs-on:
      - windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Setup Salt Version
        id: setup-salt-version
        uses: ./.github/actions/setup-salt-version
        with:
          salt-version: "${{ inputs.salt-version }}"

      - name: Download Onedir Tarball as an Artifact
        uses: actions/download-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.zip
          path: artifacts/

      - name: Build Windows Packages
        run: |
          tools pkg build windows --onedir salt-${{ inputs.salt-version }}-onedir-windows-${{ matrix.arch }}.zip --salt-version ${{ inputs.salt-version }} --arch ${{ matrix.arch }}

      - name: Code signing with Software Trust Manager
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        uses: digicert/ssm-code-signing@v0.0.2

      - name: Setup Certificate
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash

      - name: Set variables
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        id: variables
        run: |
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
          echo "SM_HOST=${{ secrets.SM_HOST_DEMO }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash

      - name: Setup SSM KSP on windows latest
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        run: |
          curl -X GET  https://stage.one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /quiet /qn
          smksp_registrar.exe list
          smctl.exe keypair ls
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
          smksp_cert_sync.exe
        shell: cmd

      - name: Signing NSIS Installer using Signtool (AMD64)
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64-Setup.exe"
          signtool.exe verify /v /pa ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64-Setup.exe"

      - name: Signing NSIS Installer using Signtool (x86)
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86-Setup.exe"
          signtool.exe verify /v /pa ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86-Setup.exe"

      - name: Signing MSI Installer using Signtool (AMD64)
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64.msi"
          signtool.exe verify /v /pa ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-AMD64.msi"

      - name: Signing MSI Installer using Signtool (x86)
        if: ${{ startsWith(github.event.ref, 'refs/tags') == true }}
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86.msi"
          signtool.exe verify /v /pa ".\artifacts\Salt-Minion-${{ steps.variables.outputs.version }}-Py3-x86.msi"

      - name: Upload ${{ matrix.arch }} Packages
        uses: actions/upload-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-${{ matrix.arch }}-NSIS
          path: pkg/windows/build/Salt-*.exe
          retention-days: 7
          if-no-files-found: error

      - name: Upload ${{ matrix.arch }} MSI Package
        uses: actions/upload-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-${{ matrix.arch }}-MSI
          path: pkg/windows/build/Salt-*.msi
          retention-days: 7
          if-no-files-found: error
