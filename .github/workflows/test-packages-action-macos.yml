name: Test Artifact

on:
  workflow_call:
    inputs:
      distro-slug:
        required: true
        type: string
        description: The OS slug to run tests against
      platform:
        required: true
        type: string
        description: The platform being tested
      arch:
        required: true
        type: string
        description: The platform arch being tested
      pkg-type:
        required: true
        type: string
        description: The platform arch being tested
      salt-version:
        type: string
        required: true
        description: The Salt version of the packages to install and test
      cache-prefix:
        required: true
        type: string
        description: Seed used to invalidate caches
      python-version:
        required: false
        type: string
        description: The python version to run tests with
        default: "3.10"
      package-name:
        required: false
        type: string
        description: The onedir package name to use
        default: salt
      nox-session:
        required: false
        type: string
        description: The nox session to run
        default: test-pkgs-onedir
      skip-code-coverage:
        required: false
        type: boolean
        description: Skip code coverage
        default: false
      skip-junit-reports:
        required: false
        type: boolean
        description: Skip Publishing JUnit Reports
        default: false


env:
  NOX_VERSION: "2022.8.7"
  COLUMNS: 160
  AWS_MAX_ATTEMPTS: "10"
  AWS_RETRY_MODE: "adaptive"
  PIP_INDEX_URL: https://pypi-proxy.saltstack.net/root/local/+simple/
  PIP_EXTRA_INDEX_URL: https://pypi.org/simple

jobs:

  generate-matrix:
    name: Generate Package Test Matrix
    runs-on: ubuntu-latest
    outputs:
      pkg-matrix-include: ${{ steps.generate-pkg-matrix.outputs.matrix }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Generate Package Test Matrix
        id: generate-pkg-matrix
        run: |
          tools ci pkg-matrix ${{ inputs.distro-slug }} ${{ inputs.pkg-type }}

  dependencies:
    name: Setup Test Dependencies
    needs:
      - generate-matrix
    runs-on: ${{ inputs.distro-slug }}
    timeout-minutes: 90
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Cache nox.${{ inputs.distro-slug }}.tar.* for session ${{ inputs.nox-session }}
        id: nox-dependencies-cache
        uses: actions/cache@v3
        with:
          path: nox.${{ inputs.distro-slug }}.tar.*
          key: ${{ inputs.cache-prefix }}|testrun-deps|${{ inputs.distro-slug }}|${{ inputs.nox-session }}|${{ hashFiles('requirements/**/*.txt', 'cicd/golden-images.json') }}

      - name: Download Onedir Tarball as an Artifact
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-${{ inputs.platform }}-${{ inputs.arch }}.tar.xz
          path: artifacts/

      - name: Decompress Onedir Tarball
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python3 -c "import os; os.makedirs('artifacts', exist_ok=True)"
          cd artifacts
          tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-${{ inputs.platform }}-${{ inputs.arch }}.tar.xz

      - name: Set up Python ${{ inputs.python-version }}
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Install System Dependencies
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          brew install openssl@3

      - name: Install Nox
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          python3 -m pip install 'nox==${{ env.NOX_VERSION }}'

      - name: Install Dependencies
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        env:
          PRINT_TEST_SELECTION: "0"
          PRINT_SYSTEM_INFO: "0"
        run: |
          export PYCURL_SSL_LIBRARY=openssl
          export LDFLAGS="-L/usr/local/opt/openssl@3/lib"
          export CPPFLAGS="-I/usr/local/opt/openssl@3/include"
          export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"
          nox --force-color --install-only -e ${{ inputs.nox-session }}

      - name: Cleanup .nox Directory
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          nox --force-color -e "pre-archive-cleanup(pkg=False)"

      - name: Compress .nox Directory
        if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          nox --force-color -e compress-dependencies -- ${{ inputs.distro-slug }}

      - name: Upload Nox Requirements Tarball
        uses: actions/upload-artifact@v3
        with:
          name: nox-${{ inputs.distro-slug }}-${{ inputs.nox-session }}
          path: nox.${{ inputs.distro-slug }}.tar.*

  test:
    name: Test
    runs-on: ${{ inputs.distro-slug }}
    timeout-minutes: 120  # 2 Hours - More than this and something is wrong
    needs:
      - dependencies
      - generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.pkg-matrix-include) }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Download Packages
        uses: actions/download-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}-${{ inputs.arch }}-${{ inputs.pkg-type }}
          path: pkg/artifacts/

      - name: Install System Dependencies
        run: |
          brew install tree

      - name: List Packages
        run: |
          tree pkg/artifacts

      - name: Download Onedir Tarball as an Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-${{ inputs.platform }}-${{ inputs.arch }}.tar.xz
          path: artifacts/

      - name: Decompress Onedir Tarball
        shell: bash
        run: |
          python3 -c "import os; os.makedirs('artifacts', exist_ok=True)"
          cd artifacts
          tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-${{ inputs.platform }}-${{ inputs.arch }}.tar.xz

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Install Nox
        run: |
          python3 -m pip install 'nox==${{ env.NOX_VERSION }}'

      - name: Download cached nox.${{ inputs.distro-slug }}.tar.* for session ${{ inputs.nox-session }}
        uses: actions/cache@v3
        with:
          path: nox.${{ inputs.distro-slug }}.tar.*
          key: ${{ inputs.cache-prefix }}|testrun-deps|${{ inputs.distro-slug }}|${{ inputs.nox-session }}|${{ hashFiles('requirements/**/*.txt', 'cicd/golden-images.json') }}

      - name: Decompress .nox Directory
        run: |
          nox --force-color -e decompress-dependencies -- ${{ inputs.distro-slug }}

      - name: Show System Info & Test Plan
        env:
          SKIP_REQUIREMENTS_INSTALL: "1"
          PRINT_TEST_SELECTION: "1"
          PRINT_TEST_PLAN_ONLY: "1"
          PRINT_SYSTEM_INFO: "1"
          GITHUB_ACTIONS_PIPELINE: "1"
          SKIP_INITIAL_GH_ACTIONS_FAILURES: "1"
        run: |
          sudo -E nox --force-color -e ${{ inputs.nox-session }} -- ${{ matrix.test-chunk }}

      - name: Run Package Tests
        env:
          SKIP_REQUIREMENTS_INSTALL: "1"
          PRINT_TEST_SELECTION: "0"
          PRINT_TEST_PLAN_ONLY: "0"
          PRINT_SYSTEM_INFO: "0"
          RERUN_FAILURES: "1"
          GITHUB_ACTIONS_PIPELINE: "1"
          SKIP_INITIAL_GH_ACTIONS_FAILURES: "1"
        run: |
          sudo -E nox --force-color -e ${{ inputs.nox-session }} -- ${{ matrix.test-chunk }}

      - name: Fix file ownership
        run: |
          sudo chown -R "$(id -un)" .

      - name: Prepare Test Run Artifacts
        id: download-artifacts-from-vm
        if: always() && job.status != 'cancelled'
        run: |
          # Delete the salt onedir, we won't need it anymore and it will prevent
          # from it showing in the tree command below
          rm -rf artifacts/salt*
          tree -a artifacts

      - name: Upload Test Run Artifacts
        if: always() && job.status != 'cancelled'
        uses: actions/upload-artifact@v3
        with:
          name: pkg-testrun-artifacts-${{ inputs.distro-slug }}-${{ matrix.test-chunk }}
          path: |
            artifacts
            !artifacts/salt/*
            !artifacts/salt-*.tar.*

  report:
    name: Reports for ${{ inputs.distro-slug }}(${{ matrix.test-chunk }})
    runs-on: ubuntu-latest
    if: always() && (inputs.skip-code-coverage == false || inputs.skip-junit-reports == false) && needs.test.result != 'cancelled' && needs.test.result != 'skipped'
    needs:
      - test
      - generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.pkg-matrix-include) }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Download Test Run Artifacts
        id: download-test-run-artifacts
        uses: actions/download-artifact@v3
        with:
          name: pkg-testrun-artifacts-${{ inputs.distro-slug }}-${{ matrix.test-chunk }}
          path: artifacts

      - name: Show Test Run Artifacts
        if: always() && steps.download-test-run-artifacts.outcome == 'success'
        run: |
          tree -a artifacts

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python-version }}"

      - name: Install Nox
        run: |
          python3 -m pip install 'nox==${{ env.NOX_VERSION }}'

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        # always run even if the previous steps fails
        if: always() && inputs.skip-junit-reports == false && steps.download-test-run-artifacts.outcome == 'success'
        with:
          check_name: Overall Test Results(${{ inputs.distro-slug }} ${{ matrix.test-chunk }})
          report_paths: 'artifacts/xml-unittests-output/*.xml'
          annotate_only: true
