# -*- coding: utf-8 -*-
'''
    :codeauthor: :email:`Thayne Harbaugh (tharbaug@adobe.com)`

    tests.integration.shell.saltcli
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    :NOTE: this was named ``saltcli`` rather than ``salt`` because ``salt`` conflates
           in the python importer with the expected ``salt`` namespace and breaks imports.
'''

# Import python libs
from __future__ import absolute_import
import logging
import os

# Import Salt Testing libs
from salttesting.helpers import ensure_in_syspath
ensure_in_syspath('../../')

# Import salt libs
import integration
from integration.utils import testprogram
from salt.defaults import exitcodes


log = logging.getLogger(__name__)


class SaltTest(testprogram.TestProgramCase):
    '''
    Various integration tests for the `salt` command line executable.
    '''

    # pylint: disable=invalid-name
    def test_exit_status_unknown_argument(self):
        '''
        Ensure correct exit status when an unknown argument is passed to salt-run.
        '''

        saltcli = testprogram.TestProgramSalt(
            name='run-unknown_argument',
        )
        # Call setup here to ensure config and script exist
        saltcli.setup()
        stdout, stderr, status = saltcli.run(
            args=['--unknown-argument'],
            catch_stderr=True,
            with_retcode=True,
        )
        self.assert_exit_status(
            status, 'EX_USAGE',
            message='unknown argument',
            stdout=stdout, stderr=stderr
        )
        saltcli.cleanup()

    def test_exit_status_correct_usage(self):
        '''
        Ensure correct exit status when salt-run starts correctly.
        '''

        saltcli = testprogram.TestProgramSalt(
            name='run-correct_usage',
        )
        # Call setup here to ensure config and script exist
        saltcli.setup()
        stdout, stderr, status = saltcli.run(
            args=['*', '-h'],
            catch_stderr=True,
            with_retcode=True,
        )
        self.assert_exit_status(
            status, 'EX_OK',
            message='correct usage',
            stdout=stdout, stderr=stderr
        )
        saltcli.cleanup()

    def _setup(self, name, minions, port=9707):
        '''Re-usable setup for running salt-minion tests'''

        saltcli = testprogram.TestProgramSalt(
            name=name,
            root_dir=name,
            parent_dir=self._test_dir,
            configs={},  # already generated by the master
        )
        # Call setup here to ensure config and script exist
        saltcli.setup()

        master = testprogram.TestDaemonSaltMaster(
            name=name,
            root_dir=name,
            parent_dir=self._test_dir,
            configs={
                'master': {
                    'map': {
                        'publish_port': port-1,
                        'ret_port': port,
                        'auto_accept': True,
                    },
                },
            },
            dirtree=[os.path.join('var', 'cache', 'salt', 'master')],
        )
        master.setup()
        master.run(args=['-d', '-l', 'debug'], catch_stderr=True, with_retcode=True)
        master.is_running()

        _minions = []
        for mname in minions:
            pid_file = 'salt-{0}.pid'.format(mname)
            minion = testprogram.TestDaemonSaltMinion(
                name=mname,
                root_dir=name,
                config_dir=os.path.join('etc', mname),
                parent_dir=self._test_dir,
                pid_file=pid_file,
                configs={
                    'minion': {
                        'map': {
                            'pidfile': os.path.join('var', 'run', pid_file),
                            'sock_dir': os.path.join('var', 'run', 'salt', mname),
                            'log_file': os.path.join('var', 'log', 'salt', mname),
                            'master_port': str(port),
                            'master': 'localhost',
                        },
                    },
                },
            )
            # Call setup here to ensure config and script exist
            minion.setup()
            minion.run(args=['-d', '-l', 'debug'], catch_stderr=True, with_retcode=True)
            _minions.append(minion)

        return saltcli, master, _minions

    def _shutdown(self, saltcli, master, minions):
        '''Compliment to `_setup()`'''
        for minion in minions:
            minion.shutdown()
        master.shutdown()
        saltcli.cleanup()

    def test_exit_status_retcode_passthrough(self):
        '''
        Ensure that the salt CLI exits with the retcode of the remote command.
        '''

        _test_minions = (
            'minion',
            'subminion',
        )

        saltcli, master, minions = self._setup('run-retcode_passthrough', _test_minions)

        for excode in ('EX_OK', 'EX_GENERIC', 'SALT_BUILD_FAIL'):
            exval = getattr(exitcodes, excode)

            # Test with --retcode-passthrough
            stdout, stderr, status = saltcli.run(
                args=['--retcode-passthrough', '-l', 'debug', '*', 'test.retcode', '{0}'.format(exval)],
                catch_stderr=True,
                with_retcode=True,
            )
            self.assert_exit_status(
                status, excode,
                message='Test: --retcode-passthrough test.retcode {0}({1})'.format(excode, exval),
                stdout=stdout, stderr=stderr
            )

            # Test with --retcode-passthrough - which should always result in EX_OK
            stdout, stderr, status = saltcli.run(
                args=['--cli-retcode', '-l', 'debug', '*', 'test.retcode', '{0}'.format(exval)],
                catch_stderr=True,
                with_retcode=True,
            )
            self.assert_exit_status(
                status, 'EX_OK',
                message='Test: --cli-retcode test.retcode {0}({1})'.format('EX_OK', exitcodes.EX_OK),
                stdout=stdout, stderr=stderr
            )
        self._shutdown(saltcli, master, minions)


if __name__ == '__main__':
    integration.run_tests(SaltTest)
