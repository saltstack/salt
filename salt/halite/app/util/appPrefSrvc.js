// Generated by CoffeeScript 1.6.3
/*
Application Preferences Service
Uses LocalStore Service which uses html5 localStorage to persitently store
    on client browser computer the preferences
    

mainApp = angular.module("MainApp", [... 'appPrefSrvc'])


mainApp.controller 'MyCtlr', ['$scope', ...,'AppPref',
    ($scope,...,AppPrefs) ->
    
    $scope.appPrefs = AppPref.getAll()
    $scope.saltApi = AppPref.get('saltApi')
    
    AppPref.set
        saltApi: 
            scheme: "http"
            host: "localhost"
            port: "8100"
            prefix: ""
*/


(function() {
  angular.module("appPrefSrvc", ['appConfigSrvc', 'appStoreSrvc']).factory("AppPref", [
    'Configuration', 'LocalStore', function(Configuration, LocalStore) {
      var servicer;
      servicer = {
        getAll: function() {
          var prefs;
          prefs = LocalStore.get('preferences');
          if (prefs) {
            return prefs;
          } else {
            return {};
          }
        },
        setAll: function(prefs) {
          LocalStore.set('preferences', prefs);
          return prefs;
        },
        get: function(key) {
          var prefs;
          prefs = this.getAll();
          return prefs != null ? prefs[key] : void 0;
        },
        set: function(key, val) {
          var prefs;
          prefs = this.getAll();
          prefs[key] = val;
          this.setAll(prefs);
          return prefs;
        },
        load: function(prefs, config) {
          var key, val;
          for (key in config) {
            val = config[key];
            if ((prefs != null ? prefs[key] : void 0) == null) {
              prefs[key] = val;
            } else if (angular.isObject(val)) {
              this.load(prefs[key], val);
            }
          }
          this.setAll(prefs);
          return prefs;
        },
        reload: function() {
          this.load(this.getAll(), Configuration.preferences);
          return this.getAll();
        },
        clear: function() {
          return LocalStore.set('preferences', {});
        }
      };
      servicer.reload();
      return servicer;
    }
  ]);

}).call(this);
