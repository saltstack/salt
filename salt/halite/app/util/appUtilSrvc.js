// Generated by CoffeeScript 1.6.3
/*
Generic app utility services

OrdereMap service return new instance of OMap
*/


(function() {
  var Bosser, Commander, Item, Itemizer, Jobber, Minioner, Orderer, Resulter, Runner, Wheeler, appUtilSrvc, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  appUtilSrvc = angular.module("appUtilSrvc", []);

  /*
  Item class used as item for Itemizer
  Creates object of form { key: key, val: val}
  */


  Item = (function() {
    function Item(key, val) {
      this.key = key;
      this.val = val;
    }

    return Item;

  })();

  appUtilSrvc.value("Item", Item);

  /*
  Itemizer class  used to provide ordered data object with keyed lookup
  and also provides item list that is suitable for angular ng-repeat scoping.
  Each item in an Itemizer instance is an Item object of the form:
  { "key": key, "val": val}
  Items can be accessed by item key but the order of entry or sort is preserved.
  
  Since each item is not a primitive type but an object, ng-repeat will be
  able to reference it as a model target.
  
  Angular 1.15+ provides the ng-repeat 
  which means one does not need the itemizations for ng-repeating but angular sort
  only works on arrays to need items list for that. Also angular filter string will
  work on nested itemizers but not itemizer with not itemizer values.
  */


  Itemizer = (function() {
    function Itemizer(stuff, deep) {
      this._data = {};
      this._keys = [];
      this.update(stuff, deep);
      return this;
    }

    Itemizer.prototype.get = function(key, tag) {
      var _ref, _ref1;
      if (tag) {
        return (_ref = this._data[key]) != null ? _ref.val[tag] : void 0;
      } else {
        return (_ref1 = this._data[key]) != null ? _ref1.val : void 0;
      }
    };

    Itemizer.prototype.getItem = function(key) {
      return this._data[key];
    };

    Itemizer.prototype.set = function(key, val, tag) {
      if (__indexOf.call(this._keys, key) >= 0) {
        if (tag) {
          this._data[key].val[tag] = val;
        } else {
          this._data[key].val = val;
        }
      } else {
        this._keys.push(key);
        if (tag) {
          this._data[key] = new Item(key, {});
          this._data[key].val[tag] = val;
        } else {
          this._data[key] = new Item(key, val);
        }
      }
      return this;
    };

    Itemizer.prototype._isItem = function(item) {
      if (item instanceof Item) {
        return true;
      }
      if (angular.isObject(item) && !angular.isArray(item) && "key" in item && "val" in item) {
        return true;
      }
      return false;
    };

    Itemizer.prototype._isItemList = function(items) {
      var item, _i, _len;
      if (!angular.isArray(items)) {
        return false;
      }
      if (!items.length) {
        return false;
      }
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (!this._isItem(item)) {
          return false;
        }
      }
      return true;
    };

    Itemizer.prototype.deepSet = function(key, val, update) {
      var item, itemizer, k, v, _i, _len, _ref;
      itemizer = (_ref = this._data[key]) != null ? _ref.val : void 0;
      if (this._isItemList(val)) {
        if (!(itemizer instanceof Itemizer) || !update) {
          itemizer = new Itemizer;
          this.set(key, itemizer);
        }
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          item = val[_i];
          itemizer.deepSet(item.key, item.val, update);
        }
      } else if (angular.isObject(val) && !angular.isArray(val)) {
        if (!(itemizer instanceof Itemizer) || !update) {
          itemizer = new Itemizer();
          this.set(key, itemizer);
        }
        for (k in val) {
          if (!__hasProp.call(val, k)) continue;
          v = val[k];
          itemizer.deepSet(k, v, update);
        }
      } else {
        this.set(key, val);
      }
      return this;
    };

    Itemizer.prototype.del = function(key, tag) {
      var _key;
      if (__indexOf.call(this._keys, key) >= 0) {
        if (tag) {
          delete this._data[key].val[tag];
        } else {
          this._keys = (function() {
            var _i, _len, _ref, _results;
            _ref = this._keys;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _key = _ref[_i];
              if (_key !== key) {
                _results.push(_key);
              }
            }
            return _results;
          }).call(this);
          delete this._data[key];
        }
      }
      return this;
    };

    Itemizer.prototype.clear = function() {
      this._data = {};
      this._keys = [];
      return this;
    };

    Itemizer.prototype.items = function(deep) {
      var items, key, _i, _len, _ref;
      items = [];
      _ref = this._keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (deep && (this._data[key].val instanceof Itemizer)) {
          items.push(new Item(key, this._data[key].val.items(deep)));
        } else {
          items.push(this._data[key]);
        }
      }
      return items;
    };

    Itemizer.prototype.keys = function() {
      return this._keys;
    };

    Itemizer.prototype.values = function() {
      var key;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this._keys;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(this._data[key].val);
        }
        return _results;
      }).call(this);
    };

    Itemizer.prototype.sort = function(sorter, deep) {
      var key, _i, _len, _ref;
      if (sorter == null) {
        return this._keys;
      }
      this._keys.sort(sorter);
      if (deep) {
        _ref = this._keys;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          if (this._data[key].val instanceof Itemizer) {
            this._data[key].val.sort(sorter, deep);
          }
        }
      }
      return this._keys;
    };

    Itemizer.prototype.update = function(stuff, deep) {
      var item, key, val, _i, _len;
      if (stuff != null) {
        if (this._isItemList(stuff)) {
          for (_i = 0, _len = stuff.length; _i < _len; _i++) {
            item = stuff[_i];
            if (deep) {
              this.deepSet(item.key, item.val, true);
            } else {
              this.set(item.key, item.val);
            }
          }
        } else if (angular.isObject(stuff) && !angular.isArray(stuff)) {
          for (key in stuff) {
            if (!__hasProp.call(stuff, key)) continue;
            val = stuff[key];
            if (deep) {
              this.deepSet(key, val, true);
            } else {
              this.set(key, val);
            }
          }
        }
      }
      return this;
    };

    Itemizer.prototype.reload = function(stuff, deep) {
      this.clear();
      this.update(stuff, deep);
      return this;
    };

    Itemizer.prototype.unitemize = function() {
      var data, item, _i, _len, _ref;
      data = {};
      _ref = this.items();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.val instanceof Itemizer) {
          data[item.key] = item.val.unitemize();
        } else {
          data[item.key] = item.val;
        }
      }
      return data;
    };

    Itemizer.prototype.filter = function(keys) {
      var key, _i, _key, _len, _ref;
      _ref = this._keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (__indexOf.call(keys, key) < 0) {
          delete this._data[key];
        }
      }
      this._keys = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = this._keys;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          _key = _ref1[_j];
          if (__indexOf.call(keys, _key) >= 0) {
            _results.push(_key);
          }
        }
        return _results;
      }).call(this);
      return this;
    };

    return Itemizer;

  })();

  appUtilSrvc.value("Itemizer", Itemizer);

  Minioner = (function() {
    function Minioner(id) {
      this.id = id;
      this.active = false;
      this.grains = new Itemizer();
      this.jobs = new Itemizer();
      this.events = new Itemizer();
      return this;
    }

    Minioner.prototype.activize = function() {
      this.active = true;
      return this;
    };

    Minioner.prototype.deactivize = function() {
      this.active = false;
      return this;
    };

    Minioner.prototype.grainize = function(grains, update) {
      this.grains.deepSet(grains, update);
      return this;
    };

    Minioner.prototype.unlinkJobs = function() {
      var job, _i, _len, _ref;
      _ref = this.jobs.values();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        job = _ref[_i];
        job.minions.del(this.id);
      }
      this.jobs.clear();
      return this;
    };

    Minioner.prototype.processEvent = function(edata) {
      this.events.set(edata.tag, edata);
      return this;
    };

    return Minioner;

  })();

  appUtilSrvc.value("Minioner", Minioner);

  Resulter = (function() {
    function Resulter(id) {
      this.id = id;
      this.reset();
      return this;
    }

    Resulter.prototype.reset = function() {
      this.active = null;
      this.done = false;
      this.fail = true;
      this.error = '';
      this.success = false;
      this["return"] = null;
      this.retcode = null;
      return this;
    };

    Resulter.prototype.mode = function() {
      if (!((this["return"] != null) || this.error)) {
        return '';
      }
      if (this.error) {
        return 'error';
      }
      return 'return';
    };

    Resulter.prototype.results = function() {
      if (!((this["return"] != null) || this.error)) {
        return [];
      }
      if (this.error) {
        return [this.error];
      }
      return [this["return"]];
    };

    return Resulter;

  })();

  appUtilSrvc.value("Resulter", Resulter);

  Jobber = (function() {
    function Jobber(jid, cmd, mids) {
      var mid, _i, _len;
      this.jid = jid;
      this.cmd = cmd;
      if (mids == null) {
        mids = [];
      }
      this.name = this.humanize(this.cmd);
      this.fail = true;
      this.errors = [];
      this.done = false;
      this.defer = null;
      this.promise = null;
      this.events = new Itemizer();
      this.results = new Itemizer();
      this.minions = new Itemizer();
      for (_i = 0, _len = mids.length; _i < _len; _i++) {
        mid = mids[_i];
        this.results.set(mid, new Resulter(mid));
      }
      return this;
    }

    Jobber.prototype.commit = function($q) {
      if (this.defer == null) {
        this.defer = $q.defer();
        this.promise = this.defer.promise;
      }
      return this.promise;
    };

    Jobber.prototype.initResults = function(mids) {
      var mid, _i, _len;
      if (mids == null) {
        mids = [];
      }
      for (_i = 0, _len = mids.length; _i < _len; _i++) {
        mid = mids[_i];
        if (this.results.get(mid) == null) {
          this.results.set(mid, new Resulter(mid));
        }
      }
      return this;
    };

    Jobber.prototype.humanize = function(cmd) {
      var part;
      if (!cmd) {
        cmd = this.cmd;
      }
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = [cmd.fun, cmd.tgt].concat(cmd.arg);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          if ((part != null) && part !== '') {
            _results.push(part);
          }
        }
        return _results;
      })()).join(' ').trim();
    };

    Jobber.prototype.checkDone = function() {
      var result, _ref, _ref1;
      this.done = _((function() {
        var _i, _len, _ref, _results;
        _ref = this.results.values();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          if (result.active !== false) {
            _results.push(result.done);
          }
        }
        return _results;
      }).call(this)).all();
      if (!this.done) {
        return false;
      }
      this.fail = _((function() {
        var _i, _len, _ref, _results;
        _ref = this.results.values();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          if (result.active && result.done) {
            _results.push(result.fail);
          }
        }
        return _results;
      }).call(this)).any();
      if (this.errors.length > 0) {
        if ((_ref = this.defer) != null) {
          _ref.reject(this.errors);
        }
      } else {
        if ((_ref1 = this.defer) != null) {
          _ref1.resolve(this);
        }
      }
      this.defer = null;
      this.promise = null;
      return true;
    };

    Jobber.prototype.linkMinion = function(minion) {
      minion.jobs.set(this.jid, this);
      this.minions.set(minion.id, minion);
      return this;
    };

    Jobber.prototype.unlinkMinion = function(mid) {
      var minion;
      minion = this.minions.get(mid);
      this.minions.del(mid);
      if (minion != null) {
        minion.get('jobs').del(this.jid);
      }
      return this;
    };

    Jobber.prototype.processEvent = function(edata) {
      this.events.set(edata.tag, edata);
      return this;
    };

    Jobber.prototype.processNewEvent = function(data) {
      this.initResults(data.minions);
      this.cmd = {
        mode: 'async',
        fun: data.fun,
        tgt: data.tgt,
        arg: data.arg
      };
      return this;
    };

    Jobber.prototype.processRetEvent = function(data) {
      var mid, result;
      mid = data.id;
      if (this.results.get(mid) == null) {
        this.results.set(mid, new Resulter(mid));
      }
      result = this.results.get(mid);
      result['done'] = true;
      result['active'] = true;
      result['success'] = data.success;
      if (data.success === true) {
        result['retcode'] = data.retcode;
      }
      if (data.success === true) {
        if (data.retcode === 0) {
          result['return'] = data["return"];
          result['fail'] = false;
        } else {
          result['error'] = "Error retcode = " + data.retcode;
          this.errors.push(result['error']);
        }
      } else {
        result['error'] = data["return"];
        this.errors.push(result['error']);
      }
      return this;
    };

    return Jobber;

  })();

  appUtilSrvc.value("Jobber", Jobber);

  Bosser = (function(_super) {
    __extends(Bosser, _super);

    function Bosser(jid, cmd) {
      this.jid = jid;
      this.cmd = cmd;
      Bosser.__super__.constructor.call(this, jid, cmd, ['master']);
      return this;
    }

    Bosser.prototype.processNewEvent = function(data) {
      console.log("Run/Wheel New Event");
      console.log(data);
      this.initResults(data.minions);
      this.cmd = {
        mode: 'async',
        fun: data.fun
      };
      if (data.tgt) {
        this.cmd['tgt'] = data.tgt;
      }
      if (data.arg) {
        this.cmd['arg'] = data.arg;
      }
      return this;
    };

    Bosser.prototype.processRetEvent = function(data) {
      var result, _ref, _ref1;
      console.log("Run/Wheel Ret Event");
      console.log(data);
      result = this.results.get('master');
      result.done = true;
      this.done = true;
      result.success = data.success;
      result.fail = !result.success;
      this.fail = result.fail;
      if (result.success === true) {
        result["return"] = data.ret;
      } else {
        result.error = data.ret;
        this.errors.push(data.ret);
      }
      console.log("Run/Wheel Done. Fail = " + this.fail);
      console.log(this);
      if (this.errors.length > 0) {
        if ((_ref = this.defer) != null) {
          _ref.reject(this.errors);
        }
      } else {
        if ((_ref1 = this.defer) != null) {
          _ref1.resolve(this);
        }
      }
      this.defer = null;
      this.promise = null;
      return this;
    };

    return Bosser;

  })(Jobber);

  Runner = (function(_super) {
    __extends(Runner, _super);

    function Runner() {
      _ref = Runner.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Runner;

  })(Bosser);

  appUtilSrvc.value("Runner", Runner);

  Wheeler = (function(_super) {
    __extends(Wheeler, _super);

    function Wheeler() {
      _ref1 = Wheeler.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Wheeler;

  })(Bosser);

  appUtilSrvc.value("Wheeler", Wheeler);

  Commander = (function() {
    function Commander(name, cmds) {
      this.name = name;
      this.cmds = cmds;
      this.jobs = new Itemizer();
      return this;
    }

    return Commander;

  })();

  appUtilSrvc.value("Commander", Commander);

  /*
  Orderer class  used to provide ordered data object with keyed lookup
  Entries can be accessed by key but the order of entry or sort is preserved.
  
  Orderer instances  can by used with Angular 1.15+  ng-repeat track by 
  functions to guarantee display order when iterating over object properties
  such as
  <div ng-repeat="key in orderer.keys "
      ng-model="orderer.data[key]">
      
  or if values are objects
  
  <div ng-repeat="value in orderer.values() track by index"
      ng-model="value">
  */


  Orderer = (function() {
    function Orderer(stuff, deep) {
      this.data = {};
      this.keys = [];
      this.update(stuff, deep);
    }

    Orderer.prototype.get = function(key, tag) {
      var _ref2;
      if (tag) {
        return (_ref2 = this.data[key]) != null ? _ref2[tag] : void 0;
      } else {
        return this.data[key];
      }
    };

    Orderer.prototype.set = function(key, val, tag) {
      if (__indexOf.call(this.keys, key) >= 0) {
        if (tag) {
          this.data[key][tag] = val;
        } else {
          this.data[key] = val;
        }
      } else {
        this.keys.push(key);
        if (tag) {
          this.data[key] = {};
          this.data[key][tag] = val;
        } else {
          this.data[key] = val;
        }
      }
      return this;
    };

    Orderer.prototype._isItem = function(item) {
      if (item instanceof Item) {
        return true;
      }
      if (angular.isObject(item) && !angular.isArray(item) && "key" in item && "val" in item) {
        return true;
      }
      return false;
    };

    Orderer.prototype._isItemList = function(items) {
      var item, _i, _len;
      if (!angular.isArray(items)) {
        return false;
      }
      if (!items.length) {
        return false;
      }
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (!this._isItem(item)) {
          return false;
        }
      }
      return true;
    };

    Orderer.prototype.deepSet = function(key, val, update) {
      var item, k, orderer, v, _i, _len;
      orderer = this.data[key];
      if (this._isItemList(val)) {
        if (!(orderer instanceof Orderer) || !update) {
          orderer = new Orderer;
          this.set(key, orderer);
        }
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          item = val[_i];
          orderer.deepSet(item.key, item.val, update);
        }
      } else if (angular.isObject(val) && !angular.isArray(val)) {
        if (!(orderer instanceof Orderer) || !update) {
          orderer = new Orderer();
          this.set(key, orderer);
        }
        for (k in val) {
          if (!__hasProp.call(val, k)) continue;
          v = val[k];
          orderer.deepSet(k, v, update);
        }
      } else {
        this.set(key, val);
      }
      return this;
    };

    Orderer.prototype.del = function(key, tag) {
      var _key;
      if (__indexOf.call(this.keys, key) >= 0) {
        if (tag) {
          delete this.data[key].val[tag];
        } else {
          this.keys = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = this.keys;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              _key = _ref2[_i];
              if (_key !== key) {
                _results.push(_key);
              }
            }
            return _results;
          }).call(this);
          delete this.data[key];
        }
      }
      return this;
    };

    Orderer.prototype.clear = function() {
      this.data = {};
      this.keys = [];
      return this;
    };

    Orderer.prototype.items = function(deep) {
      var items, key, _i, _len, _ref2;
      items = [];
      _ref2 = this.keys;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        key = _ref2[_i];
        if (deep && (this.data[key] instanceof Orderer)) {
          items.push(new Item(key, this.data[key].items(deep)));
        } else {
          items.push(new Item(key, this.data[key]));
        }
      }
      return items;
    };

    Orderer.prototype.values = function() {
      var key;
      return (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.keys;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          key = _ref2[_i];
          _results.push(this.data[key]);
        }
        return _results;
      }).call(this);
    };

    Orderer.prototype.sort = function(sorter, deep) {
      var key, _i, _len, _ref2;
      if (sorter == null) {
        return this._keys;
      }
      this.keys.sort(sorter);
      if (deep) {
        _ref2 = this.keys;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          key = _ref2[_i];
          if (this.data[key] instanceof Orderer) {
            this.data[key].sort(sorter, deep);
          }
        }
      }
      return this.keys;
    };

    Orderer.prototype.update = function(stuff, deep) {
      var item, key, val, _i, _len;
      if (stuff != null) {
        if (this._isItemList(stuff)) {
          for (_i = 0, _len = stuff.length; _i < _len; _i++) {
            item = stuff[_i];
            if (deep) {
              this.deepSet(item.key, item.val, true);
            } else {
              this.set(item.key, item.val);
            }
          }
        } else if (angular.isObject(stuff) && !angular.isArray(stuff)) {
          for (key in stuff) {
            if (!__hasProp.call(stuff, key)) continue;
            val = stuff[key];
            if (deep) {
              this.deepSet(key, val, true);
            } else {
              this.set(key, val);
            }
          }
        }
      }
      return this;
    };

    Orderer.prototype.reload = function(stuff, deep) {
      this.clear();
      this.update(stuff, deep);
      return this;
    };

    Orderer.prototype.unorder = function() {
      var data, key, _i, _len, _ref2;
      data = {};
      _ref2 = this.keys;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        key = _ref2[_i];
        if (this.data[key] instanceof Orderer) {
          data[key] = this.data[key].unorder();
        } else {
          data[key] = this.data[key];
        }
      }
      return data;
    };

    Orderer.prototype.filter = function(keys) {
      var key, _i, _key, _len, _ref2;
      _ref2 = this.keys;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        key = _ref2[_i];
        if (__indexOf.call(keys, key) < 0) {
          delete this.data[key];
        }
      }
      this.keys = (function() {
        var _j, _len1, _ref3, _results;
        _ref3 = this.keys;
        _results = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          _key = _ref3[_j];
          if (__indexOf.call(keys, _key) >= 0) {
            _results.push(_key);
          }
        }
        return _results;
      }).call(this);
      return this;
    };

    return Orderer;

  })();

  appUtilSrvc.value("Orderer", Orderer);

}).call(this);
