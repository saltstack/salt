// Generated by CoffeeScript 1.6.3
/*
Persistent Data Service using Web Storage LocalStorage and SessionStorage
Each is given a different factory.

Provides shared global application persistent data

.set  applys JSON.stringify to its val so that objects can be stored
.get  applys JSON.parse to to its return to inverse set

If the value is a string then the other forms 
.store.keystring
.store['keystring']
to get an set values

usage:

mainApp = angular.module("MainApp", [... 'appStoreSrvc'])


mainApp.controller 'MyCtlr', ['$scope', ...,'LocalStore',
    ($scope,...,LocalStore) ->
    
    if LocalStore.exists()
        LocalStore.store.first = "John"
        $scope.first = LocalStore.store.first
        LocalStore.set('last', "Smith")
        $scope.last = LocalStore.get('last')
    
Simailarly for SessionStore
*/


(function() {
  angular.module("appStoreSrvc", []).factory("LocalStore", function() {
    var servicer;
    servicer = {
      store: localStorage,
      exists: function() {
        return typeof localStorage !== "undefined" && localStorage !== null;
      },
      clear: function() {
        return localStorage.clear();
      },
      len: function() {
        return localStorage.length;
      },
      key: function(index) {
        return localStorage.key(index);
      },
      get: function(key) {
        return angular.fromJson(localStorage.getItem(key));
      },
      set: function(key, val) {
        return localStorage.setItem(key, angular.toJson(val));
      },
      remove: function(key) {
        return localStorage.removeItem(key);
      }
    };
    return servicer;
  }).factory("SessionStore", function() {
    var servicer;
    servicer = {
      store: sessionStorage,
      exists: function() {
        return typeof sessionStorage !== "undefined" && sessionStorage !== null;
      },
      clear: function() {
        return sessionStorage.clear();
      },
      len: function() {
        return sessionStorage.length;
      },
      key: function(index) {
        return sessionStorage.key(index);
      },
      get: function(key) {
        return angular.fromJson(sessionStorage.getItem(key));
      },
      set: function(key, val) {
        return sessionStorage.setItem(key, angular.toJson(val));
      },
      remove: function(key) {
        return sessionStorage.removeItem(key);
      }
    };
    return servicer;
  });

}).call(this);
