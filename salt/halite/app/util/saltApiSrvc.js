// Generated by CoffeeScript 1.6.3
/*
usage:

mainApp = angular.module("MainApp", [... 'saltApiSrvc'])


mainApp.controller 'MyCtlr', ['$scope', ...,'SaltApiSrvc',
    ($scope,...,SaltApiSrvc) ->

    $scope.saltApiCallPromise = SaltApiSrvc.act $scope, [{'name':'John'}]
    $scope.saltApiCallPromise.success (data, status, headers, config) ->
        console.log("SaltApi call success")
        $scope.result = data
        return true

    $scope.saltApiLoginPromise = SaltApiSrvc.login $scope, 'usernamestring', 'passwordstring'
    $scope.saltApiLoginPromise.success (data, status, headers, config) ->
        console.log("SaltApi login success")
        $scope.result = data
        return true
*/


(function() {
  var saltApiSrvc;

  saltApiSrvc = angular.module("saltApiSrvc", ['appConfigSrvc', 'appPrefSrvc', 'appStoreSrvc']);

  saltApiSrvc.factory("SaltApiSrvc", [
    '$http', 'Configuration', 'AppPref', 'SessionStore', function($http, Configuration, AppPref, SessionStore) {
      var base, saltApi, servicer;
      saltApi = AppPref.get('saltApi');
      if (saltApi.scheme || saltApi.host || saltApi.port) {
        if (!saltApi.scheme) {
          saltApi.scheme = "http";
        }
        if (!saltApi.host) {
          saltApi.host = "localhost";
        }
        if (saltApi.port) {
          saltApi.port = ":" + saltApi.port;
        }
        base = "" + saltApi.scheme + "://" + saltApi.host + saltApi.port + saltApi.prefix;
      } else {
        base = "" + saltApi.prefix;
      }
      delete $http.defaults.headers.common['X-Requested-With'];
      $http.defaults.useXDomain = true;
      servicer = {
        run: function($scope, cmds) {
          var config, headers, url, _ref;
          headers = {
            "X-Auth-Token": (_ref = SessionStore.get('saltApiAuth')) != null ? _ref.token : void 0
          };
          config = {
            headers: headers
          };
          url = "" + base + "/run";
          return $http.post(url, cmds, config).success(function(data, status, headers, config) {
            return true;
          }).error(function(data, status, headers, config) {
            var error;
            error = data != null ? data.error : void 0;
            if (status === 401) {
              $scope.errorMsg = "Please Login! " + error;
            } else {
              $scope.errorMsg = "Run Failed! " + error;
            }
            return true;
          });
        },
        action: function($scope, cmds) {
          var config, headers, url, _ref;
          headers = {
            "X-Auth-Token": (_ref = SessionStore.get('saltApiAuth')) != null ? _ref.token : void 0
          };
          config = {
            headers: headers
          };
          url = "" + base + "/run";
          $scope.command.lastCmds = cmds;
          if (!angular.isArray(cmds)) {
            cmds = [cmds];
          }
          return $http.post(url, cmds, config).success(function(data, status, headers, config) {
            $scope.command.history[$scope.command.humanize($scope.command.lastCmds)] = $scope.command.lastCmds;
            return true;
          }).error(function(data, status, headers, config) {
            var error;
            error = data != null ? data.error : void 0;
            if (status === 401) {
              $scope.errorMsg = "Please Login! " + error;
            } else {
              $scope.errorMsg = "Action Failed! " + error;
            }
            return true;
          });
        },
        login: function($scope, username, password) {
          var reqData, url;
          reqData = {
            "username": username,
            "password": password,
            "eauth": saltApi.eauth
          };
          url = "" + base + "/login";
          return $http.post(url, reqData).success(function(data, status, headers, config) {
            return true;
          }).error(function(data, status, headers, config) {
            $scope.errorMsg = "Login Failed!";
            return true;
          });
        },
        logout: function($scope) {
          var config, headers, url, _ref;
          headers = {
            "X-Auth-Token": (_ref = SessionStore.get('saltApiAuth')) != null ? _ref.token : void 0
          };
          config = {
            headers: headers
          };
          url = "" + base + "/logout";
          return $http.post(url, {}, config).success(function(data, status, headers, config) {
            return true;
          }).error(function(data, status, headers, config) {
            $scope.errorMsg = "Logout Failed!";
            return true;
          });
        }
      };
      return servicer;
    }
  ]);

  /*
  usage:
  
  mainApp = angular.module("MainApp", [... 'saltApiSrvc'])
  
  mainApp.controller 'MyCtlr', ['$scope', ...,'SaltApiEvtSrvc',
      ($scope,...,SaltApiEvtSrvc) ->
  
      $scope.saltApiCallPromise = SaltApiSrvc.act $scope, [{'name':'John'}]
      $scope.saltApiCallPromise.success (data, status, headers, config) ->
          console.log("SaltApi call success")
          $scope.result = data
          return true
  
      $scope.saltApiLoginPromise = SaltApiSrvc.login $scope, 'usernamestring', 'passwordstring'
      $scope.saltApiLoginPromise.success (data, status, headers, config) ->
          console.log("SaltApi login success")
          $scope.result = data
          return true
  */


  saltApiSrvc.factory("SaltApiEvtSrvc", [
    '$rootScope', '$http', 'AppPref', 'SessionStore', '$q', function($rootScope, $http, AppPref, SessionStore, $q) {
      var base, defer, onError, onMessage, onOpen, saltApi, servicer, sse;
      saltApi = AppPref.get('saltApi');
      if (saltApi.scheme || saltApi.host || saltApi.port) {
        if (!saltApi.scheme) {
          saltApi.scheme = "http";
        }
        if (!saltApi.host) {
          saltApi.host = "localhost";
        }
        if (saltApi.port) {
          saltApi.port = ":" + saltApi.port;
        }
        base = "" + saltApi.scheme + "://" + saltApi.host + saltApi.port + saltApi.prefix;
      } else {
        base = "" + saltApi.prefix;
      }
      delete $http.defaults.headers.common['X-Requested-With'];
      $http.defaults.useXDomain = true;
      defer = null;
      sse = null;
      onError = function(event) {
        if (defer != null) {
          console.log("SSE Open Error");
          $rootScope.$apply(defer.reject("SSE Errored"));
          defer = null;
        }
        return true;
      };
      onOpen = function(event) {
        if (defer != null) {
          $rootScope.$apply(defer.resolve(event));
          defer = null;
        }
        return true;
      };
      onMessage = function(event) {
        var data;
        data = angular.fromJson(event.data);
        $rootScope.$apply(typeof servicer.process === "function" ? servicer.process(data) : void 0);
        return true;
      };
      servicer = {
        close: function($scope) {
          if (sse != null) {
            sse.close();
          }
          sse = null;
          return this.active = false;
        },
        events: function($scope, process, tag) {
          var token, url, _ref;
          token = (_ref = SessionStore.get('saltApiAuth')) != null ? _ref.token : void 0;
          tag = tag != null ? encodeURIComponent(tag) : "";
          url = "" + base + "/event/" + token + "?tag=" + tag;
          sse = new EventSource(url);
          sse.onerror = onError;
          sse.onopen = onOpen;
          sse.onmessage = onMessage;
          this.process = process;
          this.active = true;
          defer = $q.defer();
          return defer.promise;
        }
      };
      return servicer;
    }
  ]);

}).call(this);
