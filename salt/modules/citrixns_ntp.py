# -*- coding: utf-8 -*-
'''
A module to manage contents on a Citrix Netscaler under the ntp key.

:codeauthor: :email:`Spencer Ervin <spencer_ervin@hotmail.com>`
:maturity:   new
:depends:    none
:platform:   unix


Configuration
=============
This module accepts connection configuration details either as
parameters, or as configuration settings in pillar as a Salt proxy.
Options passed into opts will be ignored if options are passed into pillar.

.. seealso::
    :prox:`Citrix Netscaler Proxy Module <salt.proxy.citrixns>`

About
=====
This execution module was designed to handle connections to a Citrix Netscaler. This module adds support to send
connections directly to the device through the rest API.

'''

# Import Python Libs
from __future__ import absolute_import
import logging

# Import Salt Libs
import salt.utils.platform
import salt.proxy.citrixns

log = logging.getLogger(__name__)

__virtualname__ = 'ntp'


def __virtual__():
    '''
    Will load for the citrixns proxy minions.
    '''
    try:
        if salt.utils.platform.is_proxy() and \
           __opts__['proxy']['proxytype'] == 'citrixns':
            return __virtualname__
    except KeyError:
        pass

    return False, 'The ntp execution module can only be loaded for citrixns proxy minions.'


def add_ntpserver(serverip=None, servername=None, minpoll=None, maxpoll=None, autokey=None, key=None,
                  preferredntpserver=None, save=False):
    '''
    Add a new ntpserver to the running configuration.

    serverip(str): IP address of the NTP server. Minimum length = 1

    servername(str): Fully qualified domain name of the NTP server.

    minpoll(int): Minimum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.
        Minimum value = 4 Maximum value = 17

    maxpoll(int): Maximum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.
        Minimum value = 4 Maximum value = 17

    autokey(bool): Use the Autokey protocol for key management for this server, with the cryptographic values (for example,
        symmetric key, host and public certificate files, and sign key) generated by the ntp-keygen utility. To require
        authentication for communication with the server, you must set either the value of this parameter or the key
        parameter.

    key(int): Key to use for encrypting authentication fields. All packets sent to and received from the server must include
        authentication fields encrypted by using this key. To require authentication for communication with the server,
        you must set either the value of this parameter or the autokey parameter. Minimum value = 1 Maximum value =
        65534

    preferredntpserver(str): Preferred NTP server. The NetScaler appliance chooses this NTP server for time synchronization
        among a set of correctly operating hosts. Default value: NO Possible values = YES, NO

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.add_ntpserver <args>

    '''

    result = {}

    payload = {'ntpserver': {}}

    if serverip:
        payload['ntpserver']['serverip'] = serverip

    if servername:
        payload['ntpserver']['servername'] = servername

    if minpoll:
        payload['ntpserver']['minpoll'] = minpoll

    if maxpoll:
        payload['ntpserver']['maxpoll'] = maxpoll

    if autokey:
        payload['ntpserver']['autokey'] = autokey

    if key:
        payload['ntpserver']['key'] = key

    if preferredntpserver:
        payload['ntpserver']['preferredntpserver'] = preferredntpserver

    execution = __proxy__['citrixns.post']('config/ntpserver', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result


def disable_ntpsync(state=None, save=False):
    '''
    Disables a ntpsync matching the specified filter.

    state(str): Matches the disable command to the specified value.

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.disable_ntpsync state=foo

    '''

    result = {}

    payload = {'ntpsync': {}}

    if state:
        payload['ntpsync']['state'] = state
    else:
        result['result'] = 'False'
        result['error'] = 'state value not specified.'
        return result

    execution = __proxy__['citrixns.post']('config/ntpsync?action=disable', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result


def enable_ntpsync(state=None, save=False):
    '''
    Enables a ntpsync matching the specified filter.

    state(str): Matches the enable command to the specified value.

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.enable_ntpsync state=foo

    '''

    result = {}

    payload = {'ntpsync': {}}

    if state:
        payload['ntpsync']['state'] = state
    else:
        result['result'] = 'False'
        result['error'] = 'state value not specified.'
        return result

    execution = __proxy__['citrixns.post']('config/ntpsync?action=enable', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result


def get_ntpparam():
    '''
    Show the running configuration for the ntpparam config key.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.get_ntpparam

    '''

    response = salt.proxy.citrixns.parse_return(
            __proxy__['citrixns.get']('config/ntpparam'), 'ntpparam')

    return response


def get_ntpserver(serverip=None, servername=None, minpoll=None, maxpoll=None, autokey=None, key=None,
                  preferredntpserver=None):
    '''
    Show the running configuration for the ntpserver config key.

    serverip(str): Filters results that only match the serverip field.

    servername(str): Filters results that only match the servername field.

    minpoll(int): Filters results that only match the minpoll field.

    maxpoll(int): Filters results that only match the maxpoll field.

    autokey(bool): Filters results that only match the autokey field.

    key(int): Filters results that only match the key field.

    preferredntpserver(str): Filters results that only match the preferredntpserver field.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.get_ntpserver

    '''

    search_filter = []

    if serverip:
        search_filter.append(['serverip', serverip])

    if servername:
        search_filter.append(['servername', servername])

    if minpoll:
        search_filter.append(['minpoll', minpoll])

    if maxpoll:
        search_filter.append(['maxpoll', maxpoll])

    if autokey:
        search_filter.append(['autokey', autokey])

    if key:
        search_filter.append(['key', key])

    if preferredntpserver:
        search_filter.append(['preferredntpserver', preferredntpserver])

    response = salt.proxy.citrixns.parse_return(
            __proxy__['citrixns.get']('config/ntpserver{0}'.format(
                    salt.proxy.citrixns.build_filter(search_filter))), 'ntpserver')

    return response


def get_ntpstatus():
    '''
    Show the running configuration for the ntpstatus config key.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.get_ntpstatus

    '''

    response = salt.proxy.citrixns.parse_return(
            __proxy__['citrixns.get']('config/ntpstatus'), 'ntpstatus')

    return response


def get_ntpsync():
    '''
    Show the running configuration for the ntpsync config key.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.get_ntpsync

    '''

    response = salt.proxy.citrixns.parse_return(
            __proxy__['citrixns.get']('config/ntpsync'), 'ntpsync')

    return response


def unset_ntpparam(authentication=None, trustedkey=None, autokeylogsec=None, revokelogsec=None, save=False):
    '''
    Unsets values from the ntpparam configuration key.

    authentication(bool): Unsets the authentication value.

    trustedkey(bool): Unsets the trustedkey value.

    autokeylogsec(bool): Unsets the autokeylogsec value.

    revokelogsec(bool): Unsets the revokelogsec value.

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.unset_ntpparam <args>

    '''

    result = {}

    payload = {'ntpparam': {}}

    if authentication:
        payload['ntpparam']['authentication'] = True

    if trustedkey:
        payload['ntpparam']['trustedkey'] = True

    if autokeylogsec:
        payload['ntpparam']['autokeylogsec'] = True

    if revokelogsec:
        payload['ntpparam']['revokelogsec'] = True

    execution = __proxy__['citrixns.post']('config/ntpparam?action=unset', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result


def unset_ntpserver(serverip=None, servername=None, minpoll=None, maxpoll=None, autokey=None, key=None,
                    preferredntpserver=None, save=False):
    '''
    Unsets values from the ntpserver configuration key.

    serverip(bool): Unsets the serverip value.

    servername(bool): Unsets the servername value.

    minpoll(bool): Unsets the minpoll value.

    maxpoll(bool): Unsets the maxpoll value.

    autokey(bool): Unsets the autokey value.

    key(bool): Unsets the key value.

    preferredntpserver(bool): Unsets the preferredntpserver value.

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.unset_ntpserver <args>

    '''

    result = {}

    payload = {'ntpserver': {}}

    if serverip:
        payload['ntpserver']['serverip'] = True

    if servername:
        payload['ntpserver']['servername'] = True

    if minpoll:
        payload['ntpserver']['minpoll'] = True

    if maxpoll:
        payload['ntpserver']['maxpoll'] = True

    if autokey:
        payload['ntpserver']['autokey'] = True

    if key:
        payload['ntpserver']['key'] = True

    if preferredntpserver:
        payload['ntpserver']['preferredntpserver'] = True

    execution = __proxy__['citrixns.post']('config/ntpserver?action=unset', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result


def update_ntpparam(authentication=None, trustedkey=None, autokeylogsec=None, revokelogsec=None, save=False):
    '''
    Update the running configuration for the ntpparam config key.

    authentication(str): Apply NTP authentication, which enables the NTP client (NetScaler) to verify that the server is in
        fact known and trusted. Default value: YES Possible values = YES, NO

    trustedkey(list(int)): Key identifiers that are trusted for server authentication with symmetric key cryptography in the
        keys file. Minimum value = 1 Maximum value = 65534

    autokeylogsec(int): Autokey protocol requires the keys to be refreshed periodically. This parameter specifies the
        interval between regenerations of new session keys. In seconds, expressed as a power of 2. Default value: 12
        Minimum value = 0 Maximum value = 32

    revokelogsec(int): Interval between re-randomizations of the autokey seeds to prevent brute-force attacks on the autokey
        algorithms. Default value: 16 Minimum value = 0 Maximum value = 32

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.update_ntpparam <args>

    '''

    result = {}

    payload = {'ntpparam': {}}

    if authentication:
        payload['ntpparam']['authentication'] = authentication

    if trustedkey:
        payload['ntpparam']['trustedkey'] = trustedkey

    if autokeylogsec:
        payload['ntpparam']['autokeylogsec'] = autokeylogsec

    if revokelogsec:
        payload['ntpparam']['revokelogsec'] = revokelogsec

    execution = __proxy__['citrixns.put']('config/ntpparam', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result


def update_ntpserver(serverip=None, servername=None, minpoll=None, maxpoll=None, autokey=None, key=None,
                     preferredntpserver=None, save=False):
    '''
    Update the running configuration for the ntpserver config key.

    serverip(str): IP address of the NTP server. Minimum length = 1

    servername(str): Fully qualified domain name of the NTP server.

    minpoll(int): Minimum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.
        Minimum value = 4 Maximum value = 17

    maxpoll(int): Maximum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.
        Minimum value = 4 Maximum value = 17

    autokey(bool): Use the Autokey protocol for key management for this server, with the cryptographic values (for example,
        symmetric key, host and public certificate files, and sign key) generated by the ntp-keygen utility. To require
        authentication for communication with the server, you must set either the value of this parameter or the key
        parameter.

    key(int): Key to use for encrypting authentication fields. All packets sent to and received from the server must include
        authentication fields encrypted by using this key. To require authentication for communication with the server,
        you must set either the value of this parameter or the autokey parameter. Minimum value = 1 Maximum value =
        65534

    preferredntpserver(str): Preferred NTP server. The NetScaler appliance chooses this NTP server for time synchronization
        among a set of correctly operating hosts. Default value: NO Possible values = YES, NO

    save(bool): Instructs the Netscaler to save the running configuration after execution.

    CLI Example:

    .. code-block:: bash

    salt '*' ntp.update_ntpserver <args>

    '''

    result = {}

    payload = {'ntpserver': {}}

    if serverip:
        payload['ntpserver']['serverip'] = serverip

    if servername:
        payload['ntpserver']['servername'] = servername

    if minpoll:
        payload['ntpserver']['minpoll'] = minpoll

    if maxpoll:
        payload['ntpserver']['maxpoll'] = maxpoll

    if autokey:
        payload['ntpserver']['autokey'] = autokey

    if key:
        payload['ntpserver']['key'] = key

    if preferredntpserver:
        payload['ntpserver']['preferredntpserver'] = preferredntpserver

    execution = __proxy__['citrixns.put']('config/ntpserver', payload)

    if execution is True:
        result['result'] = 'True'
    else:
        result['result'] = 'False'
        result['error'] = execution
        return result

    if save is True:
        result['save'] = __salt__['ns.ns.save_config']()
    else:
        result['save'] = 'False'

    return result
